import { ThemeableComponent } from "../../common";
import { DuetLanguage, DuetTheme, DuetTooltipDirection } from "../../common-types";
import { DuetLangObject } from "../../utils/language-utils";
export type DuetTooltipBreakpoint = "medium" | "large";
export declare class DuetTooltip implements ThemeableComponent {
  /**
   * Own Properties.
   */
  private mql;
  private tooltipId;
  private scrollTimer;
  private buttonEl;
  private tooltipEl;
  private scrollableEl;
  private arrowEl;
  private focusTarget;
  private resizeTimer;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * State() variables
   * Inlined decorator, alphabetical order.
   */
  placement: string;
  tooltipY: number;
  tooltipX: number;
  arrowX: number;
  arrowY: number;
  /**
   * Theme of the tooltip.
   */
  theme: DuetTheme;
  /**
   * The currently active language. This setting changes the accessible labels to match the
   * chosen language.
   * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
   * @default "fi"
   */
  language: DuetLanguage;
  watchLanguageStateHandler(newValue: DuetLanguage, oldValue: DuetLanguage): void;
  /**
   * Default language strings for the accessibleLabel
   * @default {fi: "Näytä lisätietoja", en: "See more information", sv: "Se mer information"}
   */
  accessibleLabelDefault: DuetLangObject | string;
  /**
   * Adds accessible label for the info icon that is only shown for screen
   * readers. This property is always required to create an accessible interface!
   * @default {fi: "Näytä lisätietoja", en: "See more information", sv: "Se mer information"}
   */
  accessibleLabel: string;
  /**
   * @internal
   * Adds a prefix to the accessible label.
   * Used internally by input components to add more context to the tooltip.
   */
  accessibleInputLabel: string;
  /**
   * Default language strings for the accessibleCloseLabel
   * @default {fi: "Sulje lisätiedot", en: "Close details", sv: "Stäng detaljer"}
   */
  accessibleCloseLabelDefault: DuetLangObject | string;
  /**
   * Adds accessible label for the close icon that is only shown for screen
   * readers. This property is always required to create an accessibly interface!
   * @default {fi: "Sulje lisätiedot", en: "Close details", sv: "Stäng detaljer"}
   */
  accessibleCloseLabel: string;
  /**
   * Label of the tooltip. If used, replaces the accessibleLabel option.
   */
  label: string;
  /**
   * Adjust the responsive breakpoint where tooltip starts opening towards left.
   */
  breakpoint: DuetTooltipBreakpoint;
  /**
   * With direction setting you can force the tooltip to always open towards left
   * or right instead of automatically determining the direction.
   */
  direction: DuetTooltipDirection;
  /**
   * Adjust the vertical positioning of the tooltip toggle in pixels. Can be a
   * negative value as well. E.g. "-13px".
   */
  positionVertical: string;
  /**
   * Adjust the horizontal positioning of the tooltip toggle in pixels. Can be a
   * negative value as well. E.g. "-13px".
   */
  positionHorizontal: string;
  /**
   * Toggle whether the tooltip is initially visible or not. This property should
   * not be used in production in most cases.
   */
  active: boolean;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  componentDidLoad(): void;
  componentDidUpdate(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  /**
   * Component event handling.
   */
  onScroll(): void;
  handleWindowResize(): void;
  handleDocumentClick(e: MouseEvent): void;
  handleActiveChange(newActiveValue: boolean): Promise<void>;
  /**
   * Local methods
   */
  private openTooltip;
  private closeTooltip;
  private toggleOpen;
  private handleFocusOut;
  private handleKeyDown;
  private handleCloseClick;
  private updatePlacement;
  /**
   * render() function.
   * Always the last one in the class.
   */
  render(): any;
}
