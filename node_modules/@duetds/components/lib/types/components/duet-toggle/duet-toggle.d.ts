import { EventEmitter } from "../../stencil-public-runtime";
import { A11yComponent, InputComponent, ThemeableComponent } from "../../common";
import { DuetMargin, DuetTheme } from "../../common-types";
export type DuetToggleChangeEvent = {
  component: "duet-toggle";
  checked: boolean;
  value: string;
};
export declare class DuetToggle implements ThemeableComponent, InputComponent, A11yComponent {
  /**
   * Own Properties
   */
  private toggleId;
  private nativeInput;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * Theme of the card.
   */
  theme: DuetTheme;
  /**
   * Controls the margin of the component.
   */
  margin: DuetMargin;
  /**
   * Indicates the id of a related component’s visually focused element.
   */
  accessibleActiveDescendant: string;
  /**
   * Use this prop to add an aria-controls attribute. Use the attribute to indicate
   * the id of a component controlled by this component.
   */
  accessibleControls: string;
  /**
   * Indicates the id of a component owned by the toggle.
   */
  accessibleOwns: string;
  /**
   * Indicates the id of a component that describes the toggle.
   */
  accessibleDescribedBy: string;
  /**
   * Aria Details of the component
   */
  accessibleDetails: string;
  /**
   * String of id's that indicate alternative labels elements
   */
  accessibleLabelledBy: string;
  /**
   * Aria description the button
   */
  accessibleDescription: string;
  /**
   * Label for the toggle.
   */
  label: string;
  /**
   * Position of the label
   */
  labelPosition: "top" | "right" | "left";
  /**
   * Set whether the input is required or not. Please note that this is necessary for
   * accessible inputs when the user is required to fill them. When using this property
   * you need to also set “novalidate” attribute to your form element to prevent
   * browser from displaying its own validation errors.
   */
  required: boolean;
  /**
   * Makes the input component disabled. This prevents users from being able to
   * interact with the input, and conveys its inactive state to assistive technologies.
   */
  disabled: boolean;
  /**
   * Check state of the checkbox.
   */
  checked: boolean;
  checkedChanged(isChecked: boolean): void;
  /**
   * The value of the checkbox does not mean if it's checked or not, use the checked
   * property for that.
   */
  value: string;
  /**
   * Adds a unique identifier for the checkbox.
   */
  identifier: string;
  /**
   * Name of the checkbox.
   */
  name: string;
  /**
   * Defines a specific role attribute for the input.
   */
  role: string;
  /**
   * Emitted when the checked property has changed.
   */
  duetChange: EventEmitter<DuetToggleChangeEvent>;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  /**
   * Component event handling.
   */
  private onClick;
  /**
   * Sets focus on the specified `duet-toggle`. Use this method instead of the global
   * `input.focus()`.
   */
  setFocus(options?: FocusOptions): Promise<void>;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
