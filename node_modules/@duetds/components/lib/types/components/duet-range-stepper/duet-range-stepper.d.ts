import { EventEmitter } from "../../stencil-public-runtime";
import { DuetLanguage, DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
import { DuetLangObject } from "../../utils/language-utils";
export type DuetRangeStepperUpdateEvent = {
  originalEvent: KeyboardEvent | MouseEvent;
  component: "duet-range-stepper";
  from: number;
  to: number;
  index: number;
};
/**
 * @part navigation-arrow - this part enables style overrides for the navigation-arrow
 * @part range-numbers - this part enables style overrides for the range-numbers
 */
export declare class DuetRangeStepper implements ThemeableComponent {
  private leftBn;
  private rightBn;
  private leftBnRef;
  private rightBnRef;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * State() variables
   */
  language: DuetLanguage;
  watchLanguageStateHandler(newValue: DuetLanguage, oldValue: DuetLanguage): void;
  /**
   * Theme of the component.
   */
  theme: DuetTheme;
  /**
   * Start value
   * @default 1
   */
  stepIndex: number;
  watchStepIndexStateHandler(newValue: number): void;
  /**
   * How big is the step
   * @default 50
   */
  stepSize: number;
  watchStepSizeStateHandler(newValue: number, oldValue: number): void;
  /**
   * Total of
   * @default undefined
   */
  total: number;
  /**
   * Default range stepper labels
   */
  ariaLabelsDefaults: DuetLangObject;
  /**
   * Default pagination labels
   */
  ariaLabels: Record<string, string>;
  /**
   * Used to indicate which dom element with ID this element controls
   */
  ariaControls: string;
  /**
   * Event emitted when the step heading is clicked.
   */
  duetRangeStepUpdate: EventEmitter<DuetRangeStepperUpdateEvent>;
  handleStepClick(e: KeyboardEvent | MouseEvent): void;
  componentWillLoad(): void;
  componentDidLoad(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private clampStepIndex;
  private handleClick;
  private getFrom;
  private getTo;
  private generateStepSize;
  private generatePreviousIncrementLabel;
  private generateNextIncrementLabel;
  private onKeyboardDown;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
