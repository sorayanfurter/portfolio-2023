import { EventEmitter } from "../../stencil-public-runtime";
import { DuetHeadingLevel, DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
export type DuetStepState = "current" | "complete" | "incomplete" | "disabled";
export type DuetStepClickEvent = {
  originalEvent: KeyboardEvent | MouseEvent;
  component: "duet-step";
  stepIndex: number;
};
/**
 * @slot unnamed default slot - The componentâ€™s primary content. All child nodes that do not have a slot attribute defined are inserted into this primary slot.
 * @slot heading-content - Step heading content. Use this slot to show additional content next to step heading.
 */
export declare class DuetStep implements ThemeableComponent {
  private buttonId;
  private contentId;
  private buttonElement;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * Theme of the component.
   */
  theme: DuetTheme;
  /**
   * Set the heading for the step.
   */
  heading: string;
  /**
   * Set the heading level used in the HTML markup.
   */
  headingLevel: DuetHeadingLevel;
  /**
   * @internal
   * The index of this step, derived from its position within stepper.
   * This property is used internally by stepper, and should not be set by the developer.
   */
  stepIndex: number;
  /**
   * @internal
   * The state of the step.
   * This property is used internally by stepper, and should not be set by the developer.
   */
  state: DuetStepState;
  /**
   * @internal
   * Enable/disable rounded top corners (on mobile).
   * This property is used internally by stepper, and should not be set by the developer.
   */
  roundedTop: boolean;
  /**
   * @internal
   * Enable/disable rounded bottom corners (on mobile).
   * This property is used internally by stepper, and should not be set by the developer.
   */
  roundedBottom: boolean;
  /**
   * Event emitted when the step heading is clicked.
   */
  duetStepClick: EventEmitter<DuetStepClickEvent>;
  handleStepClick(e: KeyboardEvent | MouseEvent): void;
  componentWillLoad(): void;
  /**
   * Programmatically shift focus to the step's heading.
   */
  setFocus(options?: FocusOptions): Promise<void>;
  private handleKeyDown;
  private handleClick;
  private isClickDisabled;
  private headingColor;
  renderStepCounter(): any;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
