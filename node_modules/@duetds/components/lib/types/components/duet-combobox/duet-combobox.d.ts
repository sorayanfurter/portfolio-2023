import { EventEmitter } from "../../stencil-public-runtime";
import { ThemeableComponent } from "../../common";
import { DuetLanguage, DuetTheme } from "../../common-types";
import { DuetLangObject } from "../../utils/language-utils";
export type DuetComboboxEvent = {
  originalEvent?: Event;
  component: "duet-combobox";
  value: any;
  item: DuetComboboxItem;
};
export type DuetComboboxItem = {
  id?: number;
  value: any;
  name: string;
  html?: string;
  tags?: string[];
};
export declare class DuetCombobox implements ThemeableComponent {
  private input?;
  private listElement;
  private listContainer;
  private resizeObserver;
  element: HTMLDivElement;
  processedItems: DuetComboboxItem[];
  inputWidth: number;
  inputValue: string;
  selectionMsg: string;
  listOpen: boolean;
  selectedItems?: Set<number>;
  activeItem?: number;
  activeItemHandler(state: any): void;
  language: DuetLanguage;
  watchLanguageStateHandler(newValue: DuetLanguage, oldValue: DuetLanguage): void;
  /**
   * Placeholder defaults
   * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.책책책책" }
   */
  accessibleLabelDefaults: DuetLangObject | string;
  /**
   * Hint text to display before the user types into the date picker input.
   * @default   {
   * heading: "Valitse:",
   * item: "{0}, ({1}/{2})",
   * itemFiltered: "{0}, ({1}/{2} - {3} suodatettu"
   * }
   */
  accessibleLabels: Record<string, string>;
  /**
   * Theme of the combobox.
   */
  theme: DuetTheme;
  /**
   * Force the user to make a selection (typing things in the input field will only be used for list search)
   */
  force: boolean;
  /**
   * Array of item objects.
   */
  items: any;
  /**
   * A hook to overwrite how the values are displayed in the input field after a User select an item
   * @example (item) => `${item.name} (${item.value})`
   * @default undefined
   */
  formatter: (item: DuetComboboxItem) => string;
  /**
   * Value of selected item/s
   */
  value: string;
  /**
   * Defines minimum number of characters that must be given to show search results
   */
  minCharacters: number;
  /**
   * Defines if items list should always open after clicking on input
   */
  openListOnClick: boolean;
  /**
   * Defines if filtering of items should be done by includes or startsWith
   */
  filterType: "includes" | "startsWith";
  /**
   * Emitted when selected item changed.
   */
  duetChange: EventEmitter<DuetComboboxEvent>;
  handleDocumentClick(e: MouseEvent): void;
  /**
   * Exposes a formatter function to format the item value displayed after a user selects an item
   * @param item: DuetComboboxItem
   */
  formatItem(item: DuetComboboxItem): Promise<string>;
  processItems(): Promise<void>;
  processValue(): Promise<void>;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  componentDidLoad(): void;
  /**
   * Updates the input text based on the selected/clicked items.
   * @param event - event
   *'param item: DuetComboboxItem - the item that was selected
   */
  private onListClick;
  /**
   * Helper function that checks inputs in the field, compares it with the item list and returns true when inputvalue matches selectedItem id
   * TODO: this should be disabled in multiple mode
   */
  private shouldListBeFiltered;
  /**
   * Helper function that return correct collection depending on filter status returend by shouldListBeFiltered
   */
  private returnFilteredOrNonFiltered;
  /**
   * Updates the selected items based on the item id.
   * @param id
   * @private
   */
  private updateSelectedItems;
  /**
   * Updates the input text based on the selected/clicked items.
   * @param bool -override to clear if invoked by "click outside"
   */
  private updateInputText;
  private updateInputValue;
  private handleInputKeyDownEvent;
  private selectActiveItem;
  private announceActive;
  private scrollToActive;
  private formatLabel;
  /**
   * Filter the items based on the input value
   */
  private getFilteredItems;
  /**
   * Sort the return from getFilteredItems so that any item with and item.id that matches this.selectedItems is placed first
   */
  private sortFilteredItems;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
