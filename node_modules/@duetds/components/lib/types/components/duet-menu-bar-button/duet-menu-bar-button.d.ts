import { A11yComponent } from "../../common";
import { DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
import { DuetIconSize } from "../duet-icon/duet-icon";
export declare class DuetMenuBarButton implements ThemeableComponent, A11yComponent {
  /**
   * Own Properties.
   */
  private nativeButton?;
  private mql;
  private boundMqlFunctions;
  iconSize: DuetIconSize;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * Adds accessible label for the button that is only shown for screen readers.
   * Typically, this label text replaces the visible text on the button for
   * users who use assistive technology.
   */
  accessibleLabel: string;
  /**
   * Use this property to add an aria-controls attribute to the button. Use
   * the attribute to point to the unique id of the content that the button manages.
   */
  accessibleControls: string;
  /**
   * Use this property to add an aria-haspopup attribute to a button, if you are using it as a menu button.
   */
  accessiblePopup: string;
  /**
   * Indicates the id of a related componentâ€™s visually focused element.
   */
  accessibleActiveDescendant: string;
  /**
   * Indicates the id of a component owned by the button.
   */
  accessibleOwns: string;
  /**
   * Indicates the id of a component that describes the button.
   */
  accessibleDescribedBy: string;
  /**
   * Details of the component
   */
  accessibleDetails: string;
  /**
   * String of id's that indicate alternative labels elements
   */
  accessibleLabelledBy: string;
  /**
   * Aria description the button
   */
  accessibleDescription: string;
  /**
   * If a button expands or collapses adjacent content, then use the ariaExpanded
   * prop to add the aria-expanded attribute to the button. Set the value to convey
   * the current expanded (true) or collapsed (false) state of the content.
   */
  accessibleExpanded: boolean;
  /**
   * Tells screen reader the element is pressed.
   */
  accessiblePressed: boolean;
  /**
   * Theme.
   */
  theme: DuetTheme;
  /**
   * Icon
   */
  icon: string;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  private changeIconSize;
  /**
   * Sets focus on underlying button element.
   */
  setFocus(options?: FocusOptions): Promise<void>;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
