import { DuetListBreakpoint, DuetMargin, DuetPadding, DuetTheme } from "../../common-types";
import { ThemeableComponent } from "../../common/themeable-component";
export type DuetListVariation = "default" | "striped" | "bordered" | "inner-bordered";
export type DuetListMobileAlignment = "left" | "center";
export type DuetListLabelWidth = "30" | "50" | "70" | "100";
export declare class DuetList implements ThemeableComponent {
  /**
   * Own Properties.
   */
  private mutationO?;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * Theme of the list.
   */
  theme: DuetTheme;
  /**
   * Controls the margin of the component.
   */
  margin: DuetMargin;
  /**
   * Controls the padding of the component.
   */
  padding: DuetPadding;
  /**
   * Adjusts the alignment of the list items on mobile breakpoint.
   */
  mobile: DuetListMobileAlignment;
  /**
   * Switch the breakpoint used to trigger the content stacking. These match to
   * similar media query tokens: $media-query-small and $media-query-large.
   */
  breakpoint: DuetListBreakpoint;
  /**
   * Style variation of the list.
   */
  variation: DuetListVariation;
  /**
   * Set the column width of the first column in percentages.
   */
  labelWidth: DuetListLabelWidth;
  /**
   * Enable or disable the automatic responsive behaviour of the list
   * component. Setting this option to "true"
   * makes sure that contents are stacked vertically on mobile.
   * When "false" is set, contents are always shown in a single row.
   */
  responsive: boolean;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  connectedCallback(): Promise<void>;
  disconnectedCallback(): void;
  /**
   * Local methods
   */
  private toggleClass;
  private updateListItems;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
