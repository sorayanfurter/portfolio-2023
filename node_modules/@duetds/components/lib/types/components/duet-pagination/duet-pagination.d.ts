import { EventEmitter } from "../../stencil-public-runtime";
import { A11yComponent, ThemeableComponent } from "../../common";
import { DuetLanguage, DuetTheme } from "../../common-types";
import { DuetLangObject } from "../../utils/language-utils";
export type DuetPaginationPageEvent = {
  originalEvent?: Event;
  component: "duet-pagination";
  current: number;
  take: number;
  from: number;
  to: number;
  type: "page" | "jump";
};
export type DuetPaginationVariation = "default" | "compact";
/**
 * @part navigation-arrow - this part enables style overrides for the navigation-arrow
 * @part navigation-jump - this part enables style overrides for the navigation-jump
 * @part navigation-overlay - this part enables style overrides for the navigation-overlay
 * @part navigation-section - this part enables style overrides for the navigation-section
 */
export declare class DuetPagination implements ThemeableComponent, A11yComponent {
  private listId;
  private nativeNav;
  numbersStore: string;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * State() variables
   * @internal
   */
  totalPages: number;
  /**
   * State() variables
   * @internal
   */
  internalSectionIndex: number;
  language: DuetLanguage;
  watchLanguageStateHandler(newValue: DuetLanguage, oldValue: DuetLanguage): void;
  /**
   * Theme of the pagination.
   */
  theme: DuetTheme;
  /**
   * Characters to use for the jump buttons.
   */
  jumpString: string;
  /**
   * Variation of the paginator (compact and default supported)
   */
  variation: DuetPaginationVariation;
  /**
   * Described By id
   */
  accessibleDescribedBy: string;
  /**
   * Details of the component
   */
  accessibleDetails: string;
  /**
   * String of id's that indicate alternative labels elements
   */
  accessibleLabelledBy: string;
  /**
   * Aria description the button
   */
  accessibleDescription: string;
  /**
   * Default pagination labels
   */
  accessibleLabelsDefaults: DuetLangObject;
  /**
   * Default pagination labels
   */
  accessibleLabels: Record<string, string>;
  /**
   * The size of the take, when paginating.
   */
  take: number;
  /**
   * Amount of visible page numbers to show
   */
  visibleItems: number;
  /**
   * The total size of the paginating data
   */
  total: number;
  watchPropTotalHandler(): boolean;
  /**
   * Used to indicate which dom element with ID this element controls
   */
  ariaControls: string;
  /**
   * The current page
   */
  current: number;
  watchStateHandler(newValue: boolean, oldValue: boolean): Promise<boolean>;
  /**
   * Emitted a page selection has been made
   */
  duetPageChange: EventEmitter<DuetPaginationPageEvent>;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  componentWillRender(): void;
  componentDidRender(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  /**
   * Private methods.
   */
  private actionChain;
  private emitPageEvent;
  private calculatePageTake;
  private onMouseHandler;
  private onKeyboardDown;
  private getEnteredNumber;
  private setFocus;
  private pageClickHandler;
  private sectionClickHandler;
  private jumpToStart;
  private jumpToEnd;
  private renderPageNumbers;
  private shouldDisplayNavigation;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
