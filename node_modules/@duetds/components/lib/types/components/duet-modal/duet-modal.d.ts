import { EventEmitter } from "../../stencil-public-runtime";
import { A11yComponent, ThemeableComponent } from "../../common";
import { DuetColor, DuetHeadingLevel, DuetIconName, DuetLanguage, DuetTheme, DuetVisualHeadingLevel } from "../../common-types";
import { DuetLangObject } from "../../utils/language-utils";
export type DuetModalSize = "small" | "medium" | "large";
export type DuetModalCloseEvent = {
  originalEvent: Event;
  component: "duet-modal";
};
/**
 * @slot top - This is a slot that takes any content and will be displayed as the first thing in the hero area (typically an image)
 */
export declare class DuetModal implements ThemeableComponent, A11yComponent {
  /**
   * Own Properties.
   */
  private modalId;
  private slotDefaultId;
  private modalEl?;
  private modalInnerEl?;
  private buttonEl?;
  private focusedElBeforeOpen;
  private isAndroidDevice;
  private isSafariBrowser;
  private handleAndroidResizeEvents;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * State() variables
   * Inlined decorator, alphabetical order.
   */
  open: boolean;
  openChanged(): void;
  /**
   * The currently active language. This setting also changes the logo to match
   * the chosen language.
   * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
   * @default "fi"
   */
  language: DuetLanguage;
  watchLanguageStateHandler(newValue: DuetLanguage, oldValue: DuetLanguage): void;
  /**
   * Defaults for accessibleCloseLabel
   * @default {fi: "Sulje ikkuna", sv: "Stäng fönstret", en: "Close the dialog", }
   */
  accessibleCloseLabelDefaults: DuetLangObject | string;
  /**
   * Adds accessible label for the close icon that is only shown for screen
   * readers. This property is always required to create an accessibly interface!
   * Swedish translation for this property is “Stäng fönstret”.
   * @default {fi: "Sulje ikkuna", sv: "Stäng fönstret", en: "Close the dialog", }
   */
  accessibleCloseLabel: string;
  /**
   * Size of the modal window.
   */
  size: DuetModalSize;
  /**
   * Indicates the id or a string of space seperated ids of a component(s) that describes the input.
   */
  accessibleDescribedBy: string;
  /**
   * Indicates the id or a string of space seperated ids of a component(s) that labels the input.
   */
  accessibleLabelledBy: string;
  /**
   * By default the heading is used as target for aria-labelledby, and it overrides this label.
   * If you wish to skip the heading, you must set this label.
   */
  accessibleLabel: string;
  /**
   * Details of the component
   */
  accessibleDetails: string;
  /**
   * Aria description the button
   */
  accessibleDescription: string;
  /**
   * Size of the modal window's padding.
   */
  gutterSize: DuetModalSize | "none";
  /**
   * Theme of the modal.
   */
  theme: DuetTheme;
  /**
   * Accessible heading displayed in the modal. The modal marks this as the
   * label of the modal when used. This helps screen reader users which is
   * why this is a required property.
   */
  heading: string;
  /**
   * Accessible heading size
   */
  headingLevel: DuetHeadingLevel;
  /**
   * Makes the visual style mimic a specific heading level. This option allows
   * you to make e.g. h1 visually look like h3, but still keep it h1 in the
   * markup.
   */
  headingVisualLevel: DuetVisualHeadingLevel | undefined;
  /**
   * Icon to display above the heading (from Duet’s icons). Example:
   * "form-location"
   */
  icon: DuetIconName;
  /**
   * Custom color to be used for the icon, as a design token entered in camelCase
   * or kebab-case. Example: "primary".
   */
  color: DuetColor;
  /**
   * Use this property when you need to have the modal dialog initially active.
   */
  active: boolean;
  activeChanged(): void;
  /**
   * Use this property when you want the modal to close when clicked outside of modal.
   */
  closeOnBlur: boolean;
  /**
   * Emitted when the modal is opened.
   */
  duetOpen: EventEmitter;
  /**
   * Emitted when the modal is closed.
   */
  duetClose: EventEmitter;
  /**
   * Emitted before the modal is closed. To prevent the modal from actually closing, use ev.detail.originalEvent.preventDefault().
   */
  duetBeforeClose: EventEmitter<DuetModalCloseEvent>;
  /**
   * Component lifecycle events.
   */
  componentWillLoad(): void;
  componentDidLoad(): void;
  connectedCallback(): void;
  disconnectedCallback(): void;
  /**
   * Component event handling.
   */
  handleKeyUp(ev: any): void;
  /**
   * Shows the modal dialog. Additionally saves the element that triggered
   * the modal so that focus can be moved back to this specific element when
   * the modal dialog is closed.
   */
  show(): Promise<void>;
  /**
   * Hides the modal dialog and puts focus back to the original element
   * that triggered the modal (if we’re still in the same view).
   */
  hide(): Promise<void>;
  /**
   * Local methods.
   */
  private closeModal;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
