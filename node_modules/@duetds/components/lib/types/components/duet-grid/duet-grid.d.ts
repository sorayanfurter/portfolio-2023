import { ComponentInterface } from "../../stencil-public-runtime";
import { DuetDirection, DuetGridBreakpoint } from "../../common-types";
export type DuetGridAlignment = "top" | "bottom" | "center" | "stretch" | "baseline" | "form_distribute";
export type DuetGridDistribution = "default" | "left" | "right" | "center" | "space-between" | "space-around" | "space-evenly";
export type DuetGridMobileAlignment = "" | "auto" | "left" | "right" | "center";
export declare class DuetGrid implements ComponentInterface {
  /**
   * Own Properties.
   */
  private mutationO?;
  private mutation1?;
  private mql;
  distributeFormElement: boolean;
  /**
   * Reference to host HTML element.
   */
  element: HTMLElement;
  /**
   * Enable or disable the automatic responsive behaviour of the grid component.
   * Setting this option to "true" makes sure that contents are stacked vertically
   * on mobile (575px and under).
   */
  responsive: boolean;
  /**
   * Switch the breakpoint used to trigger the content stacking. These match to
   * similar media query tokens: $media-query-small and $media-query-medium.
   */
  breakpoint: DuetGridBreakpoint;
  /**
   * Direction of the grid items.
   */
  direction: DuetDirection;
  /**
   * Reverse the order of the grid items when horizontal. Usefull when we want the primary item
   * to be on bottom right on desktop, but on top on mobile and the first for screen readers.
   */
  rowReverse: boolean;
  /**
   * Adjusts the vertical alignment of the grid items, if set to "form_distribute"
   * the grid will try to calculate correct paddings for any duet-input fields inside duet-grid-items,
   * so that they align even when displaying errors.
   */
  alignment: DuetGridAlignment;
  /**
   * Adjusts the horizontal distribution of the grid items.
   */
  distribution: DuetGridDistribution;
  /**
   * Adjusts the horizontal alignment of the grid items on mobile (575px and under).
   */
  mobile: DuetGridMobileAlignment;
  /**
   * Private functions
   */
  /**
   * Returns the element height including margins
   * @param element - element
   * @returns {number}
   */
  private outerHeight;
  /**
   * Component lifecycle events.
   */
  connectedCallback(): Promise<void>;
  disconnectedCallback(): void;
  /**
   * Local methods
   */
  private updateGridItems;
  private updateGridItemsWithInputFields;
  /**
   * render() function
   * Always the last one in the class.
   */
  render(): any;
}
