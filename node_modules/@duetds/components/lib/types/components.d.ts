/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { DuetCardHeadingLevel, DuetChoiceGroupBreakpoint, DuetChoiceType, DuetColor, DuetDirection, DuetGridBreakpoint, DuetHeadingLevel, DuetIconName, DuetLanguage, DuetLinkVariation, DuetListBreakpoint, DuetLocale, DuetMargin, DuetPadding, DuetStatus, DuetTableBreakpoint, DuetTableStickyDistance, DuetTableVariant, DuetTheme, DuetTooltipDirection, DuetVisualHeadingLevel, StatusMessage } from "./common-types";
import { DuetActionButtonEvent, DuetActionButtonIconSize } from "./components/duet-action-button/duet-action-button";
import { DuetLangObject } from "./utils/language-utils";
import { DuetAlertEvent } from "./components/duet-alert/duet-alert";
import { DuetButtonIconSize, DuetButtonSize, DuetButtonTextCentering, DuetButtonVariation, DuetButtonWrapping } from "./components/duet-button/duet-button";
import { DuetCaptionSize } from "./components/duet-caption/duet-caption";
import { DuetCardPadding, DuetCardToggleEvent, DuetCardVariation } from "./components/duet-card/duet-card";
import { DuetBreakpoints } from "./utils/token-utils";
import { DuetCheckboxEvent } from "./components/duet-checkbox/duet-checkbox";
import { DuetChoiceEvent } from "./components/duet-choice/duet-choice";
import { DuetCollapsibleHeadingFontSize, DuetCollapsibleToggleEvent, DuetCollapsibleWeight } from "./components/duet-collapsible/duet-collapsible";
import { DuetComboboxEvent, DuetComboboxItem } from "./components/duet-combobox/duet-combobox";
import { DuetCookieConsentEvent } from "./components/duet-cookie-consent/duet-cookie-consent";
import { DuetDatePickerChangeEvent, DuetDatePickerDirection, DuetDatePickerFocusEvent } from "./components/duet-date-picker/duet-date-picker";
import { DuetDividerMargin } from "./components/duet-divider/duet-divider";
import { DuetEditableTableActions, DuetEditableTableColumns, DuetEditableTableRows, DuetTableMenuEvent, DuetTableToggleEvent } from "./components/duet-editable-table/duet-editable-table";
import { DuetEmptyStateSize } from "./components/duet-empty-state/duet-empty-state";
import { DuetFooterAnalyticsEvent, DuetFooterChangeEvent, DuetFooterVariation } from "./components/duet-footer/duet-footer";
import { DuetGridAlignment, DuetGridDistribution, DuetGridMobileAlignment } from "./components/duet-grid/duet-grid";
import { DuetHeaderAnalyticsEvent, DuetHeaderChangeEvent, DuetHeaderMobileNavToggleEvent, I18nText } from "./components/duet-header/duet-header";
import { DuetHeadingWeight } from "./components/duet-heading/duet-heading";
import { DuetHeroAnalyticsEvent, DuetHeroButtonData, DuetHeroClickEvent, DuetHeroIconSize, DuetHeroVariation } from "./components/duet-hero/duet-hero";
import { DuetIconSize } from "./components/duet-icon/duet-icon";
import { DuetInputComponentType, DuetInputEvent, DuetInputType, DuetVariationType } from "./components/duet-input/duet-input";
import { DuetLabelMargin, DuetLabelSize } from "./components/duet-label/duet-label";
import { DuetLayoutStickyDistance } from "./components/duet-layout/duet-layout";
import { DuetListLabelWidth, DuetListMobileAlignment, DuetListVariation } from "./components/duet-list/duet-list";
import { DuetLogoSize } from "./components/duet-logo/duet-logo";
import { DuetMenuBarChangeEvent } from "./components/duet-menu-bar/duet-menu-bar";
import { DuetModalCloseEvent, DuetModalSize } from "./components/duet-modal/duet-modal";
import { DuetMultiselectEvent, DuetMultiselectItem } from "./components/duet-multiselect/duet-multiselect";
import { DuetNotificationDrawerDirection } from "./components/duet-notification-drawer/duet-notification-drawer";
import { DuetNumberInputEvent } from "./components/duet-number-input/duet-number-input";
import { DuetPaginationPageEvent, DuetPaginationVariation } from "./components/duet-pagination/duet-pagination";
import { DuetParagraphSize, DuetParagraphVariation, DuetParagraphWeight } from "./components/duet-paragraph/duet-paragraph";
import { DuetRadioEvent } from "./components/duet-radio/duet-radio";
import { DuetRangeChangeEvent } from "./components/duet-range-slider/duet-range-slider";
import { DuetRangeStepperUpdateEvent } from "./components/duet-range-stepper/duet-range-stepper";
import { DuetSelectEvent, DuetSelectItems, DuetSelectVariation } from "./components/duet-select/duet-select";
import { DuetSlideoutEventDetails } from "./components/duet-slideout/duet-slideout";
import { DuetSpacerBreakpoint, DuetSpacerSize } from "./components/duet-spacer/duet-spacer";
import { DuetSpinnerSize } from "./components/duet-spinner/duet-spinner";
import { DuetStepClickEvent, DuetStepState } from "./components/duet-step/duet-step";
import { DuetStepChangeEvent } from "./components/duet-stepper/duet-stepper";
import { DuetTabGroupEvent, DuetTabVariation } from "./components/duet-tab-group/duet-tab-group";
import { DuetTextareaEvent } from "./components/duet-textarea/duet-textarea";
import { DuetToggleChangeEvent } from "./components/duet-toggle/duet-toggle";
import { DuetTooltipBreakpoint } from "./components/duet-tooltip/duet-tooltip";
import { DuetUploadEvent, DuetUploadTableGroupName, StringMap, XHRInternalMiddleWare } from "./components/duet-upload/duet-upload";
import { DuetEditableTableActions as DuetEditableTableActions1 } from "./components/duet-editable-table/duet-editable-table";
import { DuetUploadErrorCode } from "./components/duet-upload/errorcodes.utils";
export { DuetCardHeadingLevel, DuetChoiceGroupBreakpoint, DuetChoiceType, DuetColor, DuetDirection, DuetGridBreakpoint, DuetHeadingLevel, DuetIconName, DuetLanguage, DuetLinkVariation, DuetListBreakpoint, DuetLocale, DuetMargin, DuetPadding, DuetStatus, DuetTableBreakpoint, DuetTableStickyDistance, DuetTableVariant, DuetTheme, DuetTooltipDirection, DuetVisualHeadingLevel, StatusMessage } from "./common-types";
export { DuetActionButtonEvent, DuetActionButtonIconSize } from "./components/duet-action-button/duet-action-button";
export { DuetLangObject } from "./utils/language-utils";
export { DuetAlertEvent } from "./components/duet-alert/duet-alert";
export { DuetButtonIconSize, DuetButtonSize, DuetButtonTextCentering, DuetButtonVariation, DuetButtonWrapping } from "./components/duet-button/duet-button";
export { DuetCaptionSize } from "./components/duet-caption/duet-caption";
export { DuetCardPadding, DuetCardToggleEvent, DuetCardVariation } from "./components/duet-card/duet-card";
export { DuetBreakpoints } from "./utils/token-utils";
export { DuetCheckboxEvent } from "./components/duet-checkbox/duet-checkbox";
export { DuetChoiceEvent } from "./components/duet-choice/duet-choice";
export { DuetCollapsibleHeadingFontSize, DuetCollapsibleToggleEvent, DuetCollapsibleWeight } from "./components/duet-collapsible/duet-collapsible";
export { DuetComboboxEvent, DuetComboboxItem } from "./components/duet-combobox/duet-combobox";
export { DuetCookieConsentEvent } from "./components/duet-cookie-consent/duet-cookie-consent";
export { DuetDatePickerChangeEvent, DuetDatePickerDirection, DuetDatePickerFocusEvent } from "./components/duet-date-picker/duet-date-picker";
export { DuetDividerMargin } from "./components/duet-divider/duet-divider";
export { DuetEditableTableActions, DuetEditableTableColumns, DuetEditableTableRows, DuetTableMenuEvent, DuetTableToggleEvent } from "./components/duet-editable-table/duet-editable-table";
export { DuetEmptyStateSize } from "./components/duet-empty-state/duet-empty-state";
export { DuetFooterAnalyticsEvent, DuetFooterChangeEvent, DuetFooterVariation } from "./components/duet-footer/duet-footer";
export { DuetGridAlignment, DuetGridDistribution, DuetGridMobileAlignment } from "./components/duet-grid/duet-grid";
export { DuetHeaderAnalyticsEvent, DuetHeaderChangeEvent, DuetHeaderMobileNavToggleEvent, I18nText } from "./components/duet-header/duet-header";
export { DuetHeadingWeight } from "./components/duet-heading/duet-heading";
export { DuetHeroAnalyticsEvent, DuetHeroButtonData, DuetHeroClickEvent, DuetHeroIconSize, DuetHeroVariation } from "./components/duet-hero/duet-hero";
export { DuetIconSize } from "./components/duet-icon/duet-icon";
export { DuetInputComponentType, DuetInputEvent, DuetInputType, DuetVariationType } from "./components/duet-input/duet-input";
export { DuetLabelMargin, DuetLabelSize } from "./components/duet-label/duet-label";
export { DuetLayoutStickyDistance } from "./components/duet-layout/duet-layout";
export { DuetListLabelWidth, DuetListMobileAlignment, DuetListVariation } from "./components/duet-list/duet-list";
export { DuetLogoSize } from "./components/duet-logo/duet-logo";
export { DuetMenuBarChangeEvent } from "./components/duet-menu-bar/duet-menu-bar";
export { DuetModalCloseEvent, DuetModalSize } from "./components/duet-modal/duet-modal";
export { DuetMultiselectEvent, DuetMultiselectItem } from "./components/duet-multiselect/duet-multiselect";
export { DuetNotificationDrawerDirection } from "./components/duet-notification-drawer/duet-notification-drawer";
export { DuetNumberInputEvent } from "./components/duet-number-input/duet-number-input";
export { DuetPaginationPageEvent, DuetPaginationVariation } from "./components/duet-pagination/duet-pagination";
export { DuetParagraphSize, DuetParagraphVariation, DuetParagraphWeight } from "./components/duet-paragraph/duet-paragraph";
export { DuetRadioEvent } from "./components/duet-radio/duet-radio";
export { DuetRangeChangeEvent } from "./components/duet-range-slider/duet-range-slider";
export { DuetRangeStepperUpdateEvent } from "./components/duet-range-stepper/duet-range-stepper";
export { DuetSelectEvent, DuetSelectItems, DuetSelectVariation } from "./components/duet-select/duet-select";
export { DuetSlideoutEventDetails } from "./components/duet-slideout/duet-slideout";
export { DuetSpacerBreakpoint, DuetSpacerSize } from "./components/duet-spacer/duet-spacer";
export { DuetSpinnerSize } from "./components/duet-spinner/duet-spinner";
export { DuetStepClickEvent, DuetStepState } from "./components/duet-step/duet-step";
export { DuetStepChangeEvent } from "./components/duet-stepper/duet-stepper";
export { DuetTabGroupEvent, DuetTabVariation } from "./components/duet-tab-group/duet-tab-group";
export { DuetTextareaEvent } from "./components/duet-textarea/duet-textarea";
export { DuetToggleChangeEvent } from "./components/duet-toggle/duet-toggle";
export { DuetTooltipBreakpoint } from "./components/duet-tooltip/duet-tooltip";
export { DuetUploadEvent, DuetUploadTableGroupName, StringMap, XHRInternalMiddleWare } from "./components/duet-upload/duet-upload";
export { DuetEditableTableActions as DuetEditableTableActions1 } from "./components/duet-editable-table/duet-editable-table";
export { DuetUploadErrorCode } from "./components/duet-upload/errorcodes.utils";
export namespace Components {
    interface DuetActionButton {
        /**
          * Used to indicate which dom element with ID this element controls
         */
        "accessibleControls": string;
        /**
          * Described By id
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Details of the component
         */
        "accessibleDetails": string;
        /**
          * Accessible label
         */
        "accessibleLabel": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Default accessible label
         */
        "accessibleLabelsDefaults": DuetLangObject;
        /**
          * Title of the action button (shows as DOM tooltip when hovering) if set to true, this will try to add a best-guess title based on action-name if set to a string the string is used if set to false nothing is set
         */
        "accessibleTitle": string | boolean;
        /**
          * Name of id of action that was called being called
         */
        "actionId": string;
        /**
          * Name of id of action that was called being called
         */
        "actionMeta": Record<any, any> | string;
        /**
          * Name of action being called
         */
        "actionName": string;
        /**
          * Custom color to be used for a background, as a design token entered in camelCase or kebab-case. Using this option the icon will always be resized to $size-icon-medium on mobile viewports. Example: "color-primary".
         */
        "background": DuetColor;
        /**
          * Custom color to be used for the icon, as a design token entered in camelCase or kebab-case. Example: "color-primary". This property can also be set to "currentColor" which forces the icon to use the CSS text color of parent element instead. Useful when you want to control the color in stylesheet instead.
         */
        "color": DuetColor;
        /**
          * Disables the button
         */
        "disabled": boolean;
        /**
          * Color of the icon to display
         */
        "iconColor": string;
        /**
          * Name of the icon to display
         */
        "iconName": string;
        /**
          * Size of the icon
         */
        "iconSize": DuetActionButtonIconSize;
        /**
          * Sets focus on the specified `duet-action-button`. Use this method instead of the global `button.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the pagination.
         */
        "theme": DuetTheme;
    }
    interface DuetAlert {
        /**
          * Adds accessible label for the dismissible alert close button.
          * @default {fi: "Sulje viesti", sv: "Stäng meddelandet", en: "Close the message"}
         */
        "accessibleLabel": string;
        /**
          * Property to change languageDefaults on the component. normally you would handle these strings on an application level and override @accessibleLabel when needed
          * @default {fi: "Sulje viesti", sv: "Stäng meddelandet", en: "Close the message"}
         */
        "accessibleLabelDefaults": DuetLangObject | string;
        /**
          * Enable or disabled announcements by assistive technologies.
         */
        "announcements": boolean;
        /**
          * Time in milliseconds which is waited before auto dismiss.
         */
        "autoDismiss": number;
        /**
          * Should a button be rendered to dismiss the alert?
         */
        "dismissible": boolean;
        /**
          * Hide.
         */
        "hide": () => Promise<void>;
        /**
          * Icon to display to the left of the content.
         */
        "icon": DuetIconName;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Controls the padding of the component.
         */
        "padding": DuetPadding;
        /**
          * Show.
         */
        "show": () => Promise<void>;
        /**
          * Theme of the card.
         */
        "theme": DuetTheme;
        /**
          * Style variation of the alert.
         */
        "variation": DuetStatus;
    }
    interface DuetBadge {
        /**
          * Variation of the background. "strong" results in a more prominent background color.
          * @default "normal"
         */
        "background": "normal" | "strong";
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Theme of the badge.
         */
        "theme": DuetTheme;
        /**
          * Style variation of the badge.
         */
        "variation": DuetStatus;
    }
    interface DuetBanner {
        /**
          * Background color.
         */
        "backgroundColor": DuetColor;
        /**
          * The actual heading level used in the HTML markup.
         */
        "headingLevel": DuetHeadingLevel;
        /**
          * Icon.
         */
        "icon": DuetIconName;
        /**
          * Icon background color.
         */
        "iconBackgroundColor": DuetColor;
        /**
          * Icon color.
         */
        "iconColor": DuetColor;
        /**
          * Image. Example image is 512x341;
         */
        "image": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Size.
         */
        "size": "auto" | "small" | "large";
        /**
          * Text color.
         */
        "textColor": DuetColor;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetBreadcrumb {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Href
         */
        "href": string;
        /**
          * Icon
         */
        "icon": DuetIconName;
        /**
          * Theme
         */
        "theme": DuetTheme;
    }
    interface DuetBreadcrumbs {
        /**
          * Theme
         */
        "theme": DuetTheme;
        /**
          * Variation
         */
        "variation": "header" | "footer";
    }
    interface DuetButton {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this property to add an aria-controls attribute to the button. Use the attribute to point to the unique id of the content that the button manages.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the button.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Details of the component
         */
        "accessibleDetails": string;
        /**
          * If a button expands or collapses adjacent content, then use the ariaExpanded prop to add the aria-expanded attribute to the button. Set the value to convey the current expanded (true) or collapsed (false) state of the content.
         */
        "accessibleExpanded": boolean;
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal": string;
        /**
          * Property to change accessibleLabelExternal defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelExternal when needed
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults": DuetLangObject | string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Indicates the id of a component owned by the button.
         */
        "accessibleOwns": string;
        /**
          * Use this property to add an aria-haspopup attribute to a button, if you are using it as a menu button.
         */
        "accessiblePopup": string;
        /**
          * Tells screen reader the element is pressed.
         */
        "accessiblePressed": boolean;
        /**
          * Centers the text of a button
         */
        "centerText": DuetButtonTextCentering;
        /**
          * Custom color to be used for text, as a design token entered in camelCase or kebab-case. Example: "color-primary".
         */
        "color": DuetColor;
        /**
          * Makes the button component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Expands the button to fill 100% of the container width.
         */
        "expand": boolean;
        /**
          * Forces URL to open in a new browser tab. Used together with URL prop.
         */
        "external": boolean;
        /**
          * Keep the button fixed width even on mobile viewports.
         */
        "fixed": boolean;
        /**
          * Icon to display to the left of the button content. This is ignored/overridden when button is used as an external link.
         */
        "icon": DuetIconName;
        /**
          * Whether this button should use styles meant for displaying just an icon.
         */
        "iconOnly": boolean;
        /**
          * Show icon on the right side of the button content.
         */
        "iconRight": boolean;
        /**
          * Icon size.
         */
        "iconSize": DuetButtonIconSize;
        /**
          * Adds a unique identifier for the button. Please note that with this particular component this id is added inside Shadow DOM. If you need an id on the html element, use regular id attribute instead.
         */
        "identifier": string;
        /**
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Loading state of the button
         */
        "loading": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * The name of the button, which gets paired with the button's value when submitted as part of a form. Corresponds with the native HTML name attribute.
         */
        "name": string;
        /**
          * Negative variation, can be combined with Variation to produce negative versions
         */
        "negative": boolean;
        /**
          * Controls the padding of the component.
         */
        "padding": DuetPadding;
        /**
          * Sets focus on the specified `duet-button`. Use this method instead of the global `button.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Button’s size.
         */
        "size": DuetButtonSize;
        /**
          * Allows the button to submit a form.
         */
        "submit": boolean;
        /**
          * Theme of the button.
         */
        "theme": DuetTheme;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url": string;
        /**
          * The value of the button, which gets paired with the button's name when submitted as part of a form. Corresponds with the native HTML value attribute.
         */
        "value": string;
        /**
          * Style variation of the button.
          * @negative - value is deprecated and should be used in combination with negative prop in the future
          * @destructive - value is deprecated and should be replace with destructive-secondary
         */
        "variation": DuetButtonVariation;
        /**
          * Controls the text wrapping.
         */
        "wrapping": DuetButtonWrapping;
    }
    interface DuetCallout {
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Theme of the caption.
         */
        "theme": DuetTheme;
    }
    interface DuetCaption {
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Selected state of the caption. Used inside Choice component.
         */
        "selected": boolean;
        /**
          * Controls the size of the caption.
         */
        "size": DuetCaptionSize;
        /**
          * Theme of the caption.
         */
        "theme": DuetTheme;
    }
    interface DuetCard {
        /**
          * Adds accessible label for the card that is only shown for screen readers. Typically, this label text is used when the whole card is made clickable to create a label text for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Custom color to be used for the card background, as a design token entered in camelCase or kebab-case. Example: "primary".
         */
        "background": DuetColor;
        /**
          * Makes the card expand and collapse when the collapse/expand arrow in the heading is clicked or tapped. This option only works together with the heading option, meaning that you also need to set the heading for this functionality to show up.
         */
        "collapsible": boolean;
        /**
          * The content for the card heading. If empty, both heading and collapse functionality will be hidden.
         */
        "heading": string;
        /**
          * Custom color to be used for the card's heading background, as a design token entered in camelCase or kebab-case. Example: "primary".
         */
        "headingBackground": DuetColor | undefined;
        /**
          * The actual heading level used for the heading in html markup. This setting exists for accessibility reasons. It doesn’t change the style visually. This setting is only used if the heading property is set. If you provide your own heading(s) in the slot, you should set this to neutral "div" in order to avoid nested headings.
         */
        "headingLevel": DuetCardHeadingLevel;
        /**
          * Icon to display on the left side of heading. Example: "form-location"
         */
        "icon": DuetIconName;
        /**
          * Image to display in the card. The image aspect ratio can be anything as images are resized to fit 100% width of the card. Example: "https://cdn.duetds.com/api/assets/illustrations/placeholder-image.jpg"
         */
        "image": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * If the card is collapsible, this property controls whether the card is open or closed.
         */
        "open": boolean;
        /**
          * The padding for the card. Please note that the card padding values don’t directly translate to similar space token names, but instead the card uses it’s own derived defaults.
         */
        "padding": DuetCardPadding;
        /**
          * Additional content for the card heading. If empty, both heading and collapse functionality will be hidden.
         */
        "secondaryHeading": string;
        /**
          * Sets focus on the specified `duet-card`. Use this method instead of the global `card.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Breakpoint used to remove shadow around card. These match to similar media query tokens: $media-query-small and $media-query-medium.
         */
        "shadowBreakpoint"?: DuetBreakpoints;
        /**
          * Theme of the card.
         */
        "theme": DuetTheme;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url": string;
        /**
          * Style variation of the card.
         */
        "variation": DuetCardVariation;
    }
    interface DuetCheckbox {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the checkbox.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails": string;
        /**
          * Control the tabindex of checkbox. In most cases this should never be used! It exists only for Duet’s internal needs.
         */
        "accessibleIndex": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Indicates the id of a component owned by the checkbox.
         */
        "accessibleOwns": string;
        /**
          * Aria selected
         */
        "accessibleSelected": string;
        /**
          * Check state of the checkbox.
         */
        "checked": boolean;
        /**
          * Makes the checkbox component disabled. This prevents users from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Adds a unique identifier for the checkbox.
         */
        "identifier": string;
        /**
          * Label for the checkbox
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Name of the checkbox.
         */
        "name": string;
        /**
          * Set whether the input is required or not. Please note that this is required for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role": string;
        /**
          * Sets focus on the specified `duet-checkbox`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the checkbox.
         */
        "theme": DuetTheme;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the checked property for that.
         */
        "value": string;
    }
    interface DuetCheckmark {
        /**
          * Checked
         */
        "center": boolean;
        /**
          * Checked
         */
        "checked": boolean;
        /**
          * Checked
         */
        "presentationOnly": boolean;
        /**
          * Theme
         */
        "theme": DuetTheme;
        /**
          * Type
         */
        "type": DuetChoiceType;
    }
    interface DuetChoice {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the choice. if this is set to an empty string it will prevent screenreaders from flowing to a collapsible content and can be used as an escape hatch if that behaviour is undesired.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails": string;
        /**
          * Accessible label that is read for screen reader users in the info toggle trigger button. Not visible for normal users.
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelInfoButton": string;
        /**
          * Property to change accessibleLabelInfoButton defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelInfoButton when needed
         */
        "accessibleLabelInfoButtonDefaults": DuetLangObject | string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Indicates the id of a component owned by the choice.
         */
        "accessibleOwns": string;
        /**
          * Additional caption to show inside the label of the choice button.
         */
        "caption": string;
        /**
          * Checked state of the choice button.
         */
        "checked": boolean;
        /**
          * Makes the choice button open a new section underneath it when clicked or tapped. This new section can be used to show more options related to this choice. Please note that this feature can’t be used together with the "info" functionality and that it only accepts plain dom nodes (no shadow dom elements such as duet-paragraph can be used as this will break accessibility)
         */
        "collapsible": boolean;
        /**
          * Makes the choice component disabled. This prevents users from being able to interact with the choice, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Expands the choice button to fill 100% of the container width.
         */
        "expand": boolean;
        "groupDirection": DuetDirection;
        "groupDisabled": boolean;
        "groupResponsive": boolean;
        /**
          * Icon to display to the left of the choice button label.
         */
        "icon": string;
        /**
          * Adds a unique identifier for the choice button.
         */
        "identifier": string;
        /**
          * Hint text to display before the user types into the date picker input.
          * @default { fi: "Lisätietoja vaihtoehdosta", en: "More information about", sv: "Mera information om", }
         */
        "infoLabel": string;
        /**
          * Placeholder defaults
          * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
         */
        "infoLabelDefaults": DuetLangObject | string;
        /**
          * Label for the choice button.
         */
        "label": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Name attribute of the html input that the Choice component controls.
         */
        "name": string;
        /**
          * Controls the padding of the component.
         */
        "padding": DuetPadding;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `duet-choice`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the choice.
         */
        "theme": DuetTheme;
        /**
          * This method toggles the info section.
         */
        "toggleInfoMethod": () => Promise<void>;
        /**
          * Type of the choice button. You can set the type of the choice to be either “radio” or “checkbox”. Depending on this selection we convey the selection type to assistive technologies as well. When type “radio” is chosen it is required to place the choices inside Choice Group component.
         */
        "type": DuetChoiceType;
        /**
          * The value of the html input that the Choice component controls.
         */
        "value": string;
    }
    interface DuetChoiceGroup {
        /**
          * Switch the breakpoint used to trigger the content stacking. These match to similar media query tokens eg.: $media-query-small, $media-query-medium.
         */
        "breakpoint": DuetChoiceGroupBreakpoint;
        /**
          * Additional caption to show inside the label of the choice group.
         */
        "caption": string;
        /**
          * Direction of the choice group.
         */
        "direction": DuetDirection;
        /**
          * Determines, whether the control is disabled or not.
         */
        "disabled": boolean;
        /**
          * Display choice group in error state along with an error message.
         */
        "error": string;
        /**
          * Legend displayed for the choice buttons in this group.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Name for the choice buttons within this group. **This must be unique amongst all other inputs.**
         */
        "name": string;
        /**
          * Enable or disable the automatic responsive behaviour of the choice group component when horizontal setting is used. Setting this option to "true" makes sure that contents are stacked vertically on mobile.
         */
        "responsive": boolean;
        /**
          * Theme of the choice group.
         */
        "theme": DuetTheme;
        /**
          * Tooltip to display next to the label of the choice group.
         */
        "tooltip": string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection": DuetTooltipDirection;
        /**
          * The value of the selected choice button.
         */
        "value": string;
    }
    interface DuetCollapsible {
        /**
          * Adds accessible label for the collapsible that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Centers heading inside its container
         */
        "centerHeading": boolean;
        /**
          * The content for the collapsible heading.
         */
        "heading": string;
        /**
          * The actual heading level used for the heading in html markup. This setting exists for accessibility reasons. It doesn’t change the style visually. only variations of h1-h6 area accepted
         */
        "headingLevel": DuetHeadingLevel | undefined;
        /**
          * Custom headingSize to be used for font size of heading, as a design token entered in kebab-case x-small -> font-size-x-small. Example: # 12px (0.75rem)  ------  +2px   (x-small) # 14px (0.875rem) ------  +2px   (small) # 16px (1rem)     ------  +2px   (medium) # 20px (1.25rem)  ------  +4px   (large) # 24px (1.5rem)   ------  +4px   (x-large) # 36px (2.25rem)  ------  +12px  (xx-large) # 48px (3rem)     ------  +12px  (xxx-large) # 72px (4.5rem)   ------  +24px  (xxxx-large)
         */
        "headingSize": DuetCollapsibleHeadingFontSize;
        /**
          * The font weight of the heading
         */
        "headingWeight": DuetCollapsibleWeight;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Is the component expanded or collapsed.
         */
        "open": boolean;
        /**
          * Sets focus on the specified `duet-collapsible`. Use this method instead of the global `collapsible.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the collapsible.
         */
        "theme": DuetTheme;
    }
    interface DuetCombobox {
        /**
          * Placeholder defaults
          * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
         */
        "accessibleLabelDefaults": DuetLangObject | string;
        /**
          * Hint text to display before the user types into the date picker input.
          * @default { heading: "Valitse:", item: "{0}, ({1}/{2})", itemFiltered: "{0}, ({1}/{2} - {3} suodatettu" }
         */
        "accessibleLabels": Record<string, string>;
        /**
          * Defines if filtering of items should be done by includes or startsWith
         */
        "filterType": "includes" | "startsWith";
        /**
          * Force the user to make a selection (typing things in the input field will only be used for list search)
         */
        "force": boolean;
        /**
          * Exposes a formatter function to format the item value displayed after a user selects an item
          * @param item : DuetComboboxItem
         */
        "formatItem": (item: DuetComboboxItem) => Promise<string>;
        /**
          * A hook to overwrite how the values are displayed in the input field after a User select an item
          * @example (item) => `${item.name} (${item.value})`
          * @default undefined
         */
        "formatter": (item: DuetComboboxItem) => string;
        /**
          * Array of item objects.
         */
        "items": any;
        /**
          * Defines minimum number of characters that must be given to show search results
         */
        "minCharacters": number;
        /**
          * Defines if items list should always open after clicking on input
         */
        "openListOnClick": boolean;
        /**
          * Theme of the combobox.
         */
        "theme": DuetTheme;
        /**
          * Value of selected item/s
         */
        "value": string;
    }
    interface DuetContactCard {
        /**
          * Button icon.
         */
        "buttonIcon": DuetIconName;
        /**
          * Button text.
         */
        "buttonText": string;
        /**
          * Button url.
         */
        "buttonUrl": string;
        /**
          * Description.
         */
        "description": string;
        /**
          * Email.
         */
        "email": string;
        /**
          * Image.
         */
        "image": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Name.
         */
        "name": string;
        /**
          * Phone.
         */
        "phone": string;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetCookieConsent {
        /**
          * Adds accessible label for the cookie consent ok button.
         */
        "accessibleLabel": string;
        /**
          * Theme of the cookie consent banner.
         */
        "theme": DuetTheme;
    }
    interface DuetDatePicker {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy": string;
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns": string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information.
         */
        "caption": string;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction": DuetDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * If form input field has a placeholder text, and user types anything (causing the text to dissapear), settings this to true will "echo" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)
         */
        "echoPlaceholder": boolean;
        /**
          * Display the date picker input in error state along with an error message.
         */
        "error": string;
        /**
          * Expands the date picker input to fill 100% of the container width.
         */
        "expand": boolean;
        /**
          * Hide the calendar modal. Set `moveFocusToButton` to false to prevent focus returning to the date picker's button. Default is true.
         */
        "hide": (moveFocusToButton?: boolean) => Promise<void>;
        /**
          * Adds a unique identifier for the date picker input.
         */
        "identifier": string;
        /**
          * Increment to add to years, defaults to 10 for simplicity, if you need a larger selectionspace you can set it to 100
         */
        "incrementYears": number;
        /**
          * Label for the date picker input.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * The currently active language. This setting changes the month/year/day. names and button labels as well as all screen reader labels.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing.
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max": string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min": string;
        /**
          * Name of the date picker input.
         */
        "name": string;
        /**
          * Hint text to display before the user types into the date picker input.
          * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
         */
        "placeholder": string;
        /**
          * Placeholder defaults.
          * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
         */
        "placeholderDefaults": DuetLangObject | string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "role": string;
        /**
          * Sets focus on the date picker's input. Use this method instead of the global `focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Show the calendar modal, moving focus to the calendar inside.
         */
        "show": () => Promise<void>;
        /**
          * Theme of the component.
         */
        "theme": DuetTheme;
        /**
          * Tooltip to display next to the label of the date picker input.
         */
        "tooltip": string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection": DuetTooltipDirection;
        /**
          * This offers information relating to the current validity of the component. It follow as closely as possible the behaviour of the native date input. Useful properties to inspect are badInput, valueMissing, rangeOverflow, rangeUnderflow. **This property should be treated as read only**.
         */
        "validity": ValidityState;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD
         */
        "value": string;
    }
    interface DuetDivider {
        /**
          * Custom color, as a design token entered in camelCase or kebab-case. Example: "color-primary".
         */
        "color": DuetColor;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetDividerMargin;
        /**
          * Theme of the divider.
         */
        "theme": DuetTheme;
    }
    interface DuetEditableTable {
        /**
          * Exposes the aria role for optimizing accessibility.
         */
        "accessibleRole": string;
        /**
          * Define actions for all items in a table An alternative to inline HTML table. required for Sortable tables
          * @default undefined
         */
        "actions": DuetEditableTableActions;
        /**
          * Duet-table: By default the table is responsive - it will be flattened at narrow viewport widths. This prop controls the breakpoint at which the table should be rendered as a _regular_ table. Set to "none" to disable the responsive functionality. Set to "none-scrollable" to disable responsive functionality _and_ allow horizontal scrolling - this is useful for comparison tables where it's important to maintain column and row layout.
         */
        "breakpoint": DuetTableBreakpoint;
        /**
          * Define columns for a table An alternative to inline HTML table. required for Sortable tables
          * @default undefined
         */
        "columns": DuetEditableTableColumns;
        /**
          * Optional id that get passed to the table and used to setup ::parts
         */
        "groupId": string;
        /**
          * Hide a thead section visually. The content is still available to screen readers.
         */
        "hideHeadVisually": boolean;
        /**
          * Duet-table: margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Define rows for a table An alternative to inline HTML table. required for Sortable tables
          * @default undefined
         */
        "rows": DuetEditableTableRows;
        /**
          * Controls whether the table is sortable by headers
         */
        "sortable": boolean;
        /**
          * Duet-table: Controls whether the table has a sticky header. Sticky headers are not compatible with breakpoint="none-scrollable".
         */
        "sticky": boolean;
        /**
          * Duet-table: Adjust the distance from top of the viewport (in pixels) when the table header becomes sticky.
         */
        "stickyDistance": DuetTableStickyDistance;
        /**
          * Theme of the table.
         */
        "theme": DuetTheme;
        /**
          * Duet-table: Style variation of the table.
         */
        "variation": DuetTableVariant;
    }
    interface DuetEmptyState {
        /**
          * Icon shown in the empty state component.
         */
        "icon": DuetIconName;
        /**
          * The size of the empty state message.
         */
        "size": DuetEmptyStateSize;
        /**
          * Theme of the empty state component.
         */
        "theme": DuetTheme;
    }
    interface DuetFieldset {
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError": "off" | "polite" | "assertive";
        /**
          * Additional caption to show next to the label.
         */
        "caption": string;
        /**
          * An error message to be shown next to the label.
         */
        "error": string;
        /**
          * Label/legend displayed for the fieldset.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Theme of the fieldset.
         */
        "theme": DuetTheme;
    }
    interface DuetFooter {
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal": string;
        /**
          * Property to change accessibleLabelExternal defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelExternal when needed
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults": DuetLangObject | string;
        /**
          * An array of items for the main footer links. Items have to include mandatory "label", "href" and "icon" fields to work. Additionally, you can pass an "id" that is added as an HTML identifier for the anchor tag.
         */
        "items": any;
        /**
          * The currently active language. This setting changes the logo to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * URL that the logo link points to.
         */
        "logoHref": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * An array of  items for the small footer menu. Items have to include mandatory "label" and "href" fields to work. Additionally, you can pass an "id" that is added as an HTML identifier for the anchor tag.
         */
        "menu": any;
        /**
          * Theme of the navigation.
         */
        "theme": DuetTheme;
        /**
          * Style variation of the footer.
         */
        "variation": DuetFooterVariation;
    }
    interface DuetGrid {
        /**
          * Adjusts the vertical alignment of the grid items, if set to "form_distribute" the grid will try to calculate correct paddings for any duet-input fields inside duet-grid-items, so that they align even when displaying errors.
         */
        "alignment": DuetGridAlignment;
        /**
          * Switch the breakpoint used to trigger the content stacking. These match to similar media query tokens: $media-query-small and $media-query-medium.
         */
        "breakpoint": DuetGridBreakpoint;
        /**
          * Direction of the grid items.
         */
        "direction": DuetDirection;
        /**
          * Adjusts the horizontal distribution of the grid items.
         */
        "distribution": DuetGridDistribution;
        /**
          * Adjusts the horizontal alignment of the grid items on mobile (575px and under).
         */
        "mobile": DuetGridMobileAlignment;
        /**
          * Enable or disable the automatic responsive behaviour of the grid component. Setting this option to "true" makes sure that contents are stacked vertically on mobile (575px and under).
         */
        "responsive": boolean;
        /**
          * Reverse the order of the grid items when horizontal. Usefull when we want the primary item to be on bottom right on desktop, but on top on mobile and the first for screen readers.
         */
        "rowReverse": boolean;
    }
    interface DuetGridItem {
        "breakpoint": DuetGridBreakpoint;
        "direction": DuetDirection;
        /**
          * Make the grid item fill the remaining available grid space.
         */
        "fill": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Sets the maximum width for the grid item using any valid numeric CSS value. E.g. "300px".
         */
        "maxWidth": string;
        /**
          * Sets the minimum width for the grid item using any valid numeric CSS value. E.g. "33.333%".
         */
        "minWidth": string;
        "responsive": boolean;
        /**
          * Theme of the grid item.
         */
        "theme": DuetTheme;
    }
    interface DuetHeader {
        /**
          * Adds i18n translations of all internally used textStrings
          * @default { fi: { skipLabel: "Siirry pääsisältöön", changeLanguage: "Vaihda kieltä", activeLanguage: "Suomi valittuna", }, sv: { skipLabel: "Hoppa till huvudinnehåll", changeLanguage: "Ändra Språk", activeLanguage: "Svenska valt", }, en: { skipLabel: "Skip to main content", changeLanguage: "Change language", activeLanguage: "English selected", }, }
         */
        "accessibleI18nLabels": I18nText;
        /**
          * Default strings for accessibleI18nLabels
          * @default { fi: { skipLabel: "Siirry pääsisältöön", changeLanguage: "Vaihda kieltä", activeLanguage: "Suomi valittuna", }, sv: { skipLabel: "Hoppa till huvudinnehåll", changeLanguage: "Ändra Språk", activeLanguage: "Svenska valt", }, en: { skipLabel: "Skip to main content", changeLanguage: "Change language", activeLanguage: "English selected", }, }
         */
        "accessibleI18nLabelsDefaults": | string
    | Record<DuetLanguage, I18nText>;
        /**
          * Accessible label that is shown for screen reader users in the mobile navigation toggle. Not visible for normal users.
          * @default { fi: "Valikko", sv: "Meny", en: "Menu", }
         */
        "accessibleLabel": string;
        /**
          * Property to change accessibleLabel defaults on the component. normally you would handle these strings on an application level and override @accessibleLabel when needed
         */
        "accessibleLabelDefaults": DuetLangObject | string;
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal": string;
        /**
          * Property to change accessibleLabelExternal defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelExternal when needed
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults": DuetLangObject | string;
        /**
          * An object that includes mandatory "label" and "href" fields for the back link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, back link won’t be shown. **NOTE: The back link should be ONLY used in combination with language and logoHref props.**
         */
        "back": any;
        /**
          * Closes all dropdown menus in header when called.
         */
        "closeMenus": (moveFocusToButton?: boolean) => Promise<void>;
        /**
          * Label of the contact menu. If empty, contact menu will be hidden. Note: not available in multilevel headers.
         */
        "contact": string;
        /**
          * An array of items for the contact menu. "label" and "href" are mandatory. Additionally, you can pass an "id" that is added as an HTML identifier for the element, and pass an "external" flag if the link is to open in a new window.
         */
        "contactItems": any;
        /**
          * The href of the current page item that is shown as “active”. Note: not available in multilevel headers.
         */
        "currentHref": string;
        /**
          * An array of items for the main navigation. Items have to include mandatory "label" and "href" fields to work. Additionally, you can pass an "id" that is added as an HTML identifier for the element, "active" boolean that makes item active, "badge" boolean to add notification badge next to the item and "items" array consisting of sub items that are allowed up to three levels.
         */
        "items": any;
        /**
          * The currently active language. This setting also changes the logo to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * An array of items for the language menu. If empty, the language menu will be hidden. "label", "country" and "href" are mandatory. Additionally you can pass an "id" that is added as an HTML identifier for the element.
         */
        "languageItems": any;
        /**
          * URL that the logo link points to.
         */
        "logoHref": string;
        /**
          * Region that is shown next to the logo. If empty, region will be hidden. Note: not available in multilevel header.
         */
        "region": string;
        /**
          * An object that includes mandatory "label" and "href" fields for the search link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, this link won’t be shown.
         */
        "search": any;
        /**
          * An object that includes mandatory "label", "href" and "type" fields for the session login/logout link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, this link won’t be shown.
         */
        "session": any;
        /**
          * Sets focus on the specified `duet-header`. Use this method instead of the global `header.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * The ID of the element where "skip to content" link should take the user. If empty, the functionality won’t be rendered in the DOM.
         */
        "skipToId": string;
        /**
          * Theme of the header.
         */
        "theme": DuetTheme;
        /**
          * An object that includes mandatory "label" and "href" fields for the user profile link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, user won’t be shown. Note: not available in multilevel headers.
         */
        "user": any;
    }
    interface DuetHeading {
        /**
          * Enable or disable the border underneath the heading, solid will darken the border
         */
        "border": boolean | "solid";
        /**
          * Custom color for the heading as a design token entered in camelCase or kebab-case. Example: "color-primary".
         */
        "color": DuetColor;
        /**
          * Enable hyphenation for long titles. Useful when there is no control over content e.g. user-generated content.
         */
        "hyphenate": boolean;
        /**
          * The actual heading level used in the HTML markup.
         */
        "level": DuetHeadingLevel;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Theme of the heading.
         */
        "theme": DuetTheme;
        /**
          * Make the visual style mimic a specific heading level. This option allows you to make e.g. h1 visually look like h3, but still keep it h1 in the markup.
         */
        "visualLevel": DuetVisualHeadingLevel;
        /**
          * This property allows you to set normal or semibold font weight for all sizes when needed.
         */
        "weight": DuetHeadingWeight;
    }
    interface DuetHero {
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal": string;
        /**
          * Defaults for accessibleLabelExternal
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults": DuetLangObject | string;
        /**
          * An array of items for the main actions. Items have to include mandatory "label", "href" and "icon" fields to work. Additionally, you can pass an "id" that is added as an HTML identifier for the anchor tag.
         */
        "actions": any;
        /**
          * An object that includes mandatory "label" and "href" fields for the back link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, back link won’t be shown. **NOTE: The back link can be ONLY used in combination with "gray" style variation.**
         */
        "back": any;
        /**
          * An object that includes any data you want to pass to the button. This data will be emitted when the button is clicked. If property analyticsId is present, then a separate duetAnalytics event will be emitted.
         */
        "buttonData": DuetHeroButtonData;
        /**
          * ID for the button.
         */
        "buttonId": string;
        /**
          * Text label shown inside the button. If empty, button will be hidden.
         */
        "buttonLabel": string;
        /**
          * URL that the button links to.
         */
        "buttonUrl": string;
        /**
          * Icon to display to the left of the heading in gray hero area variation. If empty, icon will be hidden.
         */
        "categoryIcon": DuetIconName;
        /**
          * Icon color to use for the category icon that can be used in gray hero area variation.
         */
        "categoryIconColor": DuetColor;
        /**
          * The description of the hero area, rendered in a P tag. If empty, description will be hidden.
         */
        "description": string;
        /**
          * @deprecated please use heading slot instead. The heading of the hero area, rendered in an H1 tag. P.S. you can control the level of the HTML heading by using “level” prop. If empty, heading will be hidden.
         */
        "heading": string;
        /**
          * Icon to display to the left of the button content. If empty, icon will be hidden.
         */
        "icon": DuetIconName;
        /**
          * Show icon on the right side of the button content.
         */
        "iconRight": boolean;
        /**
          * Icon size for the button.
         */
        "iconSize": DuetHeroIconSize;
        /**
          * URL of the image shown inside the hero area. For normal hero areas the width of the displayed image should be 800px. Optimal aspect ratio is 3:2. When using “image” variation of Hero Area the required image size is 1200x1200px (1:1 ratio). If this property is left empty, image will be hidden.
         */
        "image": string;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Layout.
         */
        "layout": "narrow" | "fluid";
        /**
          * Forces all items in the header to be leftAligned This can be used on mobiles to create leftAligned hero areas that either are only leftaligned on smaller devices or allways leftAligned (you must manually switch this parameter if you need special breakpoints) this nullifies textCenter prop
         */
        "leftAlign": boolean;
        /**
          * The level of the heading.
         */
        "level": DuetHeadingLevel;
        /**
          * An array of items for the definition list inside hero. Items have to include mandatory "label" and "value" fields to work.
         */
        "listItems": any;
        /**
          * The headline shown before heading.
         */
        "preHeading": string;
        /**
          * The level of the heading. Only usable with campaign, section variations.
         */
        "subHeadingLevel": DuetHeadingLevel;
        /**
          * Centers the text in hero area.
         */
        "textCenter": boolean;
        /**
          * Theme of the hero area.
         */
        "theme": DuetTheme;
        /**
          * Style variation of the hero area.
         */
        "variation": DuetHeroVariation;
    }
    interface DuetIcon {
        /**
          * Custom color to be used for a circular background, as a design token entered in camelCase or kebab-case. Using this option the icon will always be resized to $size-icon-medium on mobile viewports. Example: "color-primary".
         */
        "background": DuetColor;
        "backgroundOpacity": number;
        "backgroundRotation": number;
        /**
          * Custom color to be used for the icon, as a design token entered in camelCase or kebab-case. Example: "color-primary". This property can also be set to "currentColor" which forces the icon to use the CSS text color of parent element instead. Useful when you want to control the color in stylesheet instead.
         */
        "color": DuetColor;
        /**
          * A raw SVG string.
         */
        "icon": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Icon name from Duet to display.
         */
        "name": DuetIconName;
        /**
          * Custom color to be used for a circular border and icon outline, as a design token entered in camelCase or kebab-case. Using this option the icon will always be resized to $size-icon-medium on mobile viewports. Example: "color-primary".
         */
        "outline": DuetColor;
        /**
          * Whether the icon changes its size responsively or not.
         */
        "responsive": boolean;
        /**
          * Shape of the background. Brand follows new designs and currently doesn't support xxx-small size.
         */
        "shape": "circle" | "brand" | "brand-rotated";
        /**
          * Icon size. Entered as one of the icon size design tokens.
         */
        "size": DuetIconSize;
        /**
          * A URL from which to load an icon.
         */
        "src": string;
        /**
          * Theme of the icon. This setting will be overridden when you set the color property
         */
        "theme": DuetTheme;
    }
    interface DuetInput {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Indicates what kind of user input completion suggestions are provided.
         */
        "accessibleAutocomplete": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id or a string of space seperated ids of a component(s) that describes the input.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails": string;
        /**
          * Expanded state of the element, if needed
         */
        "accessibleExpanded": string;
        /**
          * Indicates value of any popup element associated with the input.
         */
        "accessibleHasPopup": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError": "off" | "polite" | "assertive";
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns": string;
        /**
          * Enable or disable automatic completion by the browser
         */
        "autoComplete": string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption": string;
        /**
          * If set, the input field will display a clear button that can be accessed with tabbing.
         */
        "clear": boolean;
        /**
          * Reset the cursor position on the native element `input.resetCursor()`.
         */
        "clearInput": () => Promise<void>;
        /**
          * Used internally in Duet to adjust whether this component acts as e.g. number input.
         */
        "component": DuetInputComponentType;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the duetChange event after each keystroke.
         */
        "debounce": number;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * A regular expression that matches any characters which should be *disallowed*. This differs from `pattern`, as it actively prevents users entering any characters which match the regular expression. e.g. the following will disallow any non-numeric characters `[^0-9]`
         */
        "disallowPattern": string;
        /**
          * If form input field has a placeholder text, and user types anything (causing the placeholder text to disappear), settings this to true will "echo" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)
         */
        "echoPlaceholder": boolean;
        /**
          * Display the input in error state along with an error message.
         */
        "error": string;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand": boolean;
        /**
          * Icon to display on the right side (from Duet’s icons). Example: "form-location"
         */
        "icon": DuetIconName;
        /**
          * Adds a unique identifier for the input.
         */
        "identifier": string;
        /**
          * Label for the input.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Use maxlength to specify the maximum length of the value that can be entered. Please note that this uses native HTML5 pattern validation.
         */
        "maxlength": number;
        /**
          * Use minlength to specify the minimum length of the value that can be entered. Please note that this uses native HTML5 pattern validation.
         */
        "minlength": number;
        /**
          * Name of the input.
         */
        "name": string;
        /**
          * Enable numeric keyboard for the input.
         */
        "numericKeyboard": boolean;
        /**
          * A regular expression to check the value against. Please note that this uses native HTML5 pattern validation.
         */
        "pattern": string;
        /**
          * Hint text to display.
         */
        "placeholder": string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Reset the cursor position on the native element `input.resetCursor()`.
         */
        "resetCursor": () => Promise<void>;
        /**
          * Defines a specific role attribute for the input.
         */
        "role": string;
        /**
          * Sets focus on the specified `duet-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the input.
         */
        "theme": DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip": string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection": DuetTooltipDirection;
        /**
          * Type of the input.
         */
        "type": DuetInputType;
        /**
          * Value of the input.
         */
        "value": string;
        /**
          * Variation of button. Use "button" to render a button element next to the input. Use "revealable" to render a button that reveals the password.
         */
        "variation": DuetVariationType;
    }
    interface DuetLabel {
        /**
          * ID of the component that the label is labelling.
         */
        "for": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetLabelMargin;
        /**
          * Controls the size of the label.
         */
        "size": DuetLabelSize;
        /**
          * Theme of the label.
         */
        "theme": DuetTheme;
    }
    interface DuetLayout {
        /**
          * Center align all direct children of this component.
         */
        "center": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Align container vertically in the middle when the space allows it.
         */
        "middle": boolean;
        /**
          * Breakpoint used to remove padding. These match to similar media query tokens: $media-query-small and $media-query-medium.
         */
        "paddingBreakpoint"?: DuetBreakpoints;
        /**
          * Makes the sidebar stick to the top of the window when scrolling down.
         */
        "sticky": boolean;
        /**
          * Adjust sticky sidebar’s distance to duet navigation component using this property.
         */
        "stickyDistance": DuetLayoutStickyDistance;
        /**
          * If set to true, the sidebar position will be adjusted to take tabs inside main content area into account.
         */
        "tabs": boolean;
    }
    interface DuetLink {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal": string;
        /**
          * Defaults for accessibleLabelExternal
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults": DuetLangObject | string;
        /**
          * Forces URL to open in a new browser tab. Used together with URL prop.
         */
        "external": boolean;
        /**
          * Icon to display on the left side of the ink text. (only with variations other than "default")
         */
        "icon": DuetIconName;
        /**
          * Adds a unique identifier for the link. Please note that with this particular component this id is added inside Shadow DOM. If you need an id on the html element, use regular id attribute instead.
         */
        "identifier": string;
        /**
          * The currently active language. This setting changes the external link accessible label to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Controls the padding of the component (only with variations other than "default")
         */
        "padding": DuetPadding;
        /**
          * Sets focus on the specified `duet-link`. Use this method instead of the global `link.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Initially visually hidden link, which is shown on focus.
         */
        "tabToLink": boolean;
        /**
          * Theme of the button.
         */
        "theme": DuetTheme;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url": string;
        /**
          * Style variation of the link.
         */
        "variation": DuetLinkVariation;
    }
    interface DuetList {
        /**
          * Switch the breakpoint used to trigger the content stacking. These match to similar media query tokens: $media-query-small and $media-query-large.
         */
        "breakpoint": DuetListBreakpoint;
        /**
          * Set the column width of the first column in percentages.
         */
        "labelWidth": DuetListLabelWidth;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Adjusts the alignment of the list items on mobile breakpoint.
         */
        "mobile": DuetListMobileAlignment;
        /**
          * Controls the padding of the component.
         */
        "padding": DuetPadding;
        /**
          * Enable or disable the automatic responsive behaviour of the list component. Setting this option to "true" makes sure that contents are stacked vertically on mobile. When "false" is set, contents are always shown in a single row.
         */
        "responsive": boolean;
        /**
          * Theme of the list.
         */
        "theme": DuetTheme;
        /**
          * Style variation of the list.
         */
        "variation": DuetListVariation;
    }
    interface DuetListItem {
        "breakpoint": DuetListBreakpoint;
        "responsive": boolean;
    }
    interface DuetLogo {
        /**
          * Accessible label. Defaults to what is in accessibleLabelDefaults prop.
         */
        "accessibleLabel": string;
        /**
          * Default translations for accessible label.
         */
        "accessibleLabelDefaults": DuetLangObject;
        /**
          * Where the logo links to.
         */
        "href": string;
        /**
          * Use inverse version of the logo (white logo on dark background).
         */
        "inverse": boolean;
        /**
          * The language of the logo.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Sets focus on the specified `duet-logo`. Use this method instead of the global `logo.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Size variation of the logo.
         */
        "size": DuetLogoSize;
        /**
          * Theme of the logo.
         */
        "theme": DuetTheme;
    }
    interface DuetMenuBar {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Logo.
         */
        "logo": boolean;
        /**
          * Logo href.
         */
        "logoHref": string;
        /**
          * Logo link accessible label.
         */
        "logoLinkAccessibleLabel": string;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetMenuBarButton {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this property to add an aria-controls attribute to the button. Use the attribute to point to the unique id of the content that the button manages.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the button.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Details of the component
         */
        "accessibleDetails": string;
        /**
          * If a button expands or collapses adjacent content, then use the ariaExpanded prop to add the aria-expanded attribute to the button. Set the value to convey the current expanded (true) or collapsed (false) state of the content.
         */
        "accessibleExpanded": boolean;
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Indicates the id of a component owned by the button.
         */
        "accessibleOwns": string;
        /**
          * Use this property to add an aria-haspopup attribute to a button, if you are using it as a menu button.
         */
        "accessiblePopup": string;
        /**
          * Tells screen reader the element is pressed.
         */
        "accessiblePressed": boolean;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Sets focus on underlying button element.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetMenuBarDropdown {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Open
         */
        "open": boolean;
        /**
          * Sets focus. Use this method instead of the global focus().
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetMenuBarDropdownLink {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Href
         */
        "href": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetMenuBarLink {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Active
         */
        "active": boolean;
        /**
          * Href
         */
        "href": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetModal {
        /**
          * Adds accessible label for the close icon that is only shown for screen readers. This property is always required to create an accessibly interface! Swedish translation for this property is “Stäng fönstret”.
          * @default {fi: "Sulje ikkuna", sv: "Stäng fönstret", en: "Close the dialog", }
         */
        "accessibleCloseLabel": string;
        /**
          * Defaults for accessibleCloseLabel
          * @default {fi: "Sulje ikkuna", sv: "Stäng fönstret", en: "Close the dialog", }
         */
        "accessibleCloseLabelDefaults": DuetLangObject | string;
        /**
          * Indicates the id or a string of space seperated ids of a component(s) that describes the input.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Details of the component
         */
        "accessibleDetails": string;
        /**
          * By default the heading is used as target for aria-labelledby, and it overrides this label. If you wish to skip the heading, you must set this label.
         */
        "accessibleLabel": string;
        /**
          * Indicates the id or a string of space seperated ids of a component(s) that labels the input.
         */
        "accessibleLabelledBy": string;
        /**
          * Use this property when you need to have the modal dialog initially active.
         */
        "active": boolean;
        /**
          * Use this property when you want the modal to close when clicked outside of modal.
         */
        "closeOnBlur": boolean;
        /**
          * Custom color to be used for the icon, as a design token entered in camelCase or kebab-case. Example: "primary".
         */
        "color": DuetColor;
        /**
          * Size of the modal window's padding.
         */
        "gutterSize": DuetModalSize | "none";
        /**
          * Accessible heading displayed in the modal. The modal marks this as the label of the modal when used. This helps screen reader users which is why this is a required property.
         */
        "heading": string;
        /**
          * Accessible heading size
         */
        "headingLevel": DuetHeadingLevel;
        /**
          * Makes the visual style mimic a specific heading level. This option allows you to make e.g. h1 visually look like h3, but still keep it h1 in the markup.
         */
        "headingVisualLevel": DuetVisualHeadingLevel | undefined;
        /**
          * Hides the modal dialog and puts focus back to the original element that triggered the modal (if we’re still in the same view).
         */
        "hide": () => Promise<void>;
        /**
          * Icon to display above the heading (from Duet’s icons). Example: "form-location"
         */
        "icon": DuetIconName;
        /**
          * The currently active language. This setting also changes the logo to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Shows the modal dialog. Additionally saves the element that triggered the modal so that focus can be moved back to this specific element when the modal dialog is closed.
         */
        "show": () => Promise<void>;
        /**
          * Size of the modal window.
         */
        "size": DuetModalSize;
        /**
          * Theme of the modal.
         */
        "theme": DuetTheme;
    }
    interface DuetMultiselect {
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy": string;
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError": "off" | "polite" | "assertive";
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption": string;
        /**
          * Makes the select component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Display the select in error state along with an error message.
         */
        "error": string;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand": boolean;
        /**
          * Adds a unique identifier for the select.
         */
        "identifier": string;
        /**
          * An array of items to choose from
         */
        "items": string | DuetMultiselectItem[];
        /**
          * Label for the select.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Hint text to display.
         */
        "placeholder": string;
        /**
          * Sets focus on the specified `duet-multiselect`. Use this method instead of the global `multiselect.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the select.
         */
        "theme": DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip": string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection": DuetTooltipDirection;
        /**
          * Value of multiselect
         */
        "value": DuetMultiselectItem[];
    }
    interface DuetNav {
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetNotification {
        /**
          * Adds accessible label for tooltip that is shown over unread counter
          * @default { en: "Unread", fi: "Lukematon", sv: "Oläst" }
         */
        "accessibleLabelUnread": string;
        /**
          * Property to change accessibleLabelUnread defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelUnread when needed
         */
        "accessibleLabelUnreadDefaults": DuetLangObject;
        /**
          * The date of the notification.
         */
        "date": string;
        /**
          * Should the link open in a new window?
         */
        "external": boolean;
        /**
          * Should the notification be visually highlighted?
         */
        "highlight": boolean;
        /**
          * The currently active language. Used for announcing unread notifications to screen readers.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Move focus to the notification's link element. Use this method instead of the native `focus()` method.
          * @param options
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the notification.
         */
        "theme": DuetTheme;
        /**
          * The url to open on notification click.
         */
        "url": string;
    }
    interface DuetNotificationDrawer {
        /**
          * Adds accessible label for tooltip that is shown for notifications
          * @default {en: "No notifications", fi: "Ei ilmoituksia", sv: "Inga notifikationer"}
         */
        "accessibleLabelNotifications": string;
        /**
          * Defaults for accessibleLabelNotifications
          * @default {en: "No notifications", fi: "Ei ilmoituksia", sv: "Inga notifikationer"}
         */
        "accessibleLabelNotificationsDefaults": | DuetLangObject
    | string;
        /**
          * Show a badge that indicates something has changed.
         */
        "badge": boolean;
        /**
          * Close the menu
          * @param moveFocusToButton should focus be moved to the menu's button on close?
         */
        "close": (moveFocusToButton?: boolean) => Promise<void>;
        /**
          * Which direction should the drawer open in?
         */
        "direction": DuetNotificationDrawerDirection;
        /**
          * Icon to display to the left of the drawer button.
         */
        "icon": DuetIconName;
        /**
          * Label for the drawer button.
         */
        "label": string;
        /**
          * The currently active language. Used to determine the message displayed when there are no notifications.
         */
        "language": DuetLanguage;
        /**
          * Open the menu
         */
        "open": () => Promise<void>;
        /**
          * Move focus to the menu's button. Use instead of the native `focus()` method
          * @param options
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the notification drawer.
         */
        "theme": DuetTheme;
    }
    interface DuetNumberInput {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Accessible label for the add button that is read for screen reader users.
          * @default {fi: "Lisää summaan", en: "Add to the amount", sv: "Lägg till beloppet"}
         */
        "accessibleAdd": string;
        /**
          * Defaults for accessibleAdd
          * @default {fi: "Lisää summaan", en: "Add to the amount", sv: "Lägg till beloppet"}
         */
        "accessibleAddDefaults": DuetLangObject | string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Details of the component
         */
        "accessibleDetails": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Format of message used to announce current amount when switching between amounts. The string {current} is replaced with the current amount.
          * @default {fi: "{current} euroa valittuna", en: "{current} euros selected", sv: "{current} valda euro"}
         */
        "accessibleLive": string;
        /**
          * Defaults for accessibleLive
          * @default {fi: "{current} euroa valittuna", en: "{current} euros selected", sv: "{current} valda euro"}
         */
        "accessibleLiveDefaults": DuetLangObject | string;
        /**
          * Disables the aria-live messaging used internally in this component. This could be useful when you want to use custom aria-live messages instead.
         */
        "accessibleLiveEnabled": boolean;
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns": string;
        /**
          * Accessible label for the subtract button that is read for screen reader users.
          * @default {fi: "Vähennä summasta", en: "Subtract from the amount", sv: "Dra från beloppet"}
         */
        "accessibleSubtract": string;
        /**
          * Defaults for accessibleSubtract
          * @default {fi: "Vähennä summasta", en: "Subtract from the amount", sv: "Dra från beloppet"}
         */
        "accessibleSubtractDefaults": DuetLangObject | string;
        /**
          * Makes the number input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Display the input in error state along with an error message.
         */
        "error": string;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand": boolean;
        /**
          * Adds a unique identifier for the input.
         */
        "identifier": string;
        /**
          * Label for the number input.
          * @default {fi: "Etiketti", en: "Label", sv: "Märka"}
         */
        "label": string;
        /**
          * Defaults for Label
          * @default {fi: "Etiketti", en: "Label", sv: "Märka"}
         */
        "labelDefaults": DuetLangObject | string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Locale used to format the entered value.
         */
        "locale": DuetLocale;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Maximum value.
         */
        "max": number;
        /**
          * Minimum value.
         */
        "min": number;
        /**
          * Name of the input.
         */
        "name": string;
        /**
          * Set whether the input is required or not. Please note that this is required for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role": string;
        /**
          * Controls whether or not value gets rounded to the nearest multiple of a step on blur. Set to "false" to disable this behaviour.
         */
        "rounding": boolean;
        /**
          * Sets focus on the specified `duet-number-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Step amount.
         */
        "step": number;
        /**
          * Theme of the input.
         */
        "theme": DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip": string;
        /**
          * Unit for the number input.
         */
        "unit": string;
        /**
          * Value of the input. This is passed as a string since Number Input uses Duet’s Input component internally and we need the value to support spaces and the unit as well.
         */
        "value": string;
    }
    interface DuetPageHeading {
        /**
          * Icon.
         */
        "icon": DuetIconName;
        /**
          * Layout.
         */
        "layout": "narrow" | "fluid";
        /**
          * Theme of the hero area.
         */
        "theme": DuetTheme;
    }
    interface DuetPagination {
        /**
          * Described By id
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Details of the component
         */
        "accessibleDetails": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Default pagination labels
         */
        "accessibleLabels": Record<string, string>;
        /**
          * Default pagination labels
         */
        "accessibleLabelsDefaults": DuetLangObject;
        /**
          * Used to indicate which dom element with ID this element controls
         */
        "ariaControls": string;
        /**
          * The current page
         */
        "current": number;
        /**
          * Characters to use for the jump buttons.
         */
        "jumpString": string;
        /**
          * The size of the take, when paginating.
         */
        "take": number;
        /**
          * Theme of the pagination.
         */
        "theme": DuetTheme;
        /**
          * The total size of the paginating data
         */
        "total": number;
        /**
          * Variation of the paginator (compact and default supported)
         */
        "variation": DuetPaginationVariation;
        /**
          * Amount of visible page numbers to show
         */
        "visibleItems": number;
    }
    interface DuetParagraph {
        /**
          * Custom color to be used for text, as a design token entered in camelCase or kebab-case. Example: "color-primary".
         */
        "color": DuetColor;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Controls the size of the paragraph.
         */
        "size": DuetParagraphSize;
        /**
          * Theme of the paragraph.
         */
        "theme": DuetTheme;
        /**
          * Style variation of the paragraph.
         */
        "variation": DuetParagraphVariation;
        /**
          * Controls the Font-Weight of the paragraph.
         */
        "weight": DuetParagraphWeight;
    }
    interface DuetProgress {
        /**
          * Indicates the id of a component that describes the upload component.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails": string;
        /**
          * Indicates the aria-label of the component - this will get combined with an label+uploading when uploading, and label+upload complete when upload is complete
         */
        "accessibleLabel": string;
        /**
          * Adds accessible label for upload in progress and upload complete states
          * @default {fi: ["lähetys valmis", "lähetys käynnissä"],sv: ["Uppladdningen är klar", "Uppladdning pågår"], en:  ["completed", "in progress"]}
         */
        "accessibleLabelUpload": string;
        /**
          * Defaults for accessibleLabel
         */
        "accessibleLabelUploadDefaults": DuetLangObject | string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption": string;
        /**
          * Height of progressbar
         */
        "height": string;
        /**
          * Progress of the bar, a value from 0-100
         */
        "progress": number;
        /**
          * Theme of the input.
         */
        "theme": DuetTheme;
    }
    interface DuetPromoCard {
        /**
          * Background color.
         */
        "backgroundColor": DuetColor | "";
        /**
          * The actual heading level used in the HTML markup.
         */
        "headingLevel": DuetHeadingLevel;
        /**
          * Image. Example image is 512x341;
         */
        "image": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Text color.
         */
        "textColor": DuetColor;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetRadio {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the radio.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails": string;
        /**
          * Control the tabindex of checkbox. In most cases this should never be used! It exists only for Duet’s internal needs.
         */
        "accessibleIndex": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Indicates the id of a component owned by the radio.
         */
        "accessibleOwns": string;
        /**
          * Stops the components from emitting events
         */
        "blockEvents": boolean;
        /**
          * Check state of the radio.
         */
        "checked": boolean;
        /**
          * Makes the radio component disabled. This prevents users from being able to interact with the radio, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        "groupDirection": DuetDirection;
        "groupDisabled": boolean;
        "groupResponsive": boolean;
        /**
          * Adds a unique identifier for the radio.
         */
        "identifier": string;
        /**
          * Label for the radio.
         */
        "label": string;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Name of the radio.
         */
        "name": string;
        /**
          * Set whether the input is required or not. Please note that this is required for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role": string;
        /**
          * Sets focus on the specified `duet-radio`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the radio.
         */
        "theme": DuetTheme;
        /**
          * The value of the radio input does not mean if it's checked or not, use the checked property for that.
         */
        "value": string;
    }
    interface DuetRadioGroup {
        /**
          * Additional caption to show inside the label of the radio group.
         */
        "caption": string;
        /**
          * Direction of the radio group.
         */
        "direction": DuetDirection;
        /**
          * Determines, whether the control is disabled or not.
         */
        "disabled": boolean;
        /**
          * Display radio group in error state along with an error message.
         */
        "error": string;
        /**
          * Legend displayed for the radio buttons in this group.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Name for the radio buttons within this group. **This must be unique amongst all other inputs.**
         */
        "name": string;
        /**
          * Enable or disable the automatic responsive behaviour of the radio group component when horizontal setting is used. Setting this option to "true" makes sure that contents are stacked vertically on mobile.
         */
        "responsive": boolean;
        /**
          * Theme of the radio group.
         */
        "theme": DuetTheme;
        /**
          * Tooltip to display next to the label of the radio group.
         */
        "tooltip": string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection": DuetTooltipDirection;
        /**
          * The value of the selected radio button.
         */
        "value": string;
    }
    interface DuetRangeSlider {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy": string;
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns": string;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the duetChange event after each keystroke.
         */
        "debounce": number;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand": boolean;
        /**
          * Adds a unique identifier for the input.
         */
        "identifier": string;
        /**
          * Label for the range slider.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Locale used to format the entered value.
         */
        "locale": DuetLocale;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Maximum value.
         */
        "max": number;
        /**
          * Minimum value.
         */
        "min": number;
        /**
          * Name of the input.
         */
        "name": string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `duet-range-slider`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Step amount.
         */
        "step": number;
        /**
          * Theme of the input.
         */
        "theme": DuetTheme;
        /**
          * Unit for the range slider.
         */
        "unit": string;
        /**
          * Value of the input.
         */
        "value": number;
    }
    interface DuetRangeStepper {
        /**
          * Used to indicate which dom element with ID this element controls
         */
        "ariaControls": string;
        /**
          * Default pagination labels
         */
        "ariaLabels": Record<string, string>;
        /**
          * Default range stepper labels
         */
        "ariaLabelsDefaults": DuetLangObject;
        /**
          * Start value
          * @default 1
         */
        "stepIndex": number;
        /**
          * How big is the step
          * @default 50
         */
        "stepSize": number;
        /**
          * Theme of the component.
         */
        "theme": DuetTheme;
        /**
          * Total of
          * @default undefined
         */
        "total": number;
    }
    interface DuetScrollable {
        /**
          * Whether or not include previous and forward buttons. Defaults to true.
         */
        "buttons": boolean;
        /**
          * Center the scrollable list. Defaults to false.
         */
        "center": boolean;
        /**
          * Boolean to collapse scrollable items into normal flow.
         */
        "collapsed": boolean;
        /**
          * Optional identifier to add to buttons in the tab group
         */
        "identifier": string;
        /**
          * Selected element
         */
        "selected": number;
        /**
          * Theme of duet-tab-scrollable. When used this will override the color setting and use "primary" or "primary-turva" as the color depending on which theme is chosen.
         */
        "theme": DuetTheme;
    }
    interface DuetSectionLayout {
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Align container vertically in the middle when the space allows it.
         */
        "middle": boolean;
    }
    interface DuetSelect {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy": string;
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError": "off" | "polite" | "assertive";
        /**
          * Indicates the id of a component owned by the select.
         */
        "accessibleOwns": string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption": string;
        /**
          * Makes the select component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * If form input field has a placeholder text, and user types anything (causing the placeholder text to disappear), settings this to true will "echo" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)
         */
        "echoPlaceholder": boolean;
        /**
          * Display the select in error state along with an error message.
         */
        "error": string;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand": boolean;
        /**
          * Adds a unique identifier for the select.
         */
        "identifier": string;
        /**
          * An array of items to choose from
         */
        "items": string | DuetSelectItems;
        /**
          * Label for the select.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Name of the select.
         */
        "name": string;
        /**
          * Hint text to display.
         */
        "placeholder": string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the select.
         */
        "role": string;
        /**
          * Sets focus on the specified `duet-select`. Use this method instead of the global `select.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the select.
         */
        "theme": DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip": string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection": DuetTooltipDirection;
        /**
          * The selected value of the select
         */
        "value": string;
        /**
          * Variation of dropdown. -tiny is used for small numbers / tiny option ranges.
         */
        "variation": DuetSelectVariation;
    }
    interface DuetShapedImage {
        /**
          * Adds accessible label for the image that is only shown for screen readers.
         */
        "accessibleLabel": string;
        /**
          * Rotation. Note: in 'turva' theme there's no rotation.
          * @default "7"
         */
        "rotation": 7 | -7;
        /**
          * A URL from which to load an image.
         */
        "src": string;
        /**
          * Theme of the component.
         */
        "theme": DuetTheme;
    }
    interface DuetSlideout {
        /**
          * Background color. Use one of the color tokens.
         */
        "backgroundColor": DuetColor;
        /**
          * Open
         */
        "open": boolean;
        /**
          * Sets focus. Use this method instead of the global focus().
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme.
         */
        "theme": DuetTheme;
        /**
          * Toggles the slideout.
         */
        "toggle": () => Promise<void>;
    }
    interface DuetSlideoutLang {
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetSlideoutLink {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Active
         */
        "active": boolean;
        /**
          * Caret
         */
        "caret": boolean;
        /**
          * Href
         */
        "href": string;
        /**
          * Icon
         */
        "icon": string;
        "menuItem": boolean;
        /**
          * Size. Inherit, small, medium or large. Inherit value inherits styles from the value in the underlying slot.
         */
        "size": "inherit" | "small" | "medium" | "large";
        /**
          * Language of the link. Use this only for language selection links.
         */
        "targetLanguage": "en" | "fi" | "sv";
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetSlideoutPanel {
        /**
          * Active
         */
        "active": boolean;
        /**
          * Background color. Use one of the color tokens.
         */
        "backgroundColor": DuetColor;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Size. Small, medium or large.
         */
        "labelSize": "small" | "medium" | "large";
        /**
          * Open
         */
        "open": boolean;
        /**
          * Sets focus. Use this method instead of the global focus().
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetSlideoutPanelDropdown {
        /**
          * Active
         */
        "active": boolean;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Open
         */
        "open": boolean;
        /**
          * Sets focus. Use this method instead of the global focus().
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetSpacer {
        /**
          * Adjusts the breakpoint where the spacer is shown in. The functionality follows 1:1 the media queries defined in design tokens.
         */
        "breakpoint": DuetSpacerBreakpoint;
        /**
          * Direction of the space added.
         */
        "direction": DuetDirection;
        /**
          * Size variation of the spacer. Can be any of the spacing tokens.
         */
        "size": DuetSpacerSize;
    }
    interface DuetSpinner {
        /**
          * Adds accessible label for the spinner that is only shown for screen readers.
         */
        "accessibleLabel": string;
        /**
          * Color of the spinner, as a design token entered in camelCase or kebab-case. Example: "color-primary". This property can also be set to "currentColor" which forces the icon to use the CSS text color of parent element instead. Useful when you want to control the color in stylesheet instead.
         */
        "color": DuetColor;
        /**
          * Size variation of the spinner.
         */
        "size": DuetSpinnerSize;
        /**
          * Theme of the spinner. When used this will override the color setting and use "primary" or "primary-turva" as the color depending on which theme is chosen.
         */
        "theme": DuetTheme;
    }
    interface DuetStep {
        /**
          * Set the heading for the step.
         */
        "heading": string;
        /**
          * Set the heading level used in the HTML markup.
         */
        "headingLevel": DuetHeadingLevel;
        "roundedBottom": boolean;
        "roundedTop": boolean;
        /**
          * Programmatically shift focus to the step's heading.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        "state": DuetStepState;
        "stepIndex": number;
        /**
          * Theme of the component.
         */
        "theme": DuetTheme;
    }
    interface DuetStepper {
        /**
          * Format of message used to announce current step when navigating between steps. The string {current} is replaced with current the step number. The string {total} is replaced with the total number of steps.
         */
        "accessibleLive": string;
        /**
          * Controls whether navigation back to previous steps is allowed or not.
         */
        "backDisabled": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * The index of the current step.
         */
        "selected": number;
        /**
          * Theme of the component.
         */
        "theme": DuetTheme;
    }
    interface DuetSubmenuBar {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Open
         */
        "open": boolean;
        /**
          * Sets focus. Use this method instead of the global focus().
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetSubmenuBarDropdown {
        /**
          * Active
         */
        "active": boolean;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Open
         */
        "open": boolean;
        /**
          * Sets focus. Use this method instead of the global focus().
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetSubmenuBarDropdownLink {
        /**
          * Active
         */
        "active": boolean;
        /**
          * Caret
         */
        "caret": boolean;
        /**
          * Highlight
         */
        "highlight": boolean;
        /**
          * Href
         */
        "href": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetSubmenuBarLink {
        /**
          * Active
         */
        "active": boolean;
        /**
          * Href
         */
        "href": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetTab {
        /**
          * String for AccessibleLabel
          * @default null
         */
        "accessibleDescription": string;
        /**
          * Defaults for AccessibleLabel
          * @default null
         */
        "accessibleDescriptionDefault": DuetLangObject | string;
        /**
          * Caption for the tab.
         */
        "caption": string;
        /**
          * Label for the tab.
         */
        "label": string;
        /**
          * Selected state of the tab.
         */
        "selected": boolean;
    }
    interface DuetTabGroup {
        /**
          * Aria label for the entire tab-group
         */
        "accessibleLabel": string;
        /**
          * Whether the tab-group collapses to a select dropwdown in minor breakpoints
         */
        "collapses": boolean;
        /**
          * Optional identifier to add to buttons in the tab group
         */
        "identifier": string;
        /**
          * Label for the select element which gets shown on mobile.
          * @default {fi: "Valitse", en: "Choose", sv: "Välja"}
         */
        "label": string;
        /**
          * Defaults for Label
          * @default {fi: "Valitse", en: "Choose", sv: "Välja"}
         */
        "labelDefaults": DuetLangObject | string;
        /**
          * Determines whether the label for the select element shown on mobile is visually hidden.
         */
        "labelHidden": boolean;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * This method allows you to open any of the tabs by calling the method and passing the index of the tab. Please note that index starts from zero.
         */
        "openTab": (tabIndex: number) => Promise<void>;
        /**
          * Controls the padding of the component.
         */
        "padding": DuetPadding;
        /**
          * This method used to refresh the contents of the tab group but is now deprecated as this is done automatically.
          * @deprecated
         */
        "refresh": () => Promise<void>;
        /**
          * Controls whether the tab-group should scroll (by inflection this will disable collapsing to select box on small screens), if this is a number instead of true it will be used as "amount of items to scroll"
         */
        "scrolls": boolean;
        /**
          * Controls if tab content should have tab index and be accessible by pressing tab
         */
        "setTabIndex": boolean;
        /**
          * If this property is set to true, tab won't change immediately after clicking it. Component will emit "duetTabChangeRequested" event, and it needs to be handled manually in order to change tab.
         */
        "tabChangeConfirm": boolean;
        /**
          * Theme of the component.
         */
        "theme": DuetTheme;
        /**
          * Style variation of the tab group.
         */
        "variation": DuetTabVariation;
    }
    interface DuetTable {
        /**
          * By default the table is responsive - it will be flattened at narrow viewport widths. This prop controls the breakpoint at which the table should be rendered as a _regular_ table. Set to "none" to disable the responsive functionality. Set to "none-scrollable" to disable responsive functionality _and_ allow horizontal scrolling - this is useful for comparison tables where it's important to maintain column and row layout.
         */
        "breakpoint": DuetTableBreakpoint;
        /**
          * Hide a thead section visually. The content is still available to screen readers.
         */
        "hideHeadVisually": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Controls whether the table has a sticky header. Sticky headers are not compatible with breakpoint="none-scrollable".
         */
        "sticky": boolean;
        /**
          * Adjust the distance from top of the viewport (in pixels) when the table header becomes sticky.
         */
        "stickyDistance": DuetTableStickyDistance;
        /**
          * Theme of the table.
         */
        "theme": DuetTheme;
        /**
          * Style variation of the table.
         */
        "variation": DuetTableVariant;
    }
    interface DuetTextarea {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Indicates what kind of user input completion suggestions are provided.
         */
        "accessibleAutocomplete": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError": "off" | "polite" | "assertive";
        /**
          * Indicates the id of a component owned by the textarea.
         */
        "accessibleOwns": string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption": string;
        /**
          * Display character counter. Must be used in conjunction with **maxlength** and **counterLabel** properties.
         */
        "counter": boolean;
        /**
          * Accessible label for character counter. Must be used in conjunction with **counter** property.
         */
        "counterLabel": string;
        /**
          * Makes the textarea component disabled. This prevents users from being able to interact with the textarea, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * A regular expression that matches any characters which should be *disallowed*. This differs from `pattern`, as it actively prevents users entering any characters which match the regular expression. e.g. the following will disallow any non-numeric characters `[^0-9]`
         */
        "disallowPattern": string;
        /**
          * If form input field has a placeholder text, and user types anything (causing the text to dissapear), settings this to true will "echo" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)
         */
        "echoPlaceholder": boolean;
        /**
          * Display the textarea in error state along with an error message.
         */
        "error": string;
        /**
          * Expands the textarea to fill 100% of the container width.
         */
        "expand": boolean;
        /**
          * Adds a unique identifier for the textarea.
         */
        "identifier": string;
        /**
          * Label for the textarea.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Use maxlength to specify the maximum length of the value that can be entered. Please note that this uses native HTML5 pattern validation.
         */
        "maxlength": number;
        /**
          * Use minlength to specify the minimum length of the value that can be entered. Please note that this uses native HTML5 pattern validation.
         */
        "minlength": number;
        /**
          * Name of the textarea.
         */
        "name": string;
        /**
          * Hint text to display.
         */
        "placeholder": string;
        /**
          * Set whether the textarea is required or not. Please note that this is required for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role": string;
        /**
          * Sets focus on the specified `duet-textarea`. Use this method instead of the global `textarea.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the textarea.
         */
        "theme": DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip": string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection": DuetTooltipDirection;
        /**
          * Value of the textarea.
         */
        "value": string;
    }
    interface DuetToggle {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the toggle.
         */
        "accessibleDescribedBy": string;
        /**
          * Aria description the button
         */
        "accessibleDescription": string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails": string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy": string;
        /**
          * Indicates the id of a component owned by the toggle.
         */
        "accessibleOwns": string;
        /**
          * Check state of the checkbox.
         */
        "checked": boolean;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Adds a unique identifier for the checkbox.
         */
        "identifier": string;
        /**
          * Label for the toggle.
         */
        "label": string;
        /**
          * Position of the label
         */
        "labelPosition": "top" | "right" | "left";
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Name of the checkbox.
         */
        "name": string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role": string;
        /**
          * Sets focus on the specified `duet-toggle`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme of the card.
         */
        "theme": DuetTheme;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the checked property for that.
         */
        "value": string;
    }
    interface DuetToolbar {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetToolbarDropdown {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Active
         */
        "active": boolean;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Open
         */
        "open": boolean;
        /**
          * Sets focus. Use this method instead of the global focus().
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetToolbarDropdownLink {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Active
         */
        "active": boolean;
        /**
          * Href
         */
        "href": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Language of the link. Use this only for language selection links.
         */
        "targetLanguage": "en" | "fi" | "sv";
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetToolbarLink {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel": string;
        /**
          * Active
         */
        "active": boolean;
        /**
          * Href
         */
        "href": string;
        /**
          * Icon
         */
        "icon": string;
        /**
          * Theme.
         */
        "theme": DuetTheme;
    }
    interface DuetTooltip {
        /**
          * Adds accessible label for the close icon that is only shown for screen readers. This property is always required to create an accessibly interface!
          * @default {fi: "Sulje lisätiedot", en: "Close details", sv: "Stäng detaljer"}
         */
        "accessibleCloseLabel": string;
        /**
          * Default language strings for the accessibleCloseLabel
          * @default {fi: "Sulje lisätiedot", en: "Close details", sv: "Stäng detaljer"}
         */
        "accessibleCloseLabelDefault": DuetLangObject | string;
        "accessibleInputLabel": string;
        /**
          * Adds accessible label for the info icon that is only shown for screen readers. This property is always required to create an accessible interface!
          * @default {fi: "Näytä lisätietoja", en: "See more information", sv: "Se mer information"}
         */
        "accessibleLabel": string;
        /**
          * Default language strings for the accessibleLabel
          * @default {fi: "Näytä lisätietoja", en: "See more information", sv: "Se mer information"}
         */
        "accessibleLabelDefault": DuetLangObject | string;
        /**
          * Toggle whether the tooltip is initially visible or not. This property should not be used in production in most cases.
         */
        "active": boolean;
        /**
          * Adjust the responsive breakpoint where tooltip starts opening towards left.
         */
        "breakpoint": DuetTooltipBreakpoint;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "direction": DuetTooltipDirection;
        /**
          * Label of the tooltip. If used, replaces the accessibleLabel option.
         */
        "label": string;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Adjust the horizontal positioning of the tooltip toggle in pixels. Can be a negative value as well. E.g. "-13px".
         */
        "positionHorizontal": string;
        /**
          * Adjust the vertical positioning of the tooltip toggle in pixels. Can be a negative value as well. E.g. "-13px".
         */
        "positionVertical": string;
        /**
          * Theme of the tooltip.
         */
        "theme": DuetTheme;
    }
    interface DuetTray {
        /**
          * Accessible label that is shown for screen reader users in the expandable close toggle. Not visible for normal users.
          * @default {fi: "Sulje", en: "Close", sv: "Stänga"}
         */
        "accessibleCloseLabel": string;
        /**
          * Defaults for accessibleCloseLabel
          * @default {fi: "Sulje", en: "Close", sv: "Stänga"}
         */
        "accessibleCloseLabelDefaults": DuetLangObject | string;
        /**
          * Accessible label that is shown for screen reader users in the expandable open toggle. Not visible for normal users.
          * @default {fi: "Avaa", en: "Open", sv: "Öppen"}
         */
        "accessibleOpenLabel": string;
        /**
          * Defaults for accessibleOpenLabel
          * @default {fi: "Avaa", en: "Open", sv: "Öppen"}
         */
        "accessibleOpenLabelDefaults": DuetLangObject | string;
        /**
          * Toggle whether the info panel is visible or not. You can use this property e.g. when pricing information is revealed to the user.
         */
        "active": boolean;
        /**
          * Hide the info panel when user scrolls back to the top of the viewport.
         */
        "autoHide": boolean;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language": DuetLanguage;
        /**
          * Enable or disable the automatic responsive behaviour which makes the info panel hide on larger viewports. Settings this to "false" means that the header panel is visible on all device sizes.
         */
        "responsive": boolean;
        /**
          * Theme of the info panel.
         */
        "theme": DuetTheme;
    }
    interface DuetUpload {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant": string;
        /**
          * accessible aria-Label of button
         */
        "accessibleButtonLabel": string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls": string;
        /**
          * Indicates the id of a component that describes the upload component.
         */
        "accessibleDescribedBy": string;
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns": string;
        /**
          * Default actions added to the internally used duet-editable-table
         */
        "actions": DuetEditableTableActions1;
        /**
          * Key used to set vertical alignment of action buttons
         */
        "alignment": string;
        /**
          * A string of commaseperated file type values that are allowed
          * @example : .pdf,.doc,.docx
         */
        "allowedExtensions": string;
        /**
          * A string of commaseperated mime type values that are allowed
          * @example : image/*,application/msword,
         */
        "allowedMimetypes": string;
        /**
          * Label of button
          * @default { fi: "Lisää liite", sv: "Lägg till en bilaga", en: "Add an attachment" }
         */
        "buttonLabel": string;
        /**
          * Property to change button label defaults on the component.
          * @default { fi: "Lisää liite", sv: "Lägg till en bilaga", en: "Add an attachment", }
         */
        "buttonLabelDefaults": DuetLangObject | string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption": string;
        /**
          * If true the input caption will be placed below file list and footer
         */
        "captionOnBottom": boolean;
        /**
          * If defer-upload is true, duet-upload will not (as recommended) instantly upload files but await a call to uploadPending()
         */
        "deferUpload": boolean;
        /**
          * Description for the upload component.
          * @default { en: "You may attach the following filetypes: {filetypes} - as well as the most common video files. You can upload {maxbytestotal} of files at a time, and add up to {maxfiles} attachments at a time each no larger than {maxbytes}.", sv: "Du kan bifoga följande filtyper: {filetypes} - samt de vanligaste videofilerna. Du kan ladda upp {maxbytestotal} av filer åt gången, och lägga till upp till {maxfiles} bilagor åt gången varje inte större än {maxbytes}.", fi: "Voit liittää seuraavat tiedostotyypit: {filetypes} - sekä yleisimmät videotiedostot. Voit lähettää {maxbytestotal} tiedostoa kerrallaan, ja lisätä enintään {maxfiles} liitettä kerrallaan, jokainen enintään {maxbytes} kokoisena.", }
         */
        "description": string;
        /**
          * Property to change descriptionDefaults defaults on the component.
          * @default { en: "You may attach the following filetypes: {filetypes} - as well as the most common video files. You can upload {maxbytestotal} of files at a time, and add up to {maxfiles} attachments at a time each no larger than {maxbytes}.", sv: "Du kan bifoga följande filtyper: {filetypes} - samt de vanligaste videofilerna. Du kan ladda upp {maxbytestotal} av filer åt gången, och lägga till upp till {maxfiles} bilagor åt gången varje inte större än {maxbytes}.", fi: "Voit liittää seuraavat tiedostotyypit: {filetypes} - sekä yleisimmät videotiedostot. Voit lähettää {maxbytestotal} tiedostoa kerrallaan, ja lisätä enintään {maxfiles} liitettä kerrallaan, jokainen enintään {maxbytes} kokoisena.", }
         */
        "descriptionDefaults": DuetLangObject | string;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the upload component, and conveys its inactive state to assistive technologies.
         */
        "disabled": boolean;
        /**
          * Display the input in error state along with an error message.
         */
        "error": string;
        /**
          * Default errorcodes used by the component, modifiable via javascript
         */
        "errorCodes": DuetUploadErrorCode[];
        /**
          * If external is set to true, the upload component will not actually upload the files, but only keep states it will be up to you to handle the upload and return progress information to the upload-component
         */
        "external": boolean;
        /**
          * Id of external uploadButton of the input used for setting accessibility attributes.
         */
        "externalUploadButtonId": string;
        /**
          * Label for the filelist's empty state.
          * @default { fi: "Ei vielä lisättyjä tiedostoja.",sv: "Inga filer har lagts till ännu.",en: "No files added yet."}
         */
        "fileListEmpty": string;
        /**
          * Defaults for the filelist's empty state.
          * @default { fi: "Ei vielä lisättyjä tiedostoja.", sv: "Inga filer har lagts till ännu.", en: "No files added yet.", }
         */
        "fileListEmptyDefaults": DuetLangObject | string;
        /**
          * Map of string that contain list of uploaded files.
         */
        "files": StringMap;
        /**
          * Get list of files, divided in errors and valid sections
         */
        "getFiles": () => Promise<false | { valid: any[]; invalid: any[]; }>;
        /**
          * Array of group names that you want the editable table to use to display files
          * @required 
          * @example [{ id: "success", label: {fi: "Onnistunut", en: "Success", sv: "Alt klart", }}]
         */
        "groups": DuetUploadTableGroupName[];
        /**
          * If set the upload component will not display an upload button, you will have to create one yourself and call the exposed method startUpload to open the upload dialog
         */
        "hideButton": boolean;
        /**
          * Visually hides the groups labels in the editable table list used to display the list of files
         */
        "hideGroups": boolean;
        /**
          * Use hide-header to hide upload component header and caption (if caption is not on bottom)
         */
        "hideHeader": boolean;
        /**
          * Adds a unique identifier for the upload component.
         */
        "identifier": string;
        /**
          * Label for the input.
          * @default { fi: "Lisää liite",sv: "Lägg till en bilaga",en: "Add attachments"}
         */
        "label": string;
        /**
          * Property to change labelDefaults defaults on the component. normally you would handle these strings on an application level and override @label when needed
          * @default { fi: "Lisää liite",sv: "Lägg till en bilaga",en: "Add attachments"}
         */
        "labelDefaults": DuetLangObject | string;
        /**
          * Use limitSelection to enforce the value in allowedExtension & allowedMimetypes when selecting files, by default this is off, setting this to true will limit the users choices to what has been explicitly set
         */
        "limitSelection": boolean;
        /**
          * Controls the margin of the component.
         */
        "margin": DuetMargin;
        /**
          * Use maxBytes to specify the maximum size in Bytes of a file that can be uploaded.
         */
        "maxBytes": number;
        /**
          * Use maxBytesTotal to specify the maximum size in Bytes of All files combined that can be uploaded.
         */
        "maxBytesTotal": number;
        /**
          * Use maxFiles to specify the maximum amount of files that can be uploaded
         */
        "maxFiles": number;
        /**
          * If internal upload method is used, and this has been set to a function - it will be called with the XHR options before the reqeust is sent, return an updated XHR options object in order to manipulate the request
         */
        "middleware": XHRInternalMiddleWare;
        /**
          * Use multiple to allow the user to select multiple files when uploading
         */
        "multiple": boolean;
        /**
          * Name of the upload component.
         */
        "name": string;
        /**
          * Method for forcing a render of the upload list, element.files can be changed externally But it will only rerender on a new Map or a top Level change - this can be used to update the tabular data if the automatic re-render is no sufficient
         */
        "refresh": () => Promise<void>;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required": boolean;
        /**
          * Sets focus on the specified `duet-input`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": (options?: FocusOptions) => Promise<void>;
        /**
          * If enabled the editable-table will display links on successfully uploaded items, this requires the server can respond with link URIs in the correct format and that the files are accessible to the user
         */
        "showLinks": boolean;
        /**
          * Use show-uploaded-items-header to show single, generic, header for uploaded items
         */
        "showUploadedItemsHeader": boolean;
        /**
          * Property to change the aria upload progress text read aloud by screenreaders
          * @default { fi: { inProgress: "Lähetetään {filesUploaded} lähetettävästä {filesTotal} tiedostosta", inProgressWithErrors: "Lähetetään {filesInProgress} tiedostoa, lähetetty {filesUploaded} lähetettävästä {filesTotal} tiedostosta, {filesWithErrors} tiedostossa on virheitä", done: "Kaikki {filesTotal} tiedostoa lähetetty onnistuneesti", doneWithErrors: "Lataus valmis, {filesUploaded} tiedostoa ladattu onnistuneesti, {filesWithErrors} tiedostossa oli virheitä", files: "tiedostot", file: "tiedosto", }, sv: { inProgress: "Adding {filesUploaded} of {filesTotal}", inProgressWithErrors: "Laddar upp {filesInProgress}, {filesUploaded} uppladdad av {filesTotal}, {filesWithErrors} misslyckades", done: "Alla {filesTotal} har lagts till", doneWithErrors: "Handling slutförd, {filesUploaded} har lagts till, {filesWithErrors} misslyckades", files: "filer", file: "fil", }, en: { inProgress: "Adding {filesUploaded} of {filesTotal}", inProgressWithErrors: "Uploading {filesInProgress}, {filesUploaded} uploaded of {filesTotal}, {filesWithErrors} failed", done: "All {filesTotal} added successfully", doneWithErrors: "Action completed, {filesUploaded} has been added successfully, {filesWithErrors} had errors", files: "tiedostoa", file: "tiedosto", }, }
         */
        "statusLabelDefaults": DuetLangObject | string;
        /**
          * Strings used for the status aria-label
         */
        "statusMessageLabel": StatusMessage | string;
        /**
          * Theme of the input.
         */
        "theme": DuetTheme;
        /**
          * Convenience method for updating the value of a key:value inside an item in the files attribute
         */
        "updateValue": (item: string, key: string, value: any) => Promise<void>;
        /**
          * Method for invoking the upload sequence
         */
        "upload": (metaData?: any | undefined) => Promise<void>;
        /**
          * Method for uploading pending files
         */
        "uploadPending": () => Promise<void>;
        /**
          * Property to change single uploaded items header label
          * @default { fi: "Ladattu tiedosto.", sv: "Nedladdad fil.", en: "Uploaded file.", }
         */
        "uploadedItemsHeaderLabel": DuetLangObject;
        /**
          * Endpoint URI that is capable of receiving the files
         */
        "uri": string;
        /**
          * Property to read if the internally used editable-table contains errors or not
         */
        "valid": boolean;
        /**
          * Value of the input.
         */
        "value": string;
    }
    interface DuetUploadAriaStatus {
        /**
          * Adds accessible label that is read aloud
         */
        "accessibleAriaLive": "off" | "polite" | "assertive";
        /**
          * valid file amount
         */
        "inprogress": number;
        /**
          * invalid file amount
         */
        "invalid": number;
        /**
          * Status labels used in the component
         */
        "statusMessageLabel": StatusMessage;
        /**
          * total files
         */
        "total": number;
        /**
          * valid file amount
         */
        "valid": number;
    }
    interface DuetVisuallyHidden {
    }
}
export interface DuetActionButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetActionButtonElement;
}
export interface DuetAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetAlertElement;
}
export interface DuetButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetButtonElement;
}
export interface DuetCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetCardElement;
}
export interface DuetCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetCheckboxElement;
}
export interface DuetChoiceCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetChoiceElement;
}
export interface DuetCollapsibleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetCollapsibleElement;
}
export interface DuetComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetComboboxElement;
}
export interface DuetCookieConsentCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetCookieConsentElement;
}
export interface DuetDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetDatePickerElement;
}
export interface DuetEditableTableCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetEditableTableElement;
}
export interface DuetFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetFooterElement;
}
export interface DuetHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetHeaderElement;
}
export interface DuetHeroCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetHeroElement;
}
export interface DuetInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetInputElement;
}
export interface DuetMenuBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetMenuBarElement;
}
export interface DuetModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetModalElement;
}
export interface DuetMultiselectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetMultiselectElement;
}
export interface DuetNumberInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetNumberInputElement;
}
export interface DuetPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetPaginationElement;
}
export interface DuetRadioCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetRadioElement;
}
export interface DuetRangeSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetRangeSliderElement;
}
export interface DuetRangeStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetRangeStepperElement;
}
export interface DuetSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetSelectElement;
}
export interface DuetSlideoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetSlideoutElement;
}
export interface DuetStepCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetStepElement;
}
export interface DuetStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetStepperElement;
}
export interface DuetTabGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetTabGroupElement;
}
export interface DuetTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetTextareaElement;
}
export interface DuetToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetToggleElement;
}
export interface DuetUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDuetUploadElement;
}
declare global {
    interface HTMLDuetActionButtonElement extends Components.DuetActionButton, HTMLStencilElement {
    }
    var HTMLDuetActionButtonElement: {
        prototype: HTMLDuetActionButtonElement;
        new (): HTMLDuetActionButtonElement;
    };
    interface HTMLDuetAlertElement extends Components.DuetAlert, HTMLStencilElement {
    }
    var HTMLDuetAlertElement: {
        prototype: HTMLDuetAlertElement;
        new (): HTMLDuetAlertElement;
    };
    interface HTMLDuetBadgeElement extends Components.DuetBadge, HTMLStencilElement {
    }
    var HTMLDuetBadgeElement: {
        prototype: HTMLDuetBadgeElement;
        new (): HTMLDuetBadgeElement;
    };
    interface HTMLDuetBannerElement extends Components.DuetBanner, HTMLStencilElement {
    }
    var HTMLDuetBannerElement: {
        prototype: HTMLDuetBannerElement;
        new (): HTMLDuetBannerElement;
    };
    interface HTMLDuetBreadcrumbElement extends Components.DuetBreadcrumb, HTMLStencilElement {
    }
    var HTMLDuetBreadcrumbElement: {
        prototype: HTMLDuetBreadcrumbElement;
        new (): HTMLDuetBreadcrumbElement;
    };
    interface HTMLDuetBreadcrumbsElement extends Components.DuetBreadcrumbs, HTMLStencilElement {
    }
    var HTMLDuetBreadcrumbsElement: {
        prototype: HTMLDuetBreadcrumbsElement;
        new (): HTMLDuetBreadcrumbsElement;
    };
    interface HTMLDuetButtonElement extends Components.DuetButton, HTMLStencilElement {
    }
    var HTMLDuetButtonElement: {
        prototype: HTMLDuetButtonElement;
        new (): HTMLDuetButtonElement;
    };
    interface HTMLDuetCalloutElement extends Components.DuetCallout, HTMLStencilElement {
    }
    var HTMLDuetCalloutElement: {
        prototype: HTMLDuetCalloutElement;
        new (): HTMLDuetCalloutElement;
    };
    interface HTMLDuetCaptionElement extends Components.DuetCaption, HTMLStencilElement {
    }
    var HTMLDuetCaptionElement: {
        prototype: HTMLDuetCaptionElement;
        new (): HTMLDuetCaptionElement;
    };
    interface HTMLDuetCardElement extends Components.DuetCard, HTMLStencilElement {
    }
    var HTMLDuetCardElement: {
        prototype: HTMLDuetCardElement;
        new (): HTMLDuetCardElement;
    };
    interface HTMLDuetCheckboxElement extends Components.DuetCheckbox, HTMLStencilElement {
    }
    var HTMLDuetCheckboxElement: {
        prototype: HTMLDuetCheckboxElement;
        new (): HTMLDuetCheckboxElement;
    };
    interface HTMLDuetCheckmarkElement extends Components.DuetCheckmark, HTMLStencilElement {
    }
    var HTMLDuetCheckmarkElement: {
        prototype: HTMLDuetCheckmarkElement;
        new (): HTMLDuetCheckmarkElement;
    };
    interface HTMLDuetChoiceElement extends Components.DuetChoice, HTMLStencilElement {
    }
    var HTMLDuetChoiceElement: {
        prototype: HTMLDuetChoiceElement;
        new (): HTMLDuetChoiceElement;
    };
    interface HTMLDuetChoiceGroupElement extends Components.DuetChoiceGroup, HTMLStencilElement {
    }
    var HTMLDuetChoiceGroupElement: {
        prototype: HTMLDuetChoiceGroupElement;
        new (): HTMLDuetChoiceGroupElement;
    };
    interface HTMLDuetCollapsibleElement extends Components.DuetCollapsible, HTMLStencilElement {
    }
    var HTMLDuetCollapsibleElement: {
        prototype: HTMLDuetCollapsibleElement;
        new (): HTMLDuetCollapsibleElement;
    };
    interface HTMLDuetComboboxElement extends Components.DuetCombobox, HTMLStencilElement {
    }
    var HTMLDuetComboboxElement: {
        prototype: HTMLDuetComboboxElement;
        new (): HTMLDuetComboboxElement;
    };
    interface HTMLDuetContactCardElement extends Components.DuetContactCard, HTMLStencilElement {
    }
    var HTMLDuetContactCardElement: {
        prototype: HTMLDuetContactCardElement;
        new (): HTMLDuetContactCardElement;
    };
    interface HTMLDuetCookieConsentElement extends Components.DuetCookieConsent, HTMLStencilElement {
    }
    var HTMLDuetCookieConsentElement: {
        prototype: HTMLDuetCookieConsentElement;
        new (): HTMLDuetCookieConsentElement;
    };
    interface HTMLDuetDatePickerElement extends Components.DuetDatePicker, HTMLStencilElement {
    }
    var HTMLDuetDatePickerElement: {
        prototype: HTMLDuetDatePickerElement;
        new (): HTMLDuetDatePickerElement;
    };
    interface HTMLDuetDividerElement extends Components.DuetDivider, HTMLStencilElement {
    }
    var HTMLDuetDividerElement: {
        prototype: HTMLDuetDividerElement;
        new (): HTMLDuetDividerElement;
    };
    interface HTMLDuetEditableTableElement extends Components.DuetEditableTable, HTMLStencilElement {
    }
    var HTMLDuetEditableTableElement: {
        prototype: HTMLDuetEditableTableElement;
        new (): HTMLDuetEditableTableElement;
    };
    interface HTMLDuetEmptyStateElement extends Components.DuetEmptyState, HTMLStencilElement {
    }
    var HTMLDuetEmptyStateElement: {
        prototype: HTMLDuetEmptyStateElement;
        new (): HTMLDuetEmptyStateElement;
    };
    interface HTMLDuetFieldsetElement extends Components.DuetFieldset, HTMLStencilElement {
    }
    var HTMLDuetFieldsetElement: {
        prototype: HTMLDuetFieldsetElement;
        new (): HTMLDuetFieldsetElement;
    };
    interface HTMLDuetFooterElement extends Components.DuetFooter, HTMLStencilElement {
    }
    var HTMLDuetFooterElement: {
        prototype: HTMLDuetFooterElement;
        new (): HTMLDuetFooterElement;
    };
    interface HTMLDuetGridElement extends Components.DuetGrid, HTMLStencilElement {
    }
    var HTMLDuetGridElement: {
        prototype: HTMLDuetGridElement;
        new (): HTMLDuetGridElement;
    };
    interface HTMLDuetGridItemElement extends Components.DuetGridItem, HTMLStencilElement {
    }
    var HTMLDuetGridItemElement: {
        prototype: HTMLDuetGridItemElement;
        new (): HTMLDuetGridItemElement;
    };
    interface HTMLDuetHeaderElement extends Components.DuetHeader, HTMLStencilElement {
    }
    var HTMLDuetHeaderElement: {
        prototype: HTMLDuetHeaderElement;
        new (): HTMLDuetHeaderElement;
    };
    interface HTMLDuetHeadingElement extends Components.DuetHeading, HTMLStencilElement {
    }
    var HTMLDuetHeadingElement: {
        prototype: HTMLDuetHeadingElement;
        new (): HTMLDuetHeadingElement;
    };
    interface HTMLDuetHeroElement extends Components.DuetHero, HTMLStencilElement {
    }
    var HTMLDuetHeroElement: {
        prototype: HTMLDuetHeroElement;
        new (): HTMLDuetHeroElement;
    };
    interface HTMLDuetIconElement extends Components.DuetIcon, HTMLStencilElement {
    }
    var HTMLDuetIconElement: {
        prototype: HTMLDuetIconElement;
        new (): HTMLDuetIconElement;
    };
    interface HTMLDuetInputElement extends Components.DuetInput, HTMLStencilElement {
    }
    var HTMLDuetInputElement: {
        prototype: HTMLDuetInputElement;
        new (): HTMLDuetInputElement;
    };
    interface HTMLDuetLabelElement extends Components.DuetLabel, HTMLStencilElement {
    }
    var HTMLDuetLabelElement: {
        prototype: HTMLDuetLabelElement;
        new (): HTMLDuetLabelElement;
    };
    interface HTMLDuetLayoutElement extends Components.DuetLayout, HTMLStencilElement {
    }
    var HTMLDuetLayoutElement: {
        prototype: HTMLDuetLayoutElement;
        new (): HTMLDuetLayoutElement;
    };
    interface HTMLDuetLinkElement extends Components.DuetLink, HTMLStencilElement {
    }
    var HTMLDuetLinkElement: {
        prototype: HTMLDuetLinkElement;
        new (): HTMLDuetLinkElement;
    };
    interface HTMLDuetListElement extends Components.DuetList, HTMLStencilElement {
    }
    var HTMLDuetListElement: {
        prototype: HTMLDuetListElement;
        new (): HTMLDuetListElement;
    };
    interface HTMLDuetListItemElement extends Components.DuetListItem, HTMLStencilElement {
    }
    var HTMLDuetListItemElement: {
        prototype: HTMLDuetListItemElement;
        new (): HTMLDuetListItemElement;
    };
    interface HTMLDuetLogoElement extends Components.DuetLogo, HTMLStencilElement {
    }
    var HTMLDuetLogoElement: {
        prototype: HTMLDuetLogoElement;
        new (): HTMLDuetLogoElement;
    };
    interface HTMLDuetMenuBarElement extends Components.DuetMenuBar, HTMLStencilElement {
    }
    var HTMLDuetMenuBarElement: {
        prototype: HTMLDuetMenuBarElement;
        new (): HTMLDuetMenuBarElement;
    };
    interface HTMLDuetMenuBarButtonElement extends Components.DuetMenuBarButton, HTMLStencilElement {
    }
    var HTMLDuetMenuBarButtonElement: {
        prototype: HTMLDuetMenuBarButtonElement;
        new (): HTMLDuetMenuBarButtonElement;
    };
    interface HTMLDuetMenuBarDropdownElement extends Components.DuetMenuBarDropdown, HTMLStencilElement {
    }
    var HTMLDuetMenuBarDropdownElement: {
        prototype: HTMLDuetMenuBarDropdownElement;
        new (): HTMLDuetMenuBarDropdownElement;
    };
    interface HTMLDuetMenuBarDropdownLinkElement extends Components.DuetMenuBarDropdownLink, HTMLStencilElement {
    }
    var HTMLDuetMenuBarDropdownLinkElement: {
        prototype: HTMLDuetMenuBarDropdownLinkElement;
        new (): HTMLDuetMenuBarDropdownLinkElement;
    };
    interface HTMLDuetMenuBarLinkElement extends Components.DuetMenuBarLink, HTMLStencilElement {
    }
    var HTMLDuetMenuBarLinkElement: {
        prototype: HTMLDuetMenuBarLinkElement;
        new (): HTMLDuetMenuBarLinkElement;
    };
    interface HTMLDuetModalElement extends Components.DuetModal, HTMLStencilElement {
    }
    var HTMLDuetModalElement: {
        prototype: HTMLDuetModalElement;
        new (): HTMLDuetModalElement;
    };
    interface HTMLDuetMultiselectElement extends Components.DuetMultiselect, HTMLStencilElement {
    }
    var HTMLDuetMultiselectElement: {
        prototype: HTMLDuetMultiselectElement;
        new (): HTMLDuetMultiselectElement;
    };
    interface HTMLDuetNavElement extends Components.DuetNav, HTMLStencilElement {
    }
    var HTMLDuetNavElement: {
        prototype: HTMLDuetNavElement;
        new (): HTMLDuetNavElement;
    };
    interface HTMLDuetNotificationElement extends Components.DuetNotification, HTMLStencilElement {
    }
    var HTMLDuetNotificationElement: {
        prototype: HTMLDuetNotificationElement;
        new (): HTMLDuetNotificationElement;
    };
    interface HTMLDuetNotificationDrawerElement extends Components.DuetNotificationDrawer, HTMLStencilElement {
    }
    var HTMLDuetNotificationDrawerElement: {
        prototype: HTMLDuetNotificationDrawerElement;
        new (): HTMLDuetNotificationDrawerElement;
    };
    interface HTMLDuetNumberInputElement extends Components.DuetNumberInput, HTMLStencilElement {
    }
    var HTMLDuetNumberInputElement: {
        prototype: HTMLDuetNumberInputElement;
        new (): HTMLDuetNumberInputElement;
    };
    interface HTMLDuetPageHeadingElement extends Components.DuetPageHeading, HTMLStencilElement {
    }
    var HTMLDuetPageHeadingElement: {
        prototype: HTMLDuetPageHeadingElement;
        new (): HTMLDuetPageHeadingElement;
    };
    interface HTMLDuetPaginationElement extends Components.DuetPagination, HTMLStencilElement {
    }
    var HTMLDuetPaginationElement: {
        prototype: HTMLDuetPaginationElement;
        new (): HTMLDuetPaginationElement;
    };
    interface HTMLDuetParagraphElement extends Components.DuetParagraph, HTMLStencilElement {
    }
    var HTMLDuetParagraphElement: {
        prototype: HTMLDuetParagraphElement;
        new (): HTMLDuetParagraphElement;
    };
    interface HTMLDuetProgressElement extends Components.DuetProgress, HTMLStencilElement {
    }
    var HTMLDuetProgressElement: {
        prototype: HTMLDuetProgressElement;
        new (): HTMLDuetProgressElement;
    };
    interface HTMLDuetPromoCardElement extends Components.DuetPromoCard, HTMLStencilElement {
    }
    var HTMLDuetPromoCardElement: {
        prototype: HTMLDuetPromoCardElement;
        new (): HTMLDuetPromoCardElement;
    };
    interface HTMLDuetRadioElement extends Components.DuetRadio, HTMLStencilElement {
    }
    var HTMLDuetRadioElement: {
        prototype: HTMLDuetRadioElement;
        new (): HTMLDuetRadioElement;
    };
    interface HTMLDuetRadioGroupElement extends Components.DuetRadioGroup, HTMLStencilElement {
    }
    var HTMLDuetRadioGroupElement: {
        prototype: HTMLDuetRadioGroupElement;
        new (): HTMLDuetRadioGroupElement;
    };
    interface HTMLDuetRangeSliderElement extends Components.DuetRangeSlider, HTMLStencilElement {
    }
    var HTMLDuetRangeSliderElement: {
        prototype: HTMLDuetRangeSliderElement;
        new (): HTMLDuetRangeSliderElement;
    };
    interface HTMLDuetRangeStepperElement extends Components.DuetRangeStepper, HTMLStencilElement {
    }
    var HTMLDuetRangeStepperElement: {
        prototype: HTMLDuetRangeStepperElement;
        new (): HTMLDuetRangeStepperElement;
    };
    interface HTMLDuetScrollableElement extends Components.DuetScrollable, HTMLStencilElement {
    }
    var HTMLDuetScrollableElement: {
        prototype: HTMLDuetScrollableElement;
        new (): HTMLDuetScrollableElement;
    };
    interface HTMLDuetSectionLayoutElement extends Components.DuetSectionLayout, HTMLStencilElement {
    }
    var HTMLDuetSectionLayoutElement: {
        prototype: HTMLDuetSectionLayoutElement;
        new (): HTMLDuetSectionLayoutElement;
    };
    interface HTMLDuetSelectElement extends Components.DuetSelect, HTMLStencilElement {
    }
    var HTMLDuetSelectElement: {
        prototype: HTMLDuetSelectElement;
        new (): HTMLDuetSelectElement;
    };
    interface HTMLDuetShapedImageElement extends Components.DuetShapedImage, HTMLStencilElement {
    }
    var HTMLDuetShapedImageElement: {
        prototype: HTMLDuetShapedImageElement;
        new (): HTMLDuetShapedImageElement;
    };
    interface HTMLDuetSlideoutElement extends Components.DuetSlideout, HTMLStencilElement {
    }
    var HTMLDuetSlideoutElement: {
        prototype: HTMLDuetSlideoutElement;
        new (): HTMLDuetSlideoutElement;
    };
    interface HTMLDuetSlideoutLangElement extends Components.DuetSlideoutLang, HTMLStencilElement {
    }
    var HTMLDuetSlideoutLangElement: {
        prototype: HTMLDuetSlideoutLangElement;
        new (): HTMLDuetSlideoutLangElement;
    };
    interface HTMLDuetSlideoutLinkElement extends Components.DuetSlideoutLink, HTMLStencilElement {
    }
    var HTMLDuetSlideoutLinkElement: {
        prototype: HTMLDuetSlideoutLinkElement;
        new (): HTMLDuetSlideoutLinkElement;
    };
    interface HTMLDuetSlideoutPanelElement extends Components.DuetSlideoutPanel, HTMLStencilElement {
    }
    var HTMLDuetSlideoutPanelElement: {
        prototype: HTMLDuetSlideoutPanelElement;
        new (): HTMLDuetSlideoutPanelElement;
    };
    interface HTMLDuetSlideoutPanelDropdownElement extends Components.DuetSlideoutPanelDropdown, HTMLStencilElement {
    }
    var HTMLDuetSlideoutPanelDropdownElement: {
        prototype: HTMLDuetSlideoutPanelDropdownElement;
        new (): HTMLDuetSlideoutPanelDropdownElement;
    };
    interface HTMLDuetSpacerElement extends Components.DuetSpacer, HTMLStencilElement {
    }
    var HTMLDuetSpacerElement: {
        prototype: HTMLDuetSpacerElement;
        new (): HTMLDuetSpacerElement;
    };
    interface HTMLDuetSpinnerElement extends Components.DuetSpinner, HTMLStencilElement {
    }
    var HTMLDuetSpinnerElement: {
        prototype: HTMLDuetSpinnerElement;
        new (): HTMLDuetSpinnerElement;
    };
    interface HTMLDuetStepElement extends Components.DuetStep, HTMLStencilElement {
    }
    var HTMLDuetStepElement: {
        prototype: HTMLDuetStepElement;
        new (): HTMLDuetStepElement;
    };
    interface HTMLDuetStepperElement extends Components.DuetStepper, HTMLStencilElement {
    }
    var HTMLDuetStepperElement: {
        prototype: HTMLDuetStepperElement;
        new (): HTMLDuetStepperElement;
    };
    interface HTMLDuetSubmenuBarElement extends Components.DuetSubmenuBar, HTMLStencilElement {
    }
    var HTMLDuetSubmenuBarElement: {
        prototype: HTMLDuetSubmenuBarElement;
        new (): HTMLDuetSubmenuBarElement;
    };
    interface HTMLDuetSubmenuBarDropdownElement extends Components.DuetSubmenuBarDropdown, HTMLStencilElement {
    }
    var HTMLDuetSubmenuBarDropdownElement: {
        prototype: HTMLDuetSubmenuBarDropdownElement;
        new (): HTMLDuetSubmenuBarDropdownElement;
    };
    interface HTMLDuetSubmenuBarDropdownLinkElement extends Components.DuetSubmenuBarDropdownLink, HTMLStencilElement {
    }
    var HTMLDuetSubmenuBarDropdownLinkElement: {
        prototype: HTMLDuetSubmenuBarDropdownLinkElement;
        new (): HTMLDuetSubmenuBarDropdownLinkElement;
    };
    interface HTMLDuetSubmenuBarLinkElement extends Components.DuetSubmenuBarLink, HTMLStencilElement {
    }
    var HTMLDuetSubmenuBarLinkElement: {
        prototype: HTMLDuetSubmenuBarLinkElement;
        new (): HTMLDuetSubmenuBarLinkElement;
    };
    interface HTMLDuetTabElement extends Components.DuetTab, HTMLStencilElement {
    }
    var HTMLDuetTabElement: {
        prototype: HTMLDuetTabElement;
        new (): HTMLDuetTabElement;
    };
    interface HTMLDuetTabGroupElement extends Components.DuetTabGroup, HTMLStencilElement {
    }
    var HTMLDuetTabGroupElement: {
        prototype: HTMLDuetTabGroupElement;
        new (): HTMLDuetTabGroupElement;
    };
    interface HTMLDuetTableElement extends Components.DuetTable, HTMLStencilElement {
    }
    var HTMLDuetTableElement: {
        prototype: HTMLDuetTableElement;
        new (): HTMLDuetTableElement;
    };
    interface HTMLDuetTextareaElement extends Components.DuetTextarea, HTMLStencilElement {
    }
    var HTMLDuetTextareaElement: {
        prototype: HTMLDuetTextareaElement;
        new (): HTMLDuetTextareaElement;
    };
    interface HTMLDuetToggleElement extends Components.DuetToggle, HTMLStencilElement {
    }
    var HTMLDuetToggleElement: {
        prototype: HTMLDuetToggleElement;
        new (): HTMLDuetToggleElement;
    };
    interface HTMLDuetToolbarElement extends Components.DuetToolbar, HTMLStencilElement {
    }
    var HTMLDuetToolbarElement: {
        prototype: HTMLDuetToolbarElement;
        new (): HTMLDuetToolbarElement;
    };
    interface HTMLDuetToolbarDropdownElement extends Components.DuetToolbarDropdown, HTMLStencilElement {
    }
    var HTMLDuetToolbarDropdownElement: {
        prototype: HTMLDuetToolbarDropdownElement;
        new (): HTMLDuetToolbarDropdownElement;
    };
    interface HTMLDuetToolbarDropdownLinkElement extends Components.DuetToolbarDropdownLink, HTMLStencilElement {
    }
    var HTMLDuetToolbarDropdownLinkElement: {
        prototype: HTMLDuetToolbarDropdownLinkElement;
        new (): HTMLDuetToolbarDropdownLinkElement;
    };
    interface HTMLDuetToolbarLinkElement extends Components.DuetToolbarLink, HTMLStencilElement {
    }
    var HTMLDuetToolbarLinkElement: {
        prototype: HTMLDuetToolbarLinkElement;
        new (): HTMLDuetToolbarLinkElement;
    };
    interface HTMLDuetTooltipElement extends Components.DuetTooltip, HTMLStencilElement {
    }
    var HTMLDuetTooltipElement: {
        prototype: HTMLDuetTooltipElement;
        new (): HTMLDuetTooltipElement;
    };
    interface HTMLDuetTrayElement extends Components.DuetTray, HTMLStencilElement {
    }
    var HTMLDuetTrayElement: {
        prototype: HTMLDuetTrayElement;
        new (): HTMLDuetTrayElement;
    };
    interface HTMLDuetUploadElement extends Components.DuetUpload, HTMLStencilElement {
    }
    var HTMLDuetUploadElement: {
        prototype: HTMLDuetUploadElement;
        new (): HTMLDuetUploadElement;
    };
    interface HTMLDuetUploadAriaStatusElement extends Components.DuetUploadAriaStatus, HTMLStencilElement {
    }
    var HTMLDuetUploadAriaStatusElement: {
        prototype: HTMLDuetUploadAriaStatusElement;
        new (): HTMLDuetUploadAriaStatusElement;
    };
    interface HTMLDuetVisuallyHiddenElement extends Components.DuetVisuallyHidden, HTMLStencilElement {
    }
    var HTMLDuetVisuallyHiddenElement: {
        prototype: HTMLDuetVisuallyHiddenElement;
        new (): HTMLDuetVisuallyHiddenElement;
    };
    interface HTMLElementTagNameMap {
        "duet-action-button": HTMLDuetActionButtonElement;
        "duet-alert": HTMLDuetAlertElement;
        "duet-badge": HTMLDuetBadgeElement;
        "duet-banner": HTMLDuetBannerElement;
        "duet-breadcrumb": HTMLDuetBreadcrumbElement;
        "duet-breadcrumbs": HTMLDuetBreadcrumbsElement;
        "duet-button": HTMLDuetButtonElement;
        "duet-callout": HTMLDuetCalloutElement;
        "duet-caption": HTMLDuetCaptionElement;
        "duet-card": HTMLDuetCardElement;
        "duet-checkbox": HTMLDuetCheckboxElement;
        "duet-checkmark": HTMLDuetCheckmarkElement;
        "duet-choice": HTMLDuetChoiceElement;
        "duet-choice-group": HTMLDuetChoiceGroupElement;
        "duet-collapsible": HTMLDuetCollapsibleElement;
        "duet-combobox": HTMLDuetComboboxElement;
        "duet-contact-card": HTMLDuetContactCardElement;
        "duet-cookie-consent": HTMLDuetCookieConsentElement;
        "duet-date-picker": HTMLDuetDatePickerElement;
        "duet-divider": HTMLDuetDividerElement;
        "duet-editable-table": HTMLDuetEditableTableElement;
        "duet-empty-state": HTMLDuetEmptyStateElement;
        "duet-fieldset": HTMLDuetFieldsetElement;
        "duet-footer": HTMLDuetFooterElement;
        "duet-grid": HTMLDuetGridElement;
        "duet-grid-item": HTMLDuetGridItemElement;
        "duet-header": HTMLDuetHeaderElement;
        "duet-heading": HTMLDuetHeadingElement;
        "duet-hero": HTMLDuetHeroElement;
        "duet-icon": HTMLDuetIconElement;
        "duet-input": HTMLDuetInputElement;
        "duet-label": HTMLDuetLabelElement;
        "duet-layout": HTMLDuetLayoutElement;
        "duet-link": HTMLDuetLinkElement;
        "duet-list": HTMLDuetListElement;
        "duet-list-item": HTMLDuetListItemElement;
        "duet-logo": HTMLDuetLogoElement;
        "duet-menu-bar": HTMLDuetMenuBarElement;
        "duet-menu-bar-button": HTMLDuetMenuBarButtonElement;
        "duet-menu-bar-dropdown": HTMLDuetMenuBarDropdownElement;
        "duet-menu-bar-dropdown-link": HTMLDuetMenuBarDropdownLinkElement;
        "duet-menu-bar-link": HTMLDuetMenuBarLinkElement;
        "duet-modal": HTMLDuetModalElement;
        "duet-multiselect": HTMLDuetMultiselectElement;
        "duet-nav": HTMLDuetNavElement;
        "duet-notification": HTMLDuetNotificationElement;
        "duet-notification-drawer": HTMLDuetNotificationDrawerElement;
        "duet-number-input": HTMLDuetNumberInputElement;
        "duet-page-heading": HTMLDuetPageHeadingElement;
        "duet-pagination": HTMLDuetPaginationElement;
        "duet-paragraph": HTMLDuetParagraphElement;
        "duet-progress": HTMLDuetProgressElement;
        "duet-promo-card": HTMLDuetPromoCardElement;
        "duet-radio": HTMLDuetRadioElement;
        "duet-radio-group": HTMLDuetRadioGroupElement;
        "duet-range-slider": HTMLDuetRangeSliderElement;
        "duet-range-stepper": HTMLDuetRangeStepperElement;
        "duet-scrollable": HTMLDuetScrollableElement;
        "duet-section-layout": HTMLDuetSectionLayoutElement;
        "duet-select": HTMLDuetSelectElement;
        "duet-shaped-image": HTMLDuetShapedImageElement;
        "duet-slideout": HTMLDuetSlideoutElement;
        "duet-slideout-lang": HTMLDuetSlideoutLangElement;
        "duet-slideout-link": HTMLDuetSlideoutLinkElement;
        "duet-slideout-panel": HTMLDuetSlideoutPanelElement;
        "duet-slideout-panel-dropdown": HTMLDuetSlideoutPanelDropdownElement;
        "duet-spacer": HTMLDuetSpacerElement;
        "duet-spinner": HTMLDuetSpinnerElement;
        "duet-step": HTMLDuetStepElement;
        "duet-stepper": HTMLDuetStepperElement;
        "duet-submenu-bar": HTMLDuetSubmenuBarElement;
        "duet-submenu-bar-dropdown": HTMLDuetSubmenuBarDropdownElement;
        "duet-submenu-bar-dropdown-link": HTMLDuetSubmenuBarDropdownLinkElement;
        "duet-submenu-bar-link": HTMLDuetSubmenuBarLinkElement;
        "duet-tab": HTMLDuetTabElement;
        "duet-tab-group": HTMLDuetTabGroupElement;
        "duet-table": HTMLDuetTableElement;
        "duet-textarea": HTMLDuetTextareaElement;
        "duet-toggle": HTMLDuetToggleElement;
        "duet-toolbar": HTMLDuetToolbarElement;
        "duet-toolbar-dropdown": HTMLDuetToolbarDropdownElement;
        "duet-toolbar-dropdown-link": HTMLDuetToolbarDropdownLinkElement;
        "duet-toolbar-link": HTMLDuetToolbarLinkElement;
        "duet-tooltip": HTMLDuetTooltipElement;
        "duet-tray": HTMLDuetTrayElement;
        "duet-upload": HTMLDuetUploadElement;
        "duet-upload-aria-status": HTMLDuetUploadAriaStatusElement;
        "duet-visually-hidden": HTMLDuetVisuallyHiddenElement;
    }
}
declare namespace LocalJSX {
    interface DuetActionButton {
        /**
          * Used to indicate which dom element with ID this element controls
         */
        "accessibleControls"?: string;
        /**
          * Described By id
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * Accessible label
         */
        "accessibleLabel"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Default accessible label
         */
        "accessibleLabelsDefaults"?: DuetLangObject;
        /**
          * Title of the action button (shows as DOM tooltip when hovering) if set to true, this will try to add a best-guess title based on action-name if set to a string the string is used if set to false nothing is set
         */
        "accessibleTitle"?: string | boolean;
        /**
          * Name of id of action that was called being called
         */
        "actionId"?: string;
        /**
          * Name of id of action that was called being called
         */
        "actionMeta"?: Record<any, any> | string;
        /**
          * Name of action being called
         */
        "actionName"?: string;
        /**
          * Custom color to be used for a background, as a design token entered in camelCase or kebab-case. Using this option the icon will always be resized to $size-icon-medium on mobile viewports. Example: "color-primary".
         */
        "background"?: DuetColor;
        /**
          * Custom color to be used for the icon, as a design token entered in camelCase or kebab-case. Example: "color-primary". This property can also be set to "currentColor" which forces the icon to use the CSS text color of parent element instead. Useful when you want to control the color in stylesheet instead.
         */
        "color"?: DuetColor;
        /**
          * Disables the button
         */
        "disabled"?: boolean;
        /**
          * Color of the icon to display
         */
        "iconColor"?: string;
        /**
          * Name of the icon to display
         */
        "iconName"?: string;
        /**
          * Size of the icon
         */
        "iconSize"?: DuetActionButtonIconSize;
        /**
          * Emitted when an action has been invoked
         */
        "onDuetActionEvent"?: (event: DuetActionButtonCustomEvent<DuetActionButtonEvent>) => void;
        /**
          * Theme of the pagination.
         */
        "theme"?: DuetTheme;
    }
    interface DuetAlert {
        /**
          * Adds accessible label for the dismissible alert close button.
          * @default {fi: "Sulje viesti", sv: "Stäng meddelandet", en: "Close the message"}
         */
        "accessibleLabel"?: string;
        /**
          * Property to change languageDefaults on the component. normally you would handle these strings on an application level and override @accessibleLabel when needed
          * @default {fi: "Sulje viesti", sv: "Stäng meddelandet", en: "Close the message"}
         */
        "accessibleLabelDefaults"?: DuetLangObject | string;
        /**
          * Enable or disabled announcements by assistive technologies.
         */
        "announcements"?: boolean;
        /**
          * Time in milliseconds which is waited before auto dismiss.
         */
        "autoDismiss"?: number;
        /**
          * Should a button be rendered to dismiss the alert?
         */
        "dismissible"?: boolean;
        /**
          * Icon to display to the left of the content.
         */
        "icon"?: DuetIconName;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Emitted when the dismiss button is clicked
         */
        "onDuetDismiss"?: (event: DuetAlertCustomEvent<DuetAlertEvent>) => void;
        /**
          * Controls the padding of the component.
         */
        "padding"?: DuetPadding;
        /**
          * Theme of the card.
         */
        "theme"?: DuetTheme;
        /**
          * Style variation of the alert.
         */
        "variation"?: DuetStatus;
    }
    interface DuetBadge {
        /**
          * Variation of the background. "strong" results in a more prominent background color.
          * @default "normal"
         */
        "background"?: "normal" | "strong";
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Theme of the badge.
         */
        "theme"?: DuetTheme;
        /**
          * Style variation of the badge.
         */
        "variation"?: DuetStatus;
    }
    interface DuetBanner {
        /**
          * Background color.
         */
        "backgroundColor"?: DuetColor;
        /**
          * The actual heading level used in the HTML markup.
         */
        "headingLevel"?: DuetHeadingLevel;
        /**
          * Icon.
         */
        "icon"?: DuetIconName;
        /**
          * Icon background color.
         */
        "iconBackgroundColor"?: DuetColor;
        /**
          * Icon color.
         */
        "iconColor"?: DuetColor;
        /**
          * Image. Example image is 512x341;
         */
        "image"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Size.
         */
        "size"?: "auto" | "small" | "large";
        /**
          * Text color.
         */
        "textColor"?: DuetColor;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetBreadcrumb {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Href
         */
        "href"?: string;
        /**
          * Icon
         */
        "icon"?: DuetIconName;
        /**
          * Theme
         */
        "theme"?: DuetTheme;
    }
    interface DuetBreadcrumbs {
        /**
          * Theme
         */
        "theme"?: DuetTheme;
        /**
          * Variation
         */
        "variation"?: "header" | "footer";
    }
    interface DuetButton {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this property to add an aria-controls attribute to the button. Use the attribute to point to the unique id of the content that the button manages.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the button.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * If a button expands or collapses adjacent content, then use the ariaExpanded prop to add the aria-expanded attribute to the button. Set the value to convey the current expanded (true) or collapsed (false) state of the content.
         */
        "accessibleExpanded"?: boolean;
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal"?: string;
        /**
          * Property to change accessibleLabelExternal defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelExternal when needed
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults"?: DuetLangObject | string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Indicates the id of a component owned by the button.
         */
        "accessibleOwns"?: string;
        /**
          * Use this property to add an aria-haspopup attribute to a button, if you are using it as a menu button.
         */
        "accessiblePopup"?: string;
        /**
          * Tells screen reader the element is pressed.
         */
        "accessiblePressed"?: boolean;
        /**
          * Centers the text of a button
         */
        "centerText"?: DuetButtonTextCentering;
        /**
          * Custom color to be used for text, as a design token entered in camelCase or kebab-case. Example: "color-primary".
         */
        "color"?: DuetColor;
        /**
          * Makes the button component disabled. This prevents users from being able to interact with the button, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Expands the button to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Forces URL to open in a new browser tab. Used together with URL prop.
         */
        "external"?: boolean;
        /**
          * Keep the button fixed width even on mobile viewports.
         */
        "fixed"?: boolean;
        /**
          * Icon to display to the left of the button content. This is ignored/overridden when button is used as an external link.
         */
        "icon"?: DuetIconName;
        /**
          * Whether this button should use styles meant for displaying just an icon.
         */
        "iconOnly"?: boolean;
        /**
          * Show icon on the right side of the button content.
         */
        "iconRight"?: boolean;
        /**
          * Icon size.
         */
        "iconSize"?: DuetButtonIconSize;
        /**
          * Adds a unique identifier for the button. Please note that with this particular component this id is added inside Shadow DOM. If you need an id on the html element, use regular id attribute instead.
         */
        "identifier"?: string;
        /**
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Loading state of the button
         */
        "loading"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * The name of the button, which gets paired with the button's value when submitted as part of a form. Corresponds with the native HTML name attribute.
         */
        "name"?: string;
        /**
          * Negative variation, can be combined with Variation to produce negative versions
         */
        "negative"?: boolean;
        /**
          * Emitted when the button loses focus.
         */
        "onDuetBlur"?: (event: DuetButtonCustomEvent<any>) => void;
        /**
          * Emitted when the button has focus.
         */
        "onDuetFocus"?: (event: DuetButtonCustomEvent<any>) => void;
        /**
          * Controls the padding of the component.
         */
        "padding"?: DuetPadding;
        /**
          * Button’s size.
         */
        "size"?: DuetButtonSize;
        /**
          * Allows the button to submit a form.
         */
        "submit"?: boolean;
        /**
          * Theme of the button.
         */
        "theme"?: DuetTheme;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * The value of the button, which gets paired with the button's name when submitted as part of a form. Corresponds with the native HTML value attribute.
         */
        "value"?: string;
        /**
          * Style variation of the button.
          * @negative - value is deprecated and should be used in combination with negative prop in the future
          * @destructive - value is deprecated and should be replace with destructive-secondary
         */
        "variation"?: DuetButtonVariation;
        /**
          * Controls the text wrapping.
         */
        "wrapping"?: DuetButtonWrapping;
    }
    interface DuetCallout {
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Theme of the caption.
         */
        "theme"?: DuetTheme;
    }
    interface DuetCaption {
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Selected state of the caption. Used inside Choice component.
         */
        "selected"?: boolean;
        /**
          * Controls the size of the caption.
         */
        "size"?: DuetCaptionSize;
        /**
          * Theme of the caption.
         */
        "theme"?: DuetTheme;
    }
    interface DuetCard {
        /**
          * Adds accessible label for the card that is only shown for screen readers. Typically, this label text is used when the whole card is made clickable to create a label text for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Custom color to be used for the card background, as a design token entered in camelCase or kebab-case. Example: "primary".
         */
        "background"?: DuetColor;
        /**
          * Makes the card expand and collapse when the collapse/expand arrow in the heading is clicked or tapped. This option only works together with the heading option, meaning that you also need to set the heading for this functionality to show up.
         */
        "collapsible"?: boolean;
        /**
          * The content for the card heading. If empty, both heading and collapse functionality will be hidden.
         */
        "heading"?: string;
        /**
          * Custom color to be used for the card's heading background, as a design token entered in camelCase or kebab-case. Example: "primary".
         */
        "headingBackground"?: DuetColor | undefined;
        /**
          * The actual heading level used for the heading in html markup. This setting exists for accessibility reasons. It doesn’t change the style visually. This setting is only used if the heading property is set. If you provide your own heading(s) in the slot, you should set this to neutral "div" in order to avoid nested headings.
         */
        "headingLevel"?: DuetCardHeadingLevel;
        /**
          * Icon to display on the left side of heading. Example: "form-location"
         */
        "icon"?: DuetIconName;
        /**
          * Image to display in the card. The image aspect ratio can be anything as images are resized to fit 100% width of the card. Example: "https://cdn.duetds.com/api/assets/illustrations/placeholder-image.jpg"
         */
        "image"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Event emitted when opened/closed
         */
        "onDuetToggle"?: (event: DuetCardCustomEvent<DuetCardToggleEvent>) => void;
        /**
          * If the card is collapsible, this property controls whether the card is open or closed.
         */
        "open"?: boolean;
        /**
          * The padding for the card. Please note that the card padding values don’t directly translate to similar space token names, but instead the card uses it’s own derived defaults.
         */
        "padding"?: DuetCardPadding;
        /**
          * Additional content for the card heading. If empty, both heading and collapse functionality will be hidden.
         */
        "secondaryHeading"?: string;
        /**
          * Breakpoint used to remove shadow around card. These match to similar media query tokens: $media-query-small and $media-query-medium.
         */
        "shadowBreakpoint"?: DuetBreakpoints;
        /**
          * Theme of the card.
         */
        "theme"?: DuetTheme;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Style variation of the card.
         */
        "variation"?: DuetCardVariation;
    }
    interface DuetCheckbox {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the checkbox.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * Control the tabindex of checkbox. In most cases this should never be used! It exists only for Duet’s internal needs.
         */
        "accessibleIndex"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Indicates the id of a component owned by the checkbox.
         */
        "accessibleOwns"?: string;
        /**
          * Aria selected
         */
        "accessibleSelected"?: string;
        /**
          * Check state of the checkbox.
         */
        "checked"?: boolean;
        /**
          * Makes the checkbox component disabled. This prevents users from being able to interact with the checkbox, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Adds a unique identifier for the checkbox.
         */
        "identifier"?: string;
        /**
          * Label for the checkbox
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Name of the checkbox.
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onDuetBlur"?: (event: DuetCheckboxCustomEvent<DuetCheckboxEvent>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onDuetChange"?: (event: DuetCheckboxCustomEvent<DuetCheckboxEvent>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onDuetFocus"?: (event: DuetCheckboxCustomEvent<DuetCheckboxEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is required for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role"?: string;
        /**
          * Theme of the checkbox.
         */
        "theme"?: DuetTheme;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the checked property for that.
         */
        "value"?: string;
    }
    interface DuetCheckmark {
        /**
          * Checked
         */
        "center"?: boolean;
        /**
          * Checked
         */
        "checked"?: boolean;
        /**
          * Checked
         */
        "presentationOnly"?: boolean;
        /**
          * Theme
         */
        "theme"?: DuetTheme;
        /**
          * Type
         */
        "type"?: DuetChoiceType;
    }
    interface DuetChoice {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the choice. if this is set to an empty string it will prevent screenreaders from flowing to a collapsible content and can be used as an escape hatch if that behaviour is undesired.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * Accessible label that is read for screen reader users in the info toggle trigger button. Not visible for normal users.
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelInfoButton"?: string;
        /**
          * Property to change accessibleLabelInfoButton defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelInfoButton when needed
         */
        "accessibleLabelInfoButtonDefaults"?: DuetLangObject | string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Indicates the id of a component owned by the choice.
         */
        "accessibleOwns"?: string;
        /**
          * Additional caption to show inside the label of the choice button.
         */
        "caption"?: string;
        /**
          * Checked state of the choice button.
         */
        "checked"?: boolean;
        /**
          * Makes the choice button open a new section underneath it when clicked or tapped. This new section can be used to show more options related to this choice. Please note that this feature can’t be used together with the "info" functionality and that it only accepts plain dom nodes (no shadow dom elements such as duet-paragraph can be used as this will break accessibility)
         */
        "collapsible"?: boolean;
        /**
          * Makes the choice component disabled. This prevents users from being able to interact with the choice, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Expands the choice button to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Icon to display to the left of the choice button label.
         */
        "icon"?: string;
        /**
          * Adds a unique identifier for the choice button.
         */
        "identifier"?: string;
        /**
          * Hint text to display before the user types into the date picker input.
          * @default { fi: "Lisätietoja vaihtoehdosta", en: "More information about", sv: "Mera information om", }
         */
        "infoLabel"?: string;
        /**
          * Placeholder defaults
          * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
         */
        "infoLabelDefaults"?: DuetLangObject | string;
        /**
          * Label for the choice button.
         */
        "label"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Name attribute of the html input that the Choice component controls.
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onDuetBlur"?: (event: DuetChoiceCustomEvent<DuetChoiceEvent>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onDuetChange"?: (event: DuetChoiceCustomEvent<DuetChoiceEvent>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onDuetFocus"?: (event: DuetChoiceCustomEvent<DuetChoiceEvent>) => void;
        /**
          * Controls the padding of the component.
         */
        "padding"?: DuetPadding;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Theme of the choice.
         */
        "theme"?: DuetTheme;
        /**
          * Type of the choice button. You can set the type of the choice to be either “radio” or “checkbox”. Depending on this selection we convey the selection type to assistive technologies as well. When type “radio” is chosen it is required to place the choices inside Choice Group component.
         */
        "type"?: DuetChoiceType;
        /**
          * The value of the html input that the Choice component controls.
         */
        "value"?: string;
    }
    interface DuetChoiceGroup {
        /**
          * Switch the breakpoint used to trigger the content stacking. These match to similar media query tokens eg.: $media-query-small, $media-query-medium.
         */
        "breakpoint"?: DuetChoiceGroupBreakpoint;
        /**
          * Additional caption to show inside the label of the choice group.
         */
        "caption"?: string;
        /**
          * Direction of the choice group.
         */
        "direction"?: DuetDirection;
        /**
          * Determines, whether the control is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Display choice group in error state along with an error message.
         */
        "error"?: string;
        /**
          * Legend displayed for the choice buttons in this group.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Name for the choice buttons within this group. **This must be unique amongst all other inputs.**
         */
        "name"?: string;
        /**
          * Enable or disable the automatic responsive behaviour of the choice group component when horizontal setting is used. Setting this option to "true" makes sure that contents are stacked vertically on mobile.
         */
        "responsive"?: boolean;
        /**
          * Theme of the choice group.
         */
        "theme"?: DuetTheme;
        /**
          * Tooltip to display next to the label of the choice group.
         */
        "tooltip"?: string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection"?: DuetTooltipDirection;
        /**
          * The value of the selected choice button.
         */
        "value"?: string;
    }
    interface DuetCollapsible {
        /**
          * Adds accessible label for the collapsible that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Centers heading inside its container
         */
        "centerHeading"?: boolean;
        /**
          * The content for the collapsible heading.
         */
        "heading"?: string;
        /**
          * The actual heading level used for the heading in html markup. This setting exists for accessibility reasons. It doesn’t change the style visually. only variations of h1-h6 area accepted
         */
        "headingLevel"?: DuetHeadingLevel | undefined;
        /**
          * Custom headingSize to be used for font size of heading, as a design token entered in kebab-case x-small -> font-size-x-small. Example: # 12px (0.75rem)  ------  +2px   (x-small) # 14px (0.875rem) ------  +2px   (small) # 16px (1rem)     ------  +2px   (medium) # 20px (1.25rem)  ------  +4px   (large) # 24px (1.5rem)   ------  +4px   (x-large) # 36px (2.25rem)  ------  +12px  (xx-large) # 48px (3rem)     ------  +12px  (xxx-large) # 72px (4.5rem)   ------  +24px  (xxxx-large)
         */
        "headingSize"?: DuetCollapsibleHeadingFontSize;
        /**
          * The font weight of the heading
         */
        "headingWeight"?: DuetCollapsibleWeight;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Event emitted when opened/closed
         */
        "onDuetToggle"?: (event: DuetCollapsibleCustomEvent<DuetCollapsibleToggleEvent>) => void;
        /**
          * Is the component expanded or collapsed.
         */
        "open"?: boolean;
        /**
          * Theme of the collapsible.
         */
        "theme"?: DuetTheme;
    }
    interface DuetCombobox {
        /**
          * Placeholder defaults
          * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
         */
        "accessibleLabelDefaults"?: DuetLangObject | string;
        /**
          * Hint text to display before the user types into the date picker input.
          * @default { heading: "Valitse:", item: "{0}, ({1}/{2})", itemFiltered: "{0}, ({1}/{2} - {3} suodatettu" }
         */
        "accessibleLabels"?: Record<string, string>;
        /**
          * Defines if filtering of items should be done by includes or startsWith
         */
        "filterType"?: "includes" | "startsWith";
        /**
          * Force the user to make a selection (typing things in the input field will only be used for list search)
         */
        "force"?: boolean;
        /**
          * A hook to overwrite how the values are displayed in the input field after a User select an item
          * @example (item) => `${item.name} (${item.value})`
          * @default undefined
         */
        "formatter"?: (item: DuetComboboxItem) => string;
        /**
          * Array of item objects.
         */
        "items"?: any;
        /**
          * Defines minimum number of characters that must be given to show search results
         */
        "minCharacters"?: number;
        /**
          * Emitted when selected item changed.
         */
        "onDuetChange"?: (event: DuetComboboxCustomEvent<DuetComboboxEvent>) => void;
        /**
          * Defines if items list should always open after clicking on input
         */
        "openListOnClick"?: boolean;
        /**
          * Theme of the combobox.
         */
        "theme"?: DuetTheme;
        /**
          * Value of selected item/s
         */
        "value"?: string;
    }
    interface DuetContactCard {
        /**
          * Button icon.
         */
        "buttonIcon"?: DuetIconName;
        /**
          * Button text.
         */
        "buttonText"?: string;
        /**
          * Button url.
         */
        "buttonUrl"?: string;
        /**
          * Description.
         */
        "description"?: string;
        /**
          * Email.
         */
        "email"?: string;
        /**
          * Image.
         */
        "image"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Name.
         */
        "name"?: string;
        /**
          * Phone.
         */
        "phone"?: string;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetCookieConsent {
        /**
          * Adds accessible label for the cookie consent ok button.
         */
        "accessibleLabel"?: string;
        /**
          * Emitted when the consent button has been clicked.
         */
        "onDuetCookieConsent"?: (event: DuetCookieConsentCustomEvent<DuetCookieConsentEvent>) => void;
        /**
          * Theme of the cookie consent banner.
         */
        "theme"?: DuetTheme;
    }
    interface DuetDatePicker {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns"?: string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information.
         */
        "caption"?: string;
        /**
          * Forces the opening direction of the calendar modal to be always left or right. This setting can be useful when the input is smaller than the opening date picker would be as by default the picker always opens towards right.
         */
        "direction"?: DuetDatePickerDirection;
        /**
          * Makes the date picker input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * If form input field has a placeholder text, and user types anything (causing the text to dissapear), settings this to true will "echo" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)
         */
        "echoPlaceholder"?: boolean;
        /**
          * Display the date picker input in error state along with an error message.
         */
        "error"?: string;
        /**
          * Expands the date picker input to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Adds a unique identifier for the date picker input.
         */
        "identifier"?: string;
        /**
          * Increment to add to years, defaults to 10 for simplicity, if you need a larger selectionspace you can set it to 100
         */
        "incrementYears"?: number;
        /**
          * Label for the date picker input.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * The currently active language. This setting changes the month/year/day. names and button labels as well as all screen reader labels.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing.
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the min property.
         */
        "max"?: string;
        /**
          * Minimum date allowed to be picked. Must be in IS0-8601 format: YYYY-MM-DD. This setting can be used alone or together with the max property.
         */
        "min"?: string;
        /**
          * Name of the date picker input.
         */
        "name"?: string;
        /**
          * Event emitted the date picker input is blurred.
         */
        "onDuetBlur"?: (event: DuetDatePickerCustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * Event emitted when a date is selected.
         */
        "onDuetChange"?: (event: DuetDatePickerCustomEvent<DuetDatePickerChangeEvent>) => void;
        /**
          * Event emitted the date picker input is focused.
         */
        "onDuetFocus"?: (event: DuetDatePickerCustomEvent<DuetDatePickerFocusEvent>) => void;
        /**
          * Hint text to display before the user types into the date picker input.
          * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
         */
        "placeholder"?: string;
        /**
          * Placeholder defaults.
          * @default { fi: "pp.kk.vvvv", en: "dd.mm.yyyy", sv: "dd.mm.åååå" }
         */
        "placeholderDefaults"?: DuetLangObject | string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the date picker input.
         */
        "role"?: string;
        /**
          * Theme of the component.
         */
        "theme"?: DuetTheme;
        /**
          * Tooltip to display next to the label of the date picker input.
         */
        "tooltip"?: string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection"?: DuetTooltipDirection;
        /**
          * This offers information relating to the current validity of the component. It follow as closely as possible the behaviour of the native date input. Useful properties to inspect are badInput, valueMissing, rangeOverflow, rangeUnderflow. **This property should be treated as read only**.
         */
        "validity"?: ValidityState;
        /**
          * Date value. Must be in IS0-8601 format: YYYY-MM-DD
         */
        "value"?: string;
    }
    interface DuetDivider {
        /**
          * Custom color, as a design token entered in camelCase or kebab-case. Example: "color-primary".
         */
        "color"?: DuetColor;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetDividerMargin;
        /**
          * Theme of the divider.
         */
        "theme"?: DuetTheme;
    }
    interface DuetEditableTable {
        /**
          * Exposes the aria role for optimizing accessibility.
         */
        "accessibleRole"?: string;
        /**
          * Define actions for all items in a table An alternative to inline HTML table. required for Sortable tables
          * @default undefined
         */
        "actions"?: DuetEditableTableActions;
        /**
          * Duet-table: By default the table is responsive - it will be flattened at narrow viewport widths. This prop controls the breakpoint at which the table should be rendered as a _regular_ table. Set to "none" to disable the responsive functionality. Set to "none-scrollable" to disable responsive functionality _and_ allow horizontal scrolling - this is useful for comparison tables where it's important to maintain column and row layout.
         */
        "breakpoint"?: DuetTableBreakpoint;
        /**
          * Define columns for a table An alternative to inline HTML table. required for Sortable tables
          * @default undefined
         */
        "columns"?: DuetEditableTableColumns;
        /**
          * Optional id that get passed to the table and used to setup ::parts
         */
        "groupId"?: string;
        /**
          * Hide a thead section visually. The content is still available to screen readers.
         */
        "hideHeadVisually"?: boolean;
        /**
          * Duet-table: margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Event emitted when table is sortable and a header item is clicked/enter is pressed
         */
        "onDuetMenuClick"?: (event: DuetEditableTableCustomEvent<DuetTableMenuEvent>) => void;
        /**
          * Event emitted when table is sortable and a header item is clicked/enter is pressed
         */
        "onDuetTableToggle"?: (event: DuetEditableTableCustomEvent<DuetTableToggleEvent>) => void;
        /**
          * Define rows for a table An alternative to inline HTML table. required for Sortable tables
          * @default undefined
         */
        "rows"?: DuetEditableTableRows;
        /**
          * Controls whether the table is sortable by headers
         */
        "sortable"?: boolean;
        /**
          * Duet-table: Controls whether the table has a sticky header. Sticky headers are not compatible with breakpoint="none-scrollable".
         */
        "sticky"?: boolean;
        /**
          * Duet-table: Adjust the distance from top of the viewport (in pixels) when the table header becomes sticky.
         */
        "stickyDistance"?: DuetTableStickyDistance;
        /**
          * Theme of the table.
         */
        "theme"?: DuetTheme;
        /**
          * Duet-table: Style variation of the table.
         */
        "variation"?: DuetTableVariant;
    }
    interface DuetEmptyState {
        /**
          * Icon shown in the empty state component.
         */
        "icon"?: DuetIconName;
        /**
          * The size of the empty state message.
         */
        "size"?: DuetEmptyStateSize;
        /**
          * Theme of the empty state component.
         */
        "theme"?: DuetTheme;
    }
    interface DuetFieldset {
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError"?: "off" | "polite" | "assertive";
        /**
          * Additional caption to show next to the label.
         */
        "caption"?: string;
        /**
          * An error message to be shown next to the label.
         */
        "error"?: string;
        /**
          * Label/legend displayed for the fieldset.
         */
        "label": string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Theme of the fieldset.
         */
        "theme"?: DuetTheme;
    }
    interface DuetFooter {
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal"?: string;
        /**
          * Property to change accessibleLabelExternal defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelExternal when needed
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults"?: DuetLangObject | string;
        /**
          * An array of items for the main footer links. Items have to include mandatory "label", "href" and "icon" fields to work. Additionally, you can pass an "id" that is added as an HTML identifier for the anchor tag.
         */
        "items"?: any;
        /**
          * The currently active language. This setting changes the logo to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * URL that the logo link points to.
         */
        "logoHref"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * An array of  items for the small footer menu. Items have to include mandatory "label" and "href" fields to work. Additionally, you can pass an "id" that is added as an HTML identifier for the anchor tag.
         */
        "menu"?: any;
        /**
          * Event raised when an items with an associated analytics ID is clicked. Analytics ID can be accessed via **event.detail.analyticsId**
         */
        "onDuetAnalytics"?: (event: DuetFooterCustomEvent<DuetFooterAnalyticsEvent>) => void;
        /**
          * @deprecated in favour of the more specific events like duetLogoClick. Callback for when a user is about to navigate to another page. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetChange"?: (event: DuetFooterCustomEvent<DuetFooterChangeEvent>) => void;
        /**
          * General event stream for the following events: item: onMouseEnter, onTouchDown; menuItem: onMouseEnter, onTouchDown;. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetEvent"?: (event: DuetFooterCustomEvent<DuetFooterChangeEvent>) => void;
        /**
          * Event raised when the items are clicked. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetItemClick"?: (event: DuetFooterCustomEvent<DuetFooterChangeEvent>) => void;
        /**
          * Event raised when the logo is clicked. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetLogoClick"?: (event: DuetFooterCustomEvent<DuetFooterChangeEvent>) => void;
        /**
          * Event raised when the menu links are clicked. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetMenuClick"?: (event: DuetFooterCustomEvent<DuetFooterChangeEvent>) => void;
        /**
          * Theme of the navigation.
         */
        "theme"?: DuetTheme;
        /**
          * Style variation of the footer.
         */
        "variation"?: DuetFooterVariation;
    }
    interface DuetGrid {
        /**
          * Adjusts the vertical alignment of the grid items, if set to "form_distribute" the grid will try to calculate correct paddings for any duet-input fields inside duet-grid-items, so that they align even when displaying errors.
         */
        "alignment"?: DuetGridAlignment;
        /**
          * Switch the breakpoint used to trigger the content stacking. These match to similar media query tokens: $media-query-small and $media-query-medium.
         */
        "breakpoint"?: DuetGridBreakpoint;
        /**
          * Direction of the grid items.
         */
        "direction"?: DuetDirection;
        /**
          * Adjusts the horizontal distribution of the grid items.
         */
        "distribution"?: DuetGridDistribution;
        /**
          * Adjusts the horizontal alignment of the grid items on mobile (575px and under).
         */
        "mobile"?: DuetGridMobileAlignment;
        /**
          * Enable or disable the automatic responsive behaviour of the grid component. Setting this option to "true" makes sure that contents are stacked vertically on mobile (575px and under).
         */
        "responsive"?: boolean;
        /**
          * Reverse the order of the grid items when horizontal. Usefull when we want the primary item to be on bottom right on desktop, but on top on mobile and the first for screen readers.
         */
        "rowReverse"?: boolean;
    }
    interface DuetGridItem {
        /**
          * Make the grid item fill the remaining available grid space.
         */
        "fill"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Sets the maximum width for the grid item using any valid numeric CSS value. E.g. "300px".
         */
        "maxWidth"?: string;
        /**
          * Sets the minimum width for the grid item using any valid numeric CSS value. E.g. "33.333%".
         */
        "minWidth"?: string;
        /**
          * Theme of the grid item.
         */
        "theme"?: DuetTheme;
    }
    interface DuetHeader {
        /**
          * Adds i18n translations of all internally used textStrings
          * @default { fi: { skipLabel: "Siirry pääsisältöön", changeLanguage: "Vaihda kieltä", activeLanguage: "Suomi valittuna", }, sv: { skipLabel: "Hoppa till huvudinnehåll", changeLanguage: "Ändra Språk", activeLanguage: "Svenska valt", }, en: { skipLabel: "Skip to main content", changeLanguage: "Change language", activeLanguage: "English selected", }, }
         */
        "accessibleI18nLabels"?: I18nText;
        /**
          * Default strings for accessibleI18nLabels
          * @default { fi: { skipLabel: "Siirry pääsisältöön", changeLanguage: "Vaihda kieltä", activeLanguage: "Suomi valittuna", }, sv: { skipLabel: "Hoppa till huvudinnehåll", changeLanguage: "Ändra Språk", activeLanguage: "Svenska valt", }, en: { skipLabel: "Skip to main content", changeLanguage: "Change language", activeLanguage: "English selected", }, }
         */
        "accessibleI18nLabelsDefaults"?: | string
    | Record<DuetLanguage, I18nText>;
        /**
          * Accessible label that is shown for screen reader users in the mobile navigation toggle. Not visible for normal users.
          * @default { fi: "Valikko", sv: "Meny", en: "Menu", }
         */
        "accessibleLabel"?: string;
        /**
          * Property to change accessibleLabel defaults on the component. normally you would handle these strings on an application level and override @accessibleLabel when needed
         */
        "accessibleLabelDefaults"?: DuetLangObject | string;
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal"?: string;
        /**
          * Property to change accessibleLabelExternal defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelExternal when needed
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults"?: DuetLangObject | string;
        /**
          * An object that includes mandatory "label" and "href" fields for the back link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, back link won’t be shown. **NOTE: The back link should be ONLY used in combination with language and logoHref props.**
         */
        "back"?: any;
        /**
          * Label of the contact menu. If empty, contact menu will be hidden. Note: not available in multilevel headers.
         */
        "contact"?: string;
        /**
          * An array of items for the contact menu. "label" and "href" are mandatory. Additionally, you can pass an "id" that is added as an HTML identifier for the element, and pass an "external" flag if the link is to open in a new window.
         */
        "contactItems"?: any;
        /**
          * The href of the current page item that is shown as “active”. Note: not available in multilevel headers.
         */
        "currentHref"?: string;
        /**
          * An array of items for the main navigation. Items have to include mandatory "label" and "href" fields to work. Additionally, you can pass an "id" that is added as an HTML identifier for the element, "active" boolean that makes item active, "badge" boolean to add notification badge next to the item and "items" array consisting of sub items that are allowed up to three levels.
         */
        "items"?: any;
        /**
          * The currently active language. This setting also changes the logo to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * An array of items for the language menu. If empty, the language menu will be hidden. "label", "country" and "href" are mandatory. Additionally you can pass an "id" that is added as an HTML identifier for the element.
         */
        "languageItems"?: any;
        /**
          * URL that the logo link points to.
         */
        "logoHref"?: string;
        /**
          * Event raised when an items with an associated analytics ID is clicked. Analytics ID can be accessed via **event.detail.analyticsId**
         */
        "onDuetAnalytics"?: (event: DuetHeaderCustomEvent<DuetHeaderAnalyticsEvent>) => void;
        /**
          * Event raised when a user has clicked the back button. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetBackClick"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * @deprecated in favour of more specific events like duetLogoClick. Callback for when a user is about to navigate to another page. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetChange"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Event raised when a user has clicked an option from the contact dropdown. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetContactClick"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * General event stream for the following events: item: onMouseEnter, onTouchDown; menuItem: onMouseEnter, onTouchDown;. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetEvent"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Event raised when a user has clicked a menu item. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetItemClick"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Event raised when a user has selected a language from the language dropdown. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetLanguageSelect"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Event raised when a user has clicked the logo. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetLogoClick"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Event raised mobile navigation is toggled. **event.detail.open** shows the current status of the navigation.
         */
        "onDuetMobileNavToggle"?: (event: DuetHeaderCustomEvent<DuetHeaderMobileNavToggleEvent>) => void;
        /**
          * Event for when a user has clicked the search link. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetSearchClick"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Event for when a user has clicked the session link. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetSessionClick"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Event raised when a user has clicked the "skip to content" button. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetSkipClick"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Event raised when a user has clicked the user link. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetUserClick"?: (event: DuetHeaderCustomEvent<DuetHeaderChangeEvent>) => void;
        /**
          * Region that is shown next to the logo. If empty, region will be hidden. Note: not available in multilevel header.
         */
        "region"?: string;
        /**
          * An object that includes mandatory "label" and "href" fields for the search link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, this link won’t be shown.
         */
        "search"?: any;
        /**
          * An object that includes mandatory "label", "href" and "type" fields for the session login/logout link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, this link won’t be shown.
         */
        "session"?: any;
        /**
          * The ID of the element where "skip to content" link should take the user. If empty, the functionality won’t be rendered in the DOM.
         */
        "skipToId"?: string;
        /**
          * Theme of the header.
         */
        "theme"?: DuetTheme;
        /**
          * An object that includes mandatory "label" and "href" fields for the user profile link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, user won’t be shown. Note: not available in multilevel headers.
         */
        "user"?: any;
    }
    interface DuetHeading {
        /**
          * Enable or disable the border underneath the heading, solid will darken the border
         */
        "border"?: boolean | "solid";
        /**
          * Custom color for the heading as a design token entered in camelCase or kebab-case. Example: "color-primary".
         */
        "color"?: DuetColor;
        /**
          * Enable hyphenation for long titles. Useful when there is no control over content e.g. user-generated content.
         */
        "hyphenate"?: boolean;
        /**
          * The actual heading level used in the HTML markup.
         */
        "level"?: DuetHeadingLevel;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Theme of the heading.
         */
        "theme"?: DuetTheme;
        /**
          * Make the visual style mimic a specific heading level. This option allows you to make e.g. h1 visually look like h3, but still keep it h1 in the markup.
         */
        "visualLevel"?: DuetVisualHeadingLevel;
        /**
          * This property allows you to set normal or semibold font weight for all sizes when needed.
         */
        "weight"?: DuetHeadingWeight;
    }
    interface DuetHero {
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal"?: string;
        /**
          * Defaults for accessibleLabelExternal
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults"?: DuetLangObject | string;
        /**
          * An array of items for the main actions. Items have to include mandatory "label", "href" and "icon" fields to work. Additionally, you can pass an "id" that is added as an HTML identifier for the anchor tag.
         */
        "actions"?: any;
        /**
          * An object that includes mandatory "label" and "href" fields for the back link. Additionally, you can pass an "id" that is added as an HTML identifier for the element. If nothing is passed, back link won’t be shown. **NOTE: The back link can be ONLY used in combination with "gray" style variation.**
         */
        "back"?: any;
        /**
          * An object that includes any data you want to pass to the button. This data will be emitted when the button is clicked. If property analyticsId is present, then a separate duetAnalytics event will be emitted.
         */
        "buttonData"?: DuetHeroButtonData;
        /**
          * ID for the button.
         */
        "buttonId"?: string;
        /**
          * Text label shown inside the button. If empty, button will be hidden.
         */
        "buttonLabel"?: string;
        /**
          * URL that the button links to.
         */
        "buttonUrl"?: string;
        /**
          * Icon to display to the left of the heading in gray hero area variation. If empty, icon will be hidden.
         */
        "categoryIcon"?: DuetIconName;
        /**
          * Icon color to use for the category icon that can be used in gray hero area variation.
         */
        "categoryIconColor"?: DuetColor;
        /**
          * The description of the hero area, rendered in a P tag. If empty, description will be hidden.
         */
        "description"?: string;
        /**
          * @deprecated please use heading slot instead. The heading of the hero area, rendered in an H1 tag. P.S. you can control the level of the HTML heading by using “level” prop. If empty, heading will be hidden.
         */
        "heading"?: string;
        /**
          * Icon to display to the left of the button content. If empty, icon will be hidden.
         */
        "icon"?: DuetIconName;
        /**
          * Show icon on the right side of the button content.
         */
        "iconRight"?: boolean;
        /**
          * Icon size for the button.
         */
        "iconSize"?: DuetHeroIconSize;
        /**
          * URL of the image shown inside the hero area. For normal hero areas the width of the displayed image should be 800px. Optimal aspect ratio is 3:2. When using “image” variation of Hero Area the required image size is 1200x1200px (1:1 ratio). If this property is left empty, image will be hidden.
         */
        "image"?: string;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Layout.
         */
        "layout"?: "narrow" | "fluid";
        /**
          * Forces all items in the header to be leftAligned This can be used on mobiles to create leftAligned hero areas that either are only leftaligned on smaller devices or allways leftAligned (you must manually switch this parameter if you need special breakpoints) this nullifies textCenter prop
         */
        "leftAlign"?: boolean;
        /**
          * The level of the heading.
         */
        "level"?: DuetHeadingLevel;
        /**
          * An array of items for the definition list inside hero. Items have to include mandatory "label" and "value" fields to work.
         */
        "listItems"?: any;
        /**
          * Event raised when an items with an associated analytics ID is clicked. Analytics ID can be accessed via **event.detail.analyticsId**
         */
        "onDuetAnalytics"?: (event: DuetHeroCustomEvent<DuetHeroAnalyticsEvent>) => void;
        /**
          * Callback for when an user clicks the hero area's action button. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetClick"?: (event: DuetHeroCustomEvent<DuetHeroClickEvent>) => void;
        /**
          * The headline shown before heading.
         */
        "preHeading"?: string;
        /**
          * The level of the heading. Only usable with campaign, section variations.
         */
        "subHeadingLevel"?: DuetHeadingLevel;
        /**
          * Centers the text in hero area.
         */
        "textCenter"?: boolean;
        /**
          * Theme of the hero area.
         */
        "theme"?: DuetTheme;
        /**
          * Style variation of the hero area.
         */
        "variation"?: DuetHeroVariation;
    }
    interface DuetIcon {
        /**
          * Custom color to be used for a circular background, as a design token entered in camelCase or kebab-case. Using this option the icon will always be resized to $size-icon-medium on mobile viewports. Example: "color-primary".
         */
        "background"?: DuetColor;
        /**
          * Custom color to be used for the icon, as a design token entered in camelCase or kebab-case. Example: "color-primary". This property can also be set to "currentColor" which forces the icon to use the CSS text color of parent element instead. Useful when you want to control the color in stylesheet instead.
         */
        "color"?: DuetColor;
        /**
          * A raw SVG string.
         */
        "icon"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Icon name from Duet to display.
         */
        "name"?: DuetIconName;
        /**
          * Custom color to be used for a circular border and icon outline, as a design token entered in camelCase or kebab-case. Using this option the icon will always be resized to $size-icon-medium on mobile viewports. Example: "color-primary".
         */
        "outline"?: DuetColor;
        /**
          * Whether the icon changes its size responsively or not.
         */
        "responsive"?: boolean;
        /**
          * Shape of the background. Brand follows new designs and currently doesn't support xxx-small size.
         */
        "shape"?: "circle" | "brand" | "brand-rotated";
        /**
          * Icon size. Entered as one of the icon size design tokens.
         */
        "size"?: DuetIconSize;
        /**
          * A URL from which to load an icon.
         */
        "src"?: string;
        /**
          * Theme of the icon. This setting will be overridden when you set the color property
         */
        "theme"?: DuetTheme;
    }
    interface DuetInput {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Indicates what kind of user input completion suggestions are provided.
         */
        "accessibleAutocomplete"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id or a string of space seperated ids of a component(s) that describes the input.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * Expanded state of the element, if needed
         */
        "accessibleExpanded"?: string;
        /**
          * Indicates value of any popup element associated with the input.
         */
        "accessibleHasPopup"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError"?: "off" | "polite" | "assertive";
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns"?: string;
        /**
          * Enable or disable automatic completion by the browser
         */
        "autoComplete"?: string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption"?: string;
        /**
          * If set, the input field will display a clear button that can be accessed with tabbing.
         */
        "clear"?: boolean;
        /**
          * Used internally in Duet to adjust whether this component acts as e.g. number input.
         */
        "component"?: DuetInputComponentType;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the duetChange event after each keystroke.
         */
        "debounce"?: number;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * A regular expression that matches any characters which should be *disallowed*. This differs from `pattern`, as it actively prevents users entering any characters which match the regular expression. e.g. the following will disallow any non-numeric characters `[^0-9]`
         */
        "disallowPattern"?: string;
        /**
          * If form input field has a placeholder text, and user types anything (causing the placeholder text to disappear), settings this to true will "echo" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)
         */
        "echoPlaceholder"?: boolean;
        /**
          * Display the input in error state along with an error message.
         */
        "error"?: string;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Icon to display on the right side (from Duet’s icons). Example: "form-location"
         */
        "icon"?: DuetIconName;
        /**
          * Adds a unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * Label for the input.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Use maxlength to specify the maximum length of the value that can be entered. Please note that this uses native HTML5 pattern validation.
         */
        "maxlength"?: number;
        /**
          * Use minlength to specify the minimum length of the value that can be entered. Please note that this uses native HTML5 pattern validation.
         */
        "minlength"?: number;
        /**
          * Name of the input.
         */
        "name"?: string;
        /**
          * Enable numeric keyboard for the input.
         */
        "numericKeyboard"?: boolean;
        /**
          * Emitted when the input loses focus.
         */
        "onDuetBlur"?: (event: DuetInputCustomEvent<DuetInputEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onDuetChange"?: (event: DuetInputCustomEvent<DuetInputEvent>) => void;
        /**
          * Emitted when the input is cleared.
         */
        "onDuetClear"?: (event: DuetInputCustomEvent<DuetInputEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onDuetFocus"?: (event: DuetInputCustomEvent<DuetInputEvent>) => void;
        /**
          * Emitted when a keyboard input ocurred.
         */
        "onDuetInput"?: (event: DuetInputCustomEvent<DuetInputEvent>) => void;
        /**
          * A regular expression to check the value against. Please note that this uses native HTML5 pattern validation.
         */
        "pattern"?: string;
        /**
          * Hint text to display.
         */
        "placeholder"?: string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role"?: string;
        /**
          * Theme of the input.
         */
        "theme"?: DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip"?: string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection"?: DuetTooltipDirection;
        /**
          * Type of the input.
         */
        "type"?: DuetInputType;
        /**
          * Value of the input.
         */
        "value"?: string;
        /**
          * Variation of button. Use "button" to render a button element next to the input. Use "revealable" to render a button that reveals the password.
         */
        "variation"?: DuetVariationType;
    }
    interface DuetLabel {
        /**
          * ID of the component that the label is labelling.
         */
        "for"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetLabelMargin;
        /**
          * Controls the size of the label.
         */
        "size"?: DuetLabelSize;
        /**
          * Theme of the label.
         */
        "theme"?: DuetTheme;
    }
    interface DuetLayout {
        /**
          * Center align all direct children of this component.
         */
        "center"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Align container vertically in the middle when the space allows it.
         */
        "middle"?: boolean;
        /**
          * Breakpoint used to remove padding. These match to similar media query tokens: $media-query-small and $media-query-medium.
         */
        "paddingBreakpoint"?: DuetBreakpoints;
        /**
          * Makes the sidebar stick to the top of the window when scrolling down.
         */
        "sticky"?: boolean;
        /**
          * Adjust sticky sidebar’s distance to duet navigation component using this property.
         */
        "stickyDistance"?: DuetLayoutStickyDistance;
        /**
          * If set to true, the sidebar position will be adjusted to take tabs inside main content area into account.
         */
        "tabs"?: boolean;
    }
    interface DuetLink {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Adds accessible label for tooltip that is shown in external link (url & external have both been set)
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternal"?: string;
        /**
          * Defaults for accessibleLabelExternal
          * @default {fi: "Avautuu uuteen ikkunaan",sv: "Öppnas i nytt fönster",en: "Opens in a new window"}
         */
        "accessibleLabelExternalDefaults"?: DuetLangObject | string;
        /**
          * Forces URL to open in a new browser tab. Used together with URL prop.
         */
        "external"?: boolean;
        /**
          * Icon to display on the left side of the ink text. (only with variations other than "default")
         */
        "icon"?: DuetIconName;
        /**
          * Adds a unique identifier for the link. Please note that with this particular component this id is added inside Shadow DOM. If you need an id on the html element, use regular id attribute instead.
         */
        "identifier"?: string;
        /**
          * The currently active language. This setting changes the external link accessible label to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Controls the padding of the component (only with variations other than "default")
         */
        "padding"?: DuetPadding;
        /**
          * Initially visually hidden link, which is shown on focus.
         */
        "tabToLink"?: boolean;
        /**
          * Theme of the button.
         */
        "theme"?: DuetTheme;
        /**
          * A destination to link to, rendered in the href attribute of a link.
         */
        "url"?: string;
        /**
          * Style variation of the link.
         */
        "variation"?: DuetLinkVariation;
    }
    interface DuetList {
        /**
          * Switch the breakpoint used to trigger the content stacking. These match to similar media query tokens: $media-query-small and $media-query-large.
         */
        "breakpoint"?: DuetListBreakpoint;
        /**
          * Set the column width of the first column in percentages.
         */
        "labelWidth"?: DuetListLabelWidth;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Adjusts the alignment of the list items on mobile breakpoint.
         */
        "mobile"?: DuetListMobileAlignment;
        /**
          * Controls the padding of the component.
         */
        "padding"?: DuetPadding;
        /**
          * Enable or disable the automatic responsive behaviour of the list component. Setting this option to "true" makes sure that contents are stacked vertically on mobile. When "false" is set, contents are always shown in a single row.
         */
        "responsive"?: boolean;
        /**
          * Theme of the list.
         */
        "theme"?: DuetTheme;
        /**
          * Style variation of the list.
         */
        "variation"?: DuetListVariation;
    }
    interface DuetListItem {
    }
    interface DuetLogo {
        /**
          * Accessible label. Defaults to what is in accessibleLabelDefaults prop.
         */
        "accessibleLabel"?: string;
        /**
          * Default translations for accessible label.
         */
        "accessibleLabelDefaults"?: DuetLangObject;
        /**
          * Where the logo links to.
         */
        "href"?: string;
        /**
          * Use inverse version of the logo (white logo on dark background).
         */
        "inverse"?: boolean;
        /**
          * The language of the logo.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Size variation of the logo.
         */
        "size"?: DuetLogoSize;
        /**
          * Theme of the logo.
         */
        "theme"?: DuetTheme;
    }
    interface DuetMenuBar {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Logo.
         */
        "logo"?: boolean;
        /**
          * Logo href.
         */
        "logoHref"?: string;
        /**
          * Logo link accessible label.
         */
        "logoLinkAccessibleLabel"?: string;
        /**
          * General event stream for the following events: logoClick You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetEvent"?: (event: DuetMenuBarCustomEvent<DuetMenuBarChangeEvent>) => void;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetMenuBarButton {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this property to add an aria-controls attribute to the button. Use the attribute to point to the unique id of the content that the button manages.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the button.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * If a button expands or collapses adjacent content, then use the ariaExpanded prop to add the aria-expanded attribute to the button. Set the value to convey the current expanded (true) or collapsed (false) state of the content.
         */
        "accessibleExpanded"?: boolean;
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Indicates the id of a component owned by the button.
         */
        "accessibleOwns"?: string;
        /**
          * Use this property to add an aria-haspopup attribute to a button, if you are using it as a menu button.
         */
        "accessiblePopup"?: string;
        /**
          * Tells screen reader the element is pressed.
         */
        "accessiblePressed"?: boolean;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetMenuBarDropdown {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetMenuBarDropdownLink {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Href
         */
        "href"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetMenuBarLink {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Href
         */
        "href"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetModal {
        /**
          * Adds accessible label for the close icon that is only shown for screen readers. This property is always required to create an accessibly interface! Swedish translation for this property is “Stäng fönstret”.
          * @default {fi: "Sulje ikkuna", sv: "Stäng fönstret", en: "Close the dialog", }
         */
        "accessibleCloseLabel"?: string;
        /**
          * Defaults for accessibleCloseLabel
          * @default {fi: "Sulje ikkuna", sv: "Stäng fönstret", en: "Close the dialog", }
         */
        "accessibleCloseLabelDefaults"?: DuetLangObject | string;
        /**
          * Indicates the id or a string of space seperated ids of a component(s) that describes the input.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * By default the heading is used as target for aria-labelledby, and it overrides this label. If you wish to skip the heading, you must set this label.
         */
        "accessibleLabel"?: string;
        /**
          * Indicates the id or a string of space seperated ids of a component(s) that labels the input.
         */
        "accessibleLabelledBy"?: string;
        /**
          * Use this property when you need to have the modal dialog initially active.
         */
        "active"?: boolean;
        /**
          * Use this property when you want the modal to close when clicked outside of modal.
         */
        "closeOnBlur"?: boolean;
        /**
          * Custom color to be used for the icon, as a design token entered in camelCase or kebab-case. Example: "primary".
         */
        "color"?: DuetColor;
        /**
          * Size of the modal window's padding.
         */
        "gutterSize"?: DuetModalSize | "none";
        /**
          * Accessible heading displayed in the modal. The modal marks this as the label of the modal when used. This helps screen reader users which is why this is a required property.
         */
        "heading"?: string;
        /**
          * Accessible heading size
         */
        "headingLevel"?: DuetHeadingLevel;
        /**
          * Makes the visual style mimic a specific heading level. This option allows you to make e.g. h1 visually look like h3, but still keep it h1 in the markup.
         */
        "headingVisualLevel"?: DuetVisualHeadingLevel | undefined;
        /**
          * Icon to display above the heading (from Duet’s icons). Example: "form-location"
         */
        "icon"?: DuetIconName;
        /**
          * The currently active language. This setting also changes the logo to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Emitted before the modal is closed. To prevent the modal from actually closing, use ev.detail.originalEvent.preventDefault().
         */
        "onDuetBeforeClose"?: (event: DuetModalCustomEvent<DuetModalCloseEvent>) => void;
        /**
          * Emitted when the modal is closed.
         */
        "onDuetClose"?: (event: DuetModalCustomEvent<any>) => void;
        /**
          * Emitted when the modal is opened.
         */
        "onDuetOpen"?: (event: DuetModalCustomEvent<any>) => void;
        /**
          * Size of the modal window.
         */
        "size"?: DuetModalSize;
        /**
          * Theme of the modal.
         */
        "theme"?: DuetTheme;
    }
    interface DuetMultiselect {
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy"?: string;
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError"?: "off" | "polite" | "assertive";
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption"?: string;
        /**
          * Makes the select component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Display the select in error state along with an error message.
         */
        "error"?: string;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Adds a unique identifier for the select.
         */
        "identifier"?: string;
        /**
          * An array of items to choose from
         */
        "items"?: string | DuetMultiselectItem[];
        /**
          * Label for the select.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Emitted when the select loses focus.
         */
        "onDuetBlur"?: (event: DuetMultiselectCustomEvent<DuetMultiselectEvent>) => void;
        /**
          * Callback for when the value changed.
         */
        "onDuetChange"?: (event: DuetMultiselectCustomEvent<DuetMultiselectEvent>) => void;
        /**
          * Emitted when the select has focus.
         */
        "onDuetFocus"?: (event: DuetMultiselectCustomEvent<DuetMultiselectEvent>) => void;
        /**
          * Hint text to display.
         */
        "placeholder"?: string;
        /**
          * Theme of the select.
         */
        "theme"?: DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip"?: string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection"?: DuetTooltipDirection;
        /**
          * Value of multiselect
         */
        "value"?: DuetMultiselectItem[];
    }
    interface DuetNav {
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetNotification {
        /**
          * Adds accessible label for tooltip that is shown over unread counter
          * @default { en: "Unread", fi: "Lukematon", sv: "Oläst" }
         */
        "accessibleLabelUnread"?: string;
        /**
          * Property to change accessibleLabelUnread defaults on the component. normally you would handle these strings on an application level and override @accessibleLabelUnread when needed
         */
        "accessibleLabelUnreadDefaults"?: DuetLangObject;
        /**
          * The date of the notification.
         */
        "date"?: string;
        /**
          * Should the link open in a new window?
         */
        "external"?: boolean;
        /**
          * Should the notification be visually highlighted?
         */
        "highlight"?: boolean;
        /**
          * The currently active language. Used for announcing unread notifications to screen readers.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Theme of the notification.
         */
        "theme"?: DuetTheme;
        /**
          * The url to open on notification click.
         */
        "url"?: string;
    }
    interface DuetNotificationDrawer {
        /**
          * Adds accessible label for tooltip that is shown for notifications
          * @default {en: "No notifications", fi: "Ei ilmoituksia", sv: "Inga notifikationer"}
         */
        "accessibleLabelNotifications"?: string;
        /**
          * Defaults for accessibleLabelNotifications
          * @default {en: "No notifications", fi: "Ei ilmoituksia", sv: "Inga notifikationer"}
         */
        "accessibleLabelNotificationsDefaults"?: | DuetLangObject
    | string;
        /**
          * Show a badge that indicates something has changed.
         */
        "badge"?: boolean;
        /**
          * Which direction should the drawer open in?
         */
        "direction"?: DuetNotificationDrawerDirection;
        /**
          * Icon to display to the left of the drawer button.
         */
        "icon"?: DuetIconName;
        /**
          * Label for the drawer button.
         */
        "label"?: string;
        /**
          * The currently active language. Used to determine the message displayed when there are no notifications.
         */
        "language"?: DuetLanguage;
        /**
          * Theme of the notification drawer.
         */
        "theme"?: DuetTheme;
    }
    interface DuetNumberInput {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Accessible label for the add button that is read for screen reader users.
          * @default {fi: "Lisää summaan", en: "Add to the amount", sv: "Lägg till beloppet"}
         */
        "accessibleAdd"?: string;
        /**
          * Defaults for accessibleAdd
          * @default {fi: "Lisää summaan", en: "Add to the amount", sv: "Lägg till beloppet"}
         */
        "accessibleAddDefaults"?: DuetLangObject | string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Format of message used to announce current amount when switching between amounts. The string {current} is replaced with the current amount.
          * @default {fi: "{current} euroa valittuna", en: "{current} euros selected", sv: "{current} valda euro"}
         */
        "accessibleLive"?: string;
        /**
          * Defaults for accessibleLive
          * @default {fi: "{current} euroa valittuna", en: "{current} euros selected", sv: "{current} valda euro"}
         */
        "accessibleLiveDefaults"?: DuetLangObject | string;
        /**
          * Disables the aria-live messaging used internally in this component. This could be useful when you want to use custom aria-live messages instead.
         */
        "accessibleLiveEnabled"?: boolean;
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns"?: string;
        /**
          * Accessible label for the subtract button that is read for screen reader users.
          * @default {fi: "Vähennä summasta", en: "Subtract from the amount", sv: "Dra från beloppet"}
         */
        "accessibleSubtract"?: string;
        /**
          * Defaults for accessibleSubtract
          * @default {fi: "Vähennä summasta", en: "Subtract from the amount", sv: "Dra från beloppet"}
         */
        "accessibleSubtractDefaults"?: DuetLangObject | string;
        /**
          * Makes the number input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Display the input in error state along with an error message.
         */
        "error"?: string;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Adds a unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * Label for the number input.
          * @default {fi: "Etiketti", en: "Label", sv: "Märka"}
         */
        "label"?: string;
        /**
          * Defaults for Label
          * @default {fi: "Etiketti", en: "Label", sv: "Märka"}
         */
        "labelDefaults"?: DuetLangObject | string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Locale used to format the entered value.
         */
        "locale"?: DuetLocale;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Maximum value.
         */
        "max"?: number;
        /**
          * Minimum value.
         */
        "min"?: number;
        /**
          * Name of the input.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onDuetBlur"?: (event: DuetNumberInputCustomEvent<DuetNumberInputEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onDuetChange"?: (event: DuetNumberInputCustomEvent<DuetNumberInputEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onDuetFocus"?: (event: DuetNumberInputCustomEvent<DuetNumberInputEvent>) => void;
        /**
          * Emitted when a keyboard input has ocurred.
         */
        "onDuetInput"?: (event: DuetNumberInputCustomEvent<DuetNumberInputEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is required for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role"?: string;
        /**
          * Controls whether or not value gets rounded to the nearest multiple of a step on blur. Set to "false" to disable this behaviour.
         */
        "rounding"?: boolean;
        /**
          * Step amount.
         */
        "step"?: number;
        /**
          * Theme of the input.
         */
        "theme"?: DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip"?: string;
        /**
          * Unit for the number input.
         */
        "unit"?: string;
        /**
          * Value of the input. This is passed as a string since Number Input uses Duet’s Input component internally and we need the value to support spaces and the unit as well.
         */
        "value"?: string;
    }
    interface DuetPageHeading {
        /**
          * Icon.
         */
        "icon"?: DuetIconName;
        /**
          * Layout.
         */
        "layout"?: "narrow" | "fluid";
        /**
          * Theme of the hero area.
         */
        "theme"?: DuetTheme;
    }
    interface DuetPagination {
        /**
          * Described By id
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Default pagination labels
         */
        "accessibleLabels"?: Record<string, string>;
        /**
          * Default pagination labels
         */
        "accessibleLabelsDefaults"?: DuetLangObject;
        /**
          * Used to indicate which dom element with ID this element controls
         */
        "ariaControls"?: string;
        /**
          * The current page
         */
        "current"?: number;
        /**
          * Characters to use for the jump buttons.
         */
        "jumpString"?: string;
        /**
          * Emitted a page selection has been made
         */
        "onDuetPageChange"?: (event: DuetPaginationCustomEvent<DuetPaginationPageEvent>) => void;
        /**
          * The size of the take, when paginating.
         */
        "take"?: number;
        /**
          * Theme of the pagination.
         */
        "theme"?: DuetTheme;
        /**
          * The total size of the paginating data
         */
        "total"?: number;
        /**
          * Variation of the paginator (compact and default supported)
         */
        "variation"?: DuetPaginationVariation;
        /**
          * Amount of visible page numbers to show
         */
        "visibleItems"?: number;
    }
    interface DuetParagraph {
        /**
          * Custom color to be used for text, as a design token entered in camelCase or kebab-case. Example: "color-primary".
         */
        "color"?: DuetColor;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Controls the size of the paragraph.
         */
        "size"?: DuetParagraphSize;
        /**
          * Theme of the paragraph.
         */
        "theme"?: DuetTheme;
        /**
          * Style variation of the paragraph.
         */
        "variation"?: DuetParagraphVariation;
        /**
          * Controls the Font-Weight of the paragraph.
         */
        "weight"?: DuetParagraphWeight;
    }
    interface DuetProgress {
        /**
          * Indicates the id of a component that describes the upload component.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * Indicates the aria-label of the component - this will get combined with an label+uploading when uploading, and label+upload complete when upload is complete
         */
        "accessibleLabel"?: string;
        /**
          * Adds accessible label for upload in progress and upload complete states
          * @default {fi: ["lähetys valmis", "lähetys käynnissä"],sv: ["Uppladdningen är klar", "Uppladdning pågår"], en:  ["completed", "in progress"]}
         */
        "accessibleLabelUpload"?: string;
        /**
          * Defaults for accessibleLabel
         */
        "accessibleLabelUploadDefaults"?: DuetLangObject | string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption"?: string;
        /**
          * Height of progressbar
         */
        "height"?: string;
        /**
          * Progress of the bar, a value from 0-100
         */
        "progress"?: number;
        /**
          * Theme of the input.
         */
        "theme"?: DuetTheme;
    }
    interface DuetPromoCard {
        /**
          * Background color.
         */
        "backgroundColor"?: DuetColor | "";
        /**
          * The actual heading level used in the HTML markup.
         */
        "headingLevel"?: DuetHeadingLevel;
        /**
          * Image. Example image is 512x341;
         */
        "image"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Text color.
         */
        "textColor"?: DuetColor;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetRadio {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the radio.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * Control the tabindex of checkbox. In most cases this should never be used! It exists only for Duet’s internal needs.
         */
        "accessibleIndex"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Indicates the id of a component owned by the radio.
         */
        "accessibleOwns"?: string;
        /**
          * Stops the components from emitting events
         */
        "blockEvents"?: boolean;
        /**
          * Check state of the radio.
         */
        "checked"?: boolean;
        /**
          * Makes the radio component disabled. This prevents users from being able to interact with the radio, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Adds a unique identifier for the radio.
         */
        "identifier"?: string;
        /**
          * Label for the radio.
         */
        "label"?: string;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Name of the radio.
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onDuetBlur"?: (event: DuetRadioCustomEvent<DuetRadioEvent>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onDuetChange"?: (event: DuetRadioCustomEvent<DuetRadioEvent>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onDuetFocus"?: (event: DuetRadioCustomEvent<DuetRadioEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is required for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role"?: string;
        /**
          * Theme of the radio.
         */
        "theme"?: DuetTheme;
        /**
          * The value of the radio input does not mean if it's checked or not, use the checked property for that.
         */
        "value"?: string;
    }
    interface DuetRadioGroup {
        /**
          * Additional caption to show inside the label of the radio group.
         */
        "caption"?: string;
        /**
          * Direction of the radio group.
         */
        "direction"?: DuetDirection;
        /**
          * Determines, whether the control is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Display radio group in error state along with an error message.
         */
        "error"?: string;
        /**
          * Legend displayed for the radio buttons in this group.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Name for the radio buttons within this group. **This must be unique amongst all other inputs.**
         */
        "name"?: string;
        /**
          * Enable or disable the automatic responsive behaviour of the radio group component when horizontal setting is used. Setting this option to "true" makes sure that contents are stacked vertically on mobile.
         */
        "responsive"?: boolean;
        /**
          * Theme of the radio group.
         */
        "theme"?: DuetTheme;
        /**
          * Tooltip to display next to the label of the radio group.
         */
        "tooltip"?: string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection"?: DuetTooltipDirection;
        /**
          * The value of the selected radio button.
         */
        "value"?: string;
    }
    interface DuetRangeSlider {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns"?: string;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the duetChange event after each keystroke.
         */
        "debounce"?: number;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Adds a unique identifier for the input.
         */
        "identifier"?: string;
        /**
          * Label for the range slider.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Locale used to format the entered value.
         */
        "locale"?: DuetLocale;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Maximum value.
         */
        "max"?: number;
        /**
          * Minimum value.
         */
        "min"?: number;
        /**
          * Name of the input.
         */
        "name"?: string;
        /**
          * Emitted when the value has changed.
         */
        "onDuetChange"?: (event: DuetRangeSliderCustomEvent<DuetRangeChangeEvent>) => void;
        /**
          * Emitted when a keyboard input ocurred.
         */
        "onDuetInput"?: (event: DuetRangeSliderCustomEvent<DuetRangeChangeEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Step amount.
         */
        "step"?: number;
        /**
          * Theme of the input.
         */
        "theme"?: DuetTheme;
        /**
          * Unit for the range slider.
         */
        "unit"?: string;
        /**
          * Value of the input.
         */
        "value"?: number;
    }
    interface DuetRangeStepper {
        /**
          * Used to indicate which dom element with ID this element controls
         */
        "ariaControls"?: string;
        /**
          * Default pagination labels
         */
        "ariaLabels"?: Record<string, string>;
        /**
          * Default range stepper labels
         */
        "ariaLabelsDefaults"?: DuetLangObject;
        /**
          * Event emitted when the step heading is clicked.
         */
        "onDuetRangeStepUpdate"?: (event: DuetRangeStepperCustomEvent<DuetRangeStepperUpdateEvent>) => void;
        /**
          * Start value
          * @default 1
         */
        "stepIndex"?: number;
        /**
          * How big is the step
          * @default 50
         */
        "stepSize"?: number;
        /**
          * Theme of the component.
         */
        "theme"?: DuetTheme;
        /**
          * Total of
          * @default undefined
         */
        "total"?: number;
    }
    interface DuetScrollable {
        /**
          * Whether or not include previous and forward buttons. Defaults to true.
         */
        "buttons"?: boolean;
        /**
          * Center the scrollable list. Defaults to false.
         */
        "center"?: boolean;
        /**
          * Boolean to collapse scrollable items into normal flow.
         */
        "collapsed"?: boolean;
        /**
          * Optional identifier to add to buttons in the tab group
         */
        "identifier"?: string;
        /**
          * Selected element
         */
        "selected"?: number;
        /**
          * Theme of duet-tab-scrollable. When used this will override the color setting and use "primary" or "primary-turva" as the color depending on which theme is chosen.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSectionLayout {
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Align container vertically in the middle when the space allows it.
         */
        "middle"?: boolean;
    }
    interface DuetSelect {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy"?: string;
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError"?: "off" | "polite" | "assertive";
        /**
          * Indicates the id of a component owned by the select.
         */
        "accessibleOwns"?: string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption"?: string;
        /**
          * Makes the select component disabled. This prevents users from being able to interact with the select, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * If form input field has a placeholder text, and user types anything (causing the placeholder text to disappear), settings this to true will "echo" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)
         */
        "echoPlaceholder"?: boolean;
        /**
          * Display the select in error state along with an error message.
         */
        "error"?: string;
        /**
          * Expands the input to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Adds a unique identifier for the select.
         */
        "identifier"?: string;
        /**
          * An array of items to choose from
         */
        "items"?: string | DuetSelectItems;
        /**
          * Label for the select.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Name of the select.
         */
        "name"?: string;
        /**
          * Emitted when the select loses focus.
         */
        "onDuetBlur"?: (event: DuetSelectCustomEvent<DuetSelectEvent>) => void;
        /**
          * Callback for when the value changed.
         */
        "onDuetChange"?: (event: DuetSelectCustomEvent<DuetSelectEvent>) => void;
        /**
          * Emitted when the select has focus.
         */
        "onDuetFocus"?: (event: DuetSelectCustomEvent<DuetSelectEvent>) => void;
        /**
          * Hint text to display.
         */
        "placeholder"?: string;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the select.
         */
        "role"?: string;
        /**
          * Theme of the select.
         */
        "theme"?: DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip"?: string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection"?: DuetTooltipDirection;
        /**
          * The selected value of the select
         */
        "value"?: string;
        /**
          * Variation of dropdown. -tiny is used for small numbers / tiny option ranges.
         */
        "variation"?: DuetSelectVariation;
    }
    interface DuetShapedImage {
        /**
          * Adds accessible label for the image that is only shown for screen readers.
         */
        "accessibleLabel"?: string;
        /**
          * Rotation. Note: in 'turva' theme there's no rotation.
          * @default "7"
         */
        "rotation"?: 7 | -7;
        /**
          * A URL from which to load an image.
         */
        "src"?: string;
        /**
          * Theme of the component.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSlideout {
        /**
          * Background color. Use one of the color tokens.
         */
        "backgroundColor"?: DuetColor;
        /**
          * Event raised when the menu has been opened. You can prevent the default browser functionality by calling **event.detail.originalEvent.preventDefault()** inside your listener. Additionally, the passed data is available via **event.detail.data**.
         */
        "onDuetSlideoutEvent"?: (event: DuetSlideoutCustomEvent<DuetSlideoutEventDetails>) => void;
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSlideoutLang {
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSlideoutLink {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Caret
         */
        "caret"?: boolean;
        /**
          * Href
         */
        "href"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Size. Inherit, small, medium or large. Inherit value inherits styles from the value in the underlying slot.
         */
        "size"?: "inherit" | "small" | "medium" | "large";
        /**
          * Language of the link. Use this only for language selection links.
         */
        "targetLanguage"?: "en" | "fi" | "sv";
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSlideoutPanel {
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Background color. Use one of the color tokens.
         */
        "backgroundColor"?: DuetColor;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Size. Small, medium or large.
         */
        "labelSize"?: "small" | "medium" | "large";
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSlideoutPanelDropdown {
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSpacer {
        /**
          * Adjusts the breakpoint where the spacer is shown in. The functionality follows 1:1 the media queries defined in design tokens.
         */
        "breakpoint"?: DuetSpacerBreakpoint;
        /**
          * Direction of the space added.
         */
        "direction"?: DuetDirection;
        /**
          * Size variation of the spacer. Can be any of the spacing tokens.
         */
        "size"?: DuetSpacerSize;
    }
    interface DuetSpinner {
        /**
          * Adds accessible label for the spinner that is only shown for screen readers.
         */
        "accessibleLabel"?: string;
        /**
          * Color of the spinner, as a design token entered in camelCase or kebab-case. Example: "color-primary". This property can also be set to "currentColor" which forces the icon to use the CSS text color of parent element instead. Useful when you want to control the color in stylesheet instead.
         */
        "color"?: DuetColor;
        /**
          * Size variation of the spinner.
         */
        "size"?: DuetSpinnerSize;
        /**
          * Theme of the spinner. When used this will override the color setting and use "primary" or "primary-turva" as the color depending on which theme is chosen.
         */
        "theme"?: DuetTheme;
    }
    interface DuetStep {
        /**
          * Set the heading for the step.
         */
        "heading": string;
        /**
          * Set the heading level used in the HTML markup.
         */
        "headingLevel": DuetHeadingLevel;
        /**
          * Event emitted when the step heading is clicked.
         */
        "onDuetStepClick"?: (event: DuetStepCustomEvent<DuetStepClickEvent>) => void;
        /**
          * Theme of the component.
         */
        "theme"?: DuetTheme;
    }
    interface DuetStepper {
        /**
          * Format of message used to announce current step when navigating between steps. The string {current} is replaced with current the step number. The string {total} is replaced with the total number of steps.
         */
        "accessibleLive"?: string;
        /**
          * Controls whether navigation back to previous steps is allowed or not.
         */
        "backDisabled"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Event emitted when the current step is changed. Can be cancelled to prevent the change.
         */
        "onDuetStepChange"?: (event: DuetStepperCustomEvent<DuetStepChangeEvent>) => void;
        /**
          * The index of the current step.
         */
        "selected"?: number;
        /**
          * Theme of the component.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSubmenuBar {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSubmenuBarDropdown {
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSubmenuBarDropdownLink {
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Caret
         */
        "caret"?: boolean;
        /**
          * Highlight
         */
        "highlight"?: boolean;
        /**
          * Href
         */
        "href"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetSubmenuBarLink {
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Href
         */
        "href"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetTab {
        /**
          * String for AccessibleLabel
          * @default null
         */
        "accessibleDescription"?: string;
        /**
          * Defaults for AccessibleLabel
          * @default null
         */
        "accessibleDescriptionDefault"?: DuetLangObject | string;
        /**
          * Caption for the tab.
         */
        "caption"?: string;
        /**
          * Label for the tab.
         */
        "label"?: string;
        /**
          * Selected state of the tab.
         */
        "selected"?: boolean;
    }
    interface DuetTabGroup {
        /**
          * Aria label for the entire tab-group
         */
        "accessibleLabel"?: string;
        /**
          * Whether the tab-group collapses to a select dropwdown in minor breakpoints
         */
        "collapses"?: boolean;
        /**
          * Optional identifier to add to buttons in the tab group
         */
        "identifier"?: string;
        /**
          * Label for the select element which gets shown on mobile.
          * @default {fi: "Valitse", en: "Choose", sv: "Välja"}
         */
        "label"?: string;
        /**
          * Defaults for Label
          * @default {fi: "Valitse", en: "Choose", sv: "Välja"}
         */
        "labelDefaults"?: DuetLangObject | string;
        /**
          * Determines whether the label for the select element shown on mobile is visually hidden.
         */
        "labelHidden"?: boolean;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * @deprecated in favour of more specific duetTabChange event. Callback for when the value changed.
         */
        "onDuetChange"?: (event: DuetTabGroupCustomEvent<DuetTabGroupEvent>) => void;
        /**
          * Event raised when the selected tab is changed
         */
        "onDuetTabChange"?: (event: DuetTabGroupCustomEvent<DuetTabGroupEvent>) => void;
        /**
          * Event raised when new tab is clicked and "tabChangeConfirm" property is set to true
         */
        "onDuetTabChangeRequested"?: (event: DuetTabGroupCustomEvent<DuetTabGroupEvent>) => void;
        /**
          * Controls the padding of the component.
         */
        "padding"?: DuetPadding;
        /**
          * Controls whether the tab-group should scroll (by inflection this will disable collapsing to select box on small screens), if this is a number instead of true it will be used as "amount of items to scroll"
         */
        "scrolls"?: boolean;
        /**
          * Controls if tab content should have tab index and be accessible by pressing tab
         */
        "setTabIndex"?: boolean;
        /**
          * If this property is set to true, tab won't change immediately after clicking it. Component will emit "duetTabChangeRequested" event, and it needs to be handled manually in order to change tab.
         */
        "tabChangeConfirm"?: boolean;
        /**
          * Theme of the component.
         */
        "theme"?: DuetTheme;
        /**
          * Style variation of the tab group.
         */
        "variation"?: DuetTabVariation;
    }
    interface DuetTable {
        /**
          * By default the table is responsive - it will be flattened at narrow viewport widths. This prop controls the breakpoint at which the table should be rendered as a _regular_ table. Set to "none" to disable the responsive functionality. Set to "none-scrollable" to disable responsive functionality _and_ allow horizontal scrolling - this is useful for comparison tables where it's important to maintain column and row layout.
         */
        "breakpoint"?: DuetTableBreakpoint;
        /**
          * Hide a thead section visually. The content is still available to screen readers.
         */
        "hideHeadVisually"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Controls whether the table has a sticky header. Sticky headers are not compatible with breakpoint="none-scrollable".
         */
        "sticky"?: boolean;
        /**
          * Adjust the distance from top of the viewport (in pixels) when the table header becomes sticky.
         */
        "stickyDistance"?: DuetTableStickyDistance;
        /**
          * Theme of the table.
         */
        "theme"?: DuetTheme;
        /**
          * Style variation of the table.
         */
        "variation"?: DuetTableVariant;
    }
    interface DuetTextarea {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Indicates what kind of user input completion suggestions are provided.
         */
        "accessibleAutocomplete"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the input.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * The aria-live attribute for the error message. When the input is validated on blur, use "off", as using "polite" or "assertive" makes the screen reader read the error message twice. When the input is validated on submit, use "polite", as "off" would leave the messages unread by screen readers. Use "assertive" only in those rare cases when "polite" would leave the error message unread by screen readers.
         */
        "accessibleLiveError"?: "off" | "polite" | "assertive";
        /**
          * Indicates the id of a component owned by the textarea.
         */
        "accessibleOwns"?: string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption"?: string;
        /**
          * Display character counter. Must be used in conjunction with **maxlength** and **counterLabel** properties.
         */
        "counter"?: boolean;
        /**
          * Accessible label for character counter. Must be used in conjunction with **counter** property.
         */
        "counterLabel"?: string;
        /**
          * Makes the textarea component disabled. This prevents users from being able to interact with the textarea, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * A regular expression that matches any characters which should be *disallowed*. This differs from `pattern`, as it actively prevents users entering any characters which match the regular expression. e.g. the following will disallow any non-numeric characters `[^0-9]`
         */
        "disallowPattern"?: string;
        /**
          * If form input field has a placeholder text, and user types anything (causing the text to dissapear), settings this to true will "echo" it into the caption slot - this option will be false by default for the next few versions, but will eventually be true by default (scheduled for 4.30.0)
         */
        "echoPlaceholder"?: boolean;
        /**
          * Display the textarea in error state along with an error message.
         */
        "error"?: string;
        /**
          * Expands the textarea to fill 100% of the container width.
         */
        "expand"?: boolean;
        /**
          * Adds a unique identifier for the textarea.
         */
        "identifier"?: string;
        /**
          * Label for the textarea.
         */
        "label"?: string;
        /**
          * Visually hide the label, but still show it to screen readers.
         */
        "labelHidden"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Use maxlength to specify the maximum length of the value that can be entered. Please note that this uses native HTML5 pattern validation.
         */
        "maxlength"?: number;
        /**
          * Use minlength to specify the minimum length of the value that can be entered. Please note that this uses native HTML5 pattern validation.
         */
        "minlength"?: number;
        /**
          * Name of the textarea.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onDuetBlur"?: (event: DuetTextareaCustomEvent<DuetTextareaEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onDuetChange"?: (event: DuetTextareaCustomEvent<DuetTextareaEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onDuetFocus"?: (event: DuetTextareaCustomEvent<DuetTextareaEvent>) => void;
        /**
          * Emitted when a keyboard input ocurred.
         */
        "onDuetInput"?: (event: DuetTextareaCustomEvent<DuetTextareaEvent>) => void;
        /**
          * Hint text to display.
         */
        "placeholder"?: string;
        /**
          * Set whether the textarea is required or not. Please note that this is required for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role"?: string;
        /**
          * Theme of the textarea.
         */
        "theme"?: DuetTheme;
        /**
          * Tooltip to display next to the label of the input.
         */
        "tooltip"?: string;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "tooltipDirection"?: DuetTooltipDirection;
        /**
          * Value of the textarea.
         */
        "value"?: string;
    }
    interface DuetToggle {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the toggle.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Aria description the button
         */
        "accessibleDescription"?: string;
        /**
          * Aria Details of the component
         */
        "accessibleDetails"?: string;
        /**
          * String of id's that indicate alternative labels elements
         */
        "accessibleLabelledBy"?: string;
        /**
          * Indicates the id of a component owned by the toggle.
         */
        "accessibleOwns"?: string;
        /**
          * Check state of the checkbox.
         */
        "checked"?: boolean;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the input, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Adds a unique identifier for the checkbox.
         */
        "identifier"?: string;
        /**
          * Label for the toggle.
         */
        "label"?: string;
        /**
          * Position of the label
         */
        "labelPosition"?: "top" | "right" | "left";
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Name of the checkbox.
         */
        "name"?: string;
        /**
          * Emitted when the checked property has changed.
         */
        "onDuetChange"?: (event: DuetToggleCustomEvent<DuetToggleChangeEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * Defines a specific role attribute for the input.
         */
        "role"?: string;
        /**
          * Theme of the card.
         */
        "theme"?: DuetTheme;
        /**
          * The value of the checkbox does not mean if it's checked or not, use the checked property for that.
         */
        "value"?: string;
    }
    interface DuetToolbar {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetToolbarDropdown {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Open
         */
        "open"?: boolean;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetToolbarDropdownLink {
        /**
          * Adds accessible label for the button that is only shown for screen readers. Typically, this label text replaces the visible text on the button for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Href
         */
        "href"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Language of the link. Use this only for language selection links.
         */
        "targetLanguage"?: "en" | "fi" | "sv";
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetToolbarLink {
        /**
          * Adds accessible label for the link that is only shown for screen readers. Typically, this label text replaces the visible text on the link for users who use assistive technology.
         */
        "accessibleLabel"?: string;
        /**
          * Active
         */
        "active"?: boolean;
        /**
          * Href
         */
        "href"?: string;
        /**
          * Icon
         */
        "icon"?: string;
        /**
          * Theme.
         */
        "theme"?: DuetTheme;
    }
    interface DuetTooltip {
        /**
          * Adds accessible label for the close icon that is only shown for screen readers. This property is always required to create an accessibly interface!
          * @default {fi: "Sulje lisätiedot", en: "Close details", sv: "Stäng detaljer"}
         */
        "accessibleCloseLabel"?: string;
        /**
          * Default language strings for the accessibleCloseLabel
          * @default {fi: "Sulje lisätiedot", en: "Close details", sv: "Stäng detaljer"}
         */
        "accessibleCloseLabelDefault"?: DuetLangObject | string;
        /**
          * Adds accessible label for the info icon that is only shown for screen readers. This property is always required to create an accessible interface!
          * @default {fi: "Näytä lisätietoja", en: "See more information", sv: "Se mer information"}
         */
        "accessibleLabel"?: string;
        /**
          * Default language strings for the accessibleLabel
          * @default {fi: "Näytä lisätietoja", en: "See more information", sv: "Se mer information"}
         */
        "accessibleLabelDefault"?: DuetLangObject | string;
        /**
          * Toggle whether the tooltip is initially visible or not. This property should not be used in production in most cases.
         */
        "active"?: boolean;
        /**
          * Adjust the responsive breakpoint where tooltip starts opening towards left.
         */
        "breakpoint"?: DuetTooltipBreakpoint;
        /**
          * With direction setting you can force the tooltip to always open towards left or right instead of automatically determining the direction.
         */
        "direction"?: DuetTooltipDirection;
        /**
          * Label of the tooltip. If used, replaces the accessibleLabel option.
         */
        "label"?: string;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Adjust the horizontal positioning of the tooltip toggle in pixels. Can be a negative value as well. E.g. "-13px".
         */
        "positionHorizontal"?: string;
        /**
          * Adjust the vertical positioning of the tooltip toggle in pixels. Can be a negative value as well. E.g. "-13px".
         */
        "positionVertical"?: string;
        /**
          * Theme of the tooltip.
         */
        "theme"?: DuetTheme;
    }
    interface DuetTray {
        /**
          * Accessible label that is shown for screen reader users in the expandable close toggle. Not visible for normal users.
          * @default {fi: "Sulje", en: "Close", sv: "Stänga"}
         */
        "accessibleCloseLabel"?: string;
        /**
          * Defaults for accessibleCloseLabel
          * @default {fi: "Sulje", en: "Close", sv: "Stänga"}
         */
        "accessibleCloseLabelDefaults"?: DuetLangObject | string;
        /**
          * Accessible label that is shown for screen reader users in the expandable open toggle. Not visible for normal users.
          * @default {fi: "Avaa", en: "Open", sv: "Öppen"}
         */
        "accessibleOpenLabel"?: string;
        /**
          * Defaults for accessibleOpenLabel
          * @default {fi: "Avaa", en: "Open", sv: "Öppen"}
         */
        "accessibleOpenLabelDefaults"?: DuetLangObject | string;
        /**
          * Toggle whether the info panel is visible or not. You can use this property e.g. when pricing information is revealed to the user.
         */
        "active"?: boolean;
        /**
          * Hide the info panel when user scrolls back to the top of the viewport.
         */
        "autoHide"?: boolean;
        /**
          * The currently active language. This setting changes the accessible labels to match the chosen language.
          * @deprecated this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing
          * @default "fi"
         */
        "language"?: DuetLanguage;
        /**
          * Enable or disable the automatic responsive behaviour which makes the info panel hide on larger viewports. Settings this to "false" means that the header panel is visible on all device sizes.
         */
        "responsive"?: boolean;
        /**
          * Theme of the info panel.
         */
        "theme"?: DuetTheme;
    }
    interface DuetUpload {
        /**
          * Indicates the id of a related component’s visually focused element.
         */
        "accessibleActiveDescendant"?: string;
        /**
          * accessible aria-Label of button
         */
        "accessibleButtonLabel"?: string;
        /**
          * Use this prop to add an aria-controls attribute. Use the attribute to indicate the id of a component controlled by this component.
         */
        "accessibleControls"?: string;
        /**
          * Indicates the id of a component that describes the upload component.
         */
        "accessibleDescribedBy"?: string;
        /**
          * Indicates the id of a component owned by the input.
         */
        "accessibleOwns"?: string;
        /**
          * Default actions added to the internally used duet-editable-table
         */
        "actions"?: DuetEditableTableActions1;
        /**
          * Key used to set vertical alignment of action buttons
         */
        "alignment"?: string;
        /**
          * A string of commaseperated file type values that are allowed
          * @example : .pdf,.doc,.docx
         */
        "allowedExtensions"?: string;
        /**
          * A string of commaseperated mime type values that are allowed
          * @example : image/*,application/msword,
         */
        "allowedMimetypes"?: string;
        /**
          * Label of button
          * @default { fi: "Lisää liite", sv: "Lägg till en bilaga", en: "Add an attachment" }
         */
        "buttonLabel"?: string;
        /**
          * Property to change button label defaults on the component.
          * @default { fi: "Lisää liite", sv: "Lägg till en bilaga", en: "Add an attachment", }
         */
        "buttonLabelDefaults"?: DuetLangObject | string;
        /**
          * Caption (underneath label) that can be set as a way of adding extra information
         */
        "caption"?: string;
        /**
          * If true the input caption will be placed below file list and footer
         */
        "captionOnBottom"?: boolean;
        /**
          * If defer-upload is true, duet-upload will not (as recommended) instantly upload files but await a call to uploadPending()
         */
        "deferUpload"?: boolean;
        /**
          * Description for the upload component.
          * @default { en: "You may attach the following filetypes: {filetypes} - as well as the most common video files. You can upload {maxbytestotal} of files at a time, and add up to {maxfiles} attachments at a time each no larger than {maxbytes}.", sv: "Du kan bifoga följande filtyper: {filetypes} - samt de vanligaste videofilerna. Du kan ladda upp {maxbytestotal} av filer åt gången, och lägga till upp till {maxfiles} bilagor åt gången varje inte större än {maxbytes}.", fi: "Voit liittää seuraavat tiedostotyypit: {filetypes} - sekä yleisimmät videotiedostot. Voit lähettää {maxbytestotal} tiedostoa kerrallaan, ja lisätä enintään {maxfiles} liitettä kerrallaan, jokainen enintään {maxbytes} kokoisena.", }
         */
        "description"?: string;
        /**
          * Property to change descriptionDefaults defaults on the component.
          * @default { en: "You may attach the following filetypes: {filetypes} - as well as the most common video files. You can upload {maxbytestotal} of files at a time, and add up to {maxfiles} attachments at a time each no larger than {maxbytes}.", sv: "Du kan bifoga följande filtyper: {filetypes} - samt de vanligaste videofilerna. Du kan ladda upp {maxbytestotal} av filer åt gången, och lägga till upp till {maxfiles} bilagor åt gången varje inte större än {maxbytes}.", fi: "Voit liittää seuraavat tiedostotyypit: {filetypes} - sekä yleisimmät videotiedostot. Voit lähettää {maxbytestotal} tiedostoa kerrallaan, ja lisätä enintään {maxfiles} liitettä kerrallaan, jokainen enintään {maxbytes} kokoisena.", }
         */
        "descriptionDefaults"?: DuetLangObject | string;
        /**
          * Makes the input component disabled. This prevents users from being able to interact with the upload component, and conveys its inactive state to assistive technologies.
         */
        "disabled"?: boolean;
        /**
          * Display the input in error state along with an error message.
         */
        "error"?: string;
        /**
          * Default errorcodes used by the component, modifiable via javascript
         */
        "errorCodes"?: DuetUploadErrorCode[];
        /**
          * If external is set to true, the upload component will not actually upload the files, but only keep states it will be up to you to handle the upload and return progress information to the upload-component
         */
        "external"?: boolean;
        /**
          * Id of external uploadButton of the input used for setting accessibility attributes.
         */
        "externalUploadButtonId"?: string;
        /**
          * Label for the filelist's empty state.
          * @default { fi: "Ei vielä lisättyjä tiedostoja.",sv: "Inga filer har lagts till ännu.",en: "No files added yet."}
         */
        "fileListEmpty"?: string;
        /**
          * Defaults for the filelist's empty state.
          * @default { fi: "Ei vielä lisättyjä tiedostoja.", sv: "Inga filer har lagts till ännu.", en: "No files added yet.", }
         */
        "fileListEmptyDefaults"?: DuetLangObject | string;
        /**
          * Map of string that contain list of uploaded files.
         */
        "files"?: StringMap;
        /**
          * Array of group names that you want the editable table to use to display files
          * @required 
          * @example [{ id: "success", label: {fi: "Onnistunut", en: "Success", sv: "Alt klart", }}]
         */
        "groups"?: DuetUploadTableGroupName[];
        /**
          * If set the upload component will not display an upload button, you will have to create one yourself and call the exposed method startUpload to open the upload dialog
         */
        "hideButton"?: boolean;
        /**
          * Visually hides the groups labels in the editable table list used to display the list of files
         */
        "hideGroups"?: boolean;
        /**
          * Use hide-header to hide upload component header and caption (if caption is not on bottom)
         */
        "hideHeader"?: boolean;
        /**
          * Adds a unique identifier for the upload component.
         */
        "identifier"?: string;
        /**
          * Label for the input.
          * @default { fi: "Lisää liite",sv: "Lägg till en bilaga",en: "Add attachments"}
         */
        "label"?: string;
        /**
          * Property to change labelDefaults defaults on the component. normally you would handle these strings on an application level and override @label when needed
          * @default { fi: "Lisää liite",sv: "Lägg till en bilaga",en: "Add attachments"}
         */
        "labelDefaults"?: DuetLangObject | string;
        /**
          * Use limitSelection to enforce the value in allowedExtension & allowedMimetypes when selecting files, by default this is off, setting this to true will limit the users choices to what has been explicitly set
         */
        "limitSelection"?: boolean;
        /**
          * Controls the margin of the component.
         */
        "margin"?: DuetMargin;
        /**
          * Use maxBytes to specify the maximum size in Bytes of a file that can be uploaded.
         */
        "maxBytes"?: number;
        /**
          * Use maxBytesTotal to specify the maximum size in Bytes of All files combined that can be uploaded.
         */
        "maxBytesTotal"?: number;
        /**
          * Use maxFiles to specify the maximum amount of files that can be uploaded
         */
        "maxFiles"?: number;
        /**
          * If internal upload method is used, and this has been set to a function - it will be called with the XHR options before the reqeust is sent, return an updated XHR options object in order to manipulate the request
         */
        "middleware"?: XHRInternalMiddleWare;
        /**
          * Use multiple to allow the user to select multiple files when uploading
         */
        "multiple"?: boolean;
        /**
          * Name of the upload component.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onDuetBlur"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when a user clicks cancel on an upload in progress
         */
        "onDuetCancel"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onDuetChange"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when a user clicks delete to delete an uploaded file, or a file entry with error
         */
        "onDuetDelete"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when the current upload batch finishes
         */
        "onDuetDone"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onDuetFocus"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when the file progress is updated.
         */
        "onDuetProgress"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when the component is finished initializing
         */
        "onDuetReady"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when the current validation state changes internally
         */
        "onDuetState"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Emitted when the user clicks the upload button
         */
        "onDuetUpload"?: (event: DuetUploadCustomEvent<DuetUploadEvent>) => void;
        /**
          * Set whether the input is required or not. Please note that this is necessary for accessible inputs when the user is required to fill them. When using this property you need to also set “novalidate” attribute to your form element to prevent browser from displaying its own validation errors.
         */
        "required"?: boolean;
        /**
          * If enabled the editable-table will display links on successfully uploaded items, this requires the server can respond with link URIs in the correct format and that the files are accessible to the user
         */
        "showLinks"?: boolean;
        /**
          * Use show-uploaded-items-header to show single, generic, header for uploaded items
         */
        "showUploadedItemsHeader"?: boolean;
        /**
          * Property to change the aria upload progress text read aloud by screenreaders
          * @default { fi: { inProgress: "Lähetetään {filesUploaded} lähetettävästä {filesTotal} tiedostosta", inProgressWithErrors: "Lähetetään {filesInProgress} tiedostoa, lähetetty {filesUploaded} lähetettävästä {filesTotal} tiedostosta, {filesWithErrors} tiedostossa on virheitä", done: "Kaikki {filesTotal} tiedostoa lähetetty onnistuneesti", doneWithErrors: "Lataus valmis, {filesUploaded} tiedostoa ladattu onnistuneesti, {filesWithErrors} tiedostossa oli virheitä", files: "tiedostot", file: "tiedosto", }, sv: { inProgress: "Adding {filesUploaded} of {filesTotal}", inProgressWithErrors: "Laddar upp {filesInProgress}, {filesUploaded} uppladdad av {filesTotal}, {filesWithErrors} misslyckades", done: "Alla {filesTotal} har lagts till", doneWithErrors: "Handling slutförd, {filesUploaded} har lagts till, {filesWithErrors} misslyckades", files: "filer", file: "fil", }, en: { inProgress: "Adding {filesUploaded} of {filesTotal}", inProgressWithErrors: "Uploading {filesInProgress}, {filesUploaded} uploaded of {filesTotal}, {filesWithErrors} failed", done: "All {filesTotal} added successfully", doneWithErrors: "Action completed, {filesUploaded} has been added successfully, {filesWithErrors} had errors", files: "tiedostoa", file: "tiedosto", }, }
         */
        "statusLabelDefaults"?: DuetLangObject | string;
        /**
          * Strings used for the status aria-label
         */
        "statusMessageLabel"?: StatusMessage | string;
        /**
          * Theme of the input.
         */
        "theme"?: DuetTheme;
        /**
          * Property to change single uploaded items header label
          * @default { fi: "Ladattu tiedosto.", sv: "Nedladdad fil.", en: "Uploaded file.", }
         */
        "uploadedItemsHeaderLabel"?: DuetLangObject;
        /**
          * Endpoint URI that is capable of receiving the files
         */
        "uri"?: string;
        /**
          * Property to read if the internally used editable-table contains errors or not
         */
        "valid"?: boolean;
        /**
          * Value of the input.
         */
        "value"?: string;
    }
    interface DuetUploadAriaStatus {
        /**
          * Adds accessible label that is read aloud
         */
        "accessibleAriaLive"?: "off" | "polite" | "assertive";
        /**
          * valid file amount
         */
        "inprogress"?: number;
        /**
          * invalid file amount
         */
        "invalid"?: number;
        /**
          * Status labels used in the component
         */
        "statusMessageLabel"?: StatusMessage;
        /**
          * total files
         */
        "total"?: number;
        /**
          * valid file amount
         */
        "valid"?: number;
    }
    interface DuetVisuallyHidden {
    }
    interface IntrinsicElements {
        "duet-action-button": DuetActionButton;
        "duet-alert": DuetAlert;
        "duet-badge": DuetBadge;
        "duet-banner": DuetBanner;
        "duet-breadcrumb": DuetBreadcrumb;
        "duet-breadcrumbs": DuetBreadcrumbs;
        "duet-button": DuetButton;
        "duet-callout": DuetCallout;
        "duet-caption": DuetCaption;
        "duet-card": DuetCard;
        "duet-checkbox": DuetCheckbox;
        "duet-checkmark": DuetCheckmark;
        "duet-choice": DuetChoice;
        "duet-choice-group": DuetChoiceGroup;
        "duet-collapsible": DuetCollapsible;
        "duet-combobox": DuetCombobox;
        "duet-contact-card": DuetContactCard;
        "duet-cookie-consent": DuetCookieConsent;
        "duet-date-picker": DuetDatePicker;
        "duet-divider": DuetDivider;
        "duet-editable-table": DuetEditableTable;
        "duet-empty-state": DuetEmptyState;
        "duet-fieldset": DuetFieldset;
        "duet-footer": DuetFooter;
        "duet-grid": DuetGrid;
        "duet-grid-item": DuetGridItem;
        "duet-header": DuetHeader;
        "duet-heading": DuetHeading;
        "duet-hero": DuetHero;
        "duet-icon": DuetIcon;
        "duet-input": DuetInput;
        "duet-label": DuetLabel;
        "duet-layout": DuetLayout;
        "duet-link": DuetLink;
        "duet-list": DuetList;
        "duet-list-item": DuetListItem;
        "duet-logo": DuetLogo;
        "duet-menu-bar": DuetMenuBar;
        "duet-menu-bar-button": DuetMenuBarButton;
        "duet-menu-bar-dropdown": DuetMenuBarDropdown;
        "duet-menu-bar-dropdown-link": DuetMenuBarDropdownLink;
        "duet-menu-bar-link": DuetMenuBarLink;
        "duet-modal": DuetModal;
        "duet-multiselect": DuetMultiselect;
        "duet-nav": DuetNav;
        "duet-notification": DuetNotification;
        "duet-notification-drawer": DuetNotificationDrawer;
        "duet-number-input": DuetNumberInput;
        "duet-page-heading": DuetPageHeading;
        "duet-pagination": DuetPagination;
        "duet-paragraph": DuetParagraph;
        "duet-progress": DuetProgress;
        "duet-promo-card": DuetPromoCard;
        "duet-radio": DuetRadio;
        "duet-radio-group": DuetRadioGroup;
        "duet-range-slider": DuetRangeSlider;
        "duet-range-stepper": DuetRangeStepper;
        "duet-scrollable": DuetScrollable;
        "duet-section-layout": DuetSectionLayout;
        "duet-select": DuetSelect;
        "duet-shaped-image": DuetShapedImage;
        "duet-slideout": DuetSlideout;
        "duet-slideout-lang": DuetSlideoutLang;
        "duet-slideout-link": DuetSlideoutLink;
        "duet-slideout-panel": DuetSlideoutPanel;
        "duet-slideout-panel-dropdown": DuetSlideoutPanelDropdown;
        "duet-spacer": DuetSpacer;
        "duet-spinner": DuetSpinner;
        "duet-step": DuetStep;
        "duet-stepper": DuetStepper;
        "duet-submenu-bar": DuetSubmenuBar;
        "duet-submenu-bar-dropdown": DuetSubmenuBarDropdown;
        "duet-submenu-bar-dropdown-link": DuetSubmenuBarDropdownLink;
        "duet-submenu-bar-link": DuetSubmenuBarLink;
        "duet-tab": DuetTab;
        "duet-tab-group": DuetTabGroup;
        "duet-table": DuetTable;
        "duet-textarea": DuetTextarea;
        "duet-toggle": DuetToggle;
        "duet-toolbar": DuetToolbar;
        "duet-toolbar-dropdown": DuetToolbarDropdown;
        "duet-toolbar-dropdown-link": DuetToolbarDropdownLink;
        "duet-toolbar-link": DuetToolbarLink;
        "duet-tooltip": DuetTooltip;
        "duet-tray": DuetTray;
        "duet-upload": DuetUpload;
        "duet-upload-aria-status": DuetUploadAriaStatus;
        "duet-visually-hidden": DuetVisuallyHidden;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "duet-action-button": LocalJSX.DuetActionButton & JSXBase.HTMLAttributes<HTMLDuetActionButtonElement>;
            "duet-alert": LocalJSX.DuetAlert & JSXBase.HTMLAttributes<HTMLDuetAlertElement>;
            "duet-badge": LocalJSX.DuetBadge & JSXBase.HTMLAttributes<HTMLDuetBadgeElement>;
            "duet-banner": LocalJSX.DuetBanner & JSXBase.HTMLAttributes<HTMLDuetBannerElement>;
            "duet-breadcrumb": LocalJSX.DuetBreadcrumb & JSXBase.HTMLAttributes<HTMLDuetBreadcrumbElement>;
            "duet-breadcrumbs": LocalJSX.DuetBreadcrumbs & JSXBase.HTMLAttributes<HTMLDuetBreadcrumbsElement>;
            "duet-button": LocalJSX.DuetButton & JSXBase.HTMLAttributes<HTMLDuetButtonElement>;
            "duet-callout": LocalJSX.DuetCallout & JSXBase.HTMLAttributes<HTMLDuetCalloutElement>;
            "duet-caption": LocalJSX.DuetCaption & JSXBase.HTMLAttributes<HTMLDuetCaptionElement>;
            "duet-card": LocalJSX.DuetCard & JSXBase.HTMLAttributes<HTMLDuetCardElement>;
            "duet-checkbox": LocalJSX.DuetCheckbox & JSXBase.HTMLAttributes<HTMLDuetCheckboxElement>;
            "duet-checkmark": LocalJSX.DuetCheckmark & JSXBase.HTMLAttributes<HTMLDuetCheckmarkElement>;
            "duet-choice": LocalJSX.DuetChoice & JSXBase.HTMLAttributes<HTMLDuetChoiceElement>;
            "duet-choice-group": LocalJSX.DuetChoiceGroup & JSXBase.HTMLAttributes<HTMLDuetChoiceGroupElement>;
            "duet-collapsible": LocalJSX.DuetCollapsible & JSXBase.HTMLAttributes<HTMLDuetCollapsibleElement>;
            "duet-combobox": LocalJSX.DuetCombobox & JSXBase.HTMLAttributes<HTMLDuetComboboxElement>;
            "duet-contact-card": LocalJSX.DuetContactCard & JSXBase.HTMLAttributes<HTMLDuetContactCardElement>;
            "duet-cookie-consent": LocalJSX.DuetCookieConsent & JSXBase.HTMLAttributes<HTMLDuetCookieConsentElement>;
            "duet-date-picker": LocalJSX.DuetDatePicker & JSXBase.HTMLAttributes<HTMLDuetDatePickerElement>;
            "duet-divider": LocalJSX.DuetDivider & JSXBase.HTMLAttributes<HTMLDuetDividerElement>;
            "duet-editable-table": LocalJSX.DuetEditableTable & JSXBase.HTMLAttributes<HTMLDuetEditableTableElement>;
            "duet-empty-state": LocalJSX.DuetEmptyState & JSXBase.HTMLAttributes<HTMLDuetEmptyStateElement>;
            "duet-fieldset": LocalJSX.DuetFieldset & JSXBase.HTMLAttributes<HTMLDuetFieldsetElement>;
            "duet-footer": LocalJSX.DuetFooter & JSXBase.HTMLAttributes<HTMLDuetFooterElement>;
            "duet-grid": LocalJSX.DuetGrid & JSXBase.HTMLAttributes<HTMLDuetGridElement>;
            "duet-grid-item": LocalJSX.DuetGridItem & JSXBase.HTMLAttributes<HTMLDuetGridItemElement>;
            "duet-header": LocalJSX.DuetHeader & JSXBase.HTMLAttributes<HTMLDuetHeaderElement>;
            "duet-heading": LocalJSX.DuetHeading & JSXBase.HTMLAttributes<HTMLDuetHeadingElement>;
            "duet-hero": LocalJSX.DuetHero & JSXBase.HTMLAttributes<HTMLDuetHeroElement>;
            "duet-icon": LocalJSX.DuetIcon & JSXBase.HTMLAttributes<HTMLDuetIconElement>;
            "duet-input": LocalJSX.DuetInput & JSXBase.HTMLAttributes<HTMLDuetInputElement>;
            "duet-label": LocalJSX.DuetLabel & JSXBase.HTMLAttributes<HTMLDuetLabelElement>;
            "duet-layout": LocalJSX.DuetLayout & JSXBase.HTMLAttributes<HTMLDuetLayoutElement>;
            "duet-link": LocalJSX.DuetLink & JSXBase.HTMLAttributes<HTMLDuetLinkElement>;
            "duet-list": LocalJSX.DuetList & JSXBase.HTMLAttributes<HTMLDuetListElement>;
            "duet-list-item": LocalJSX.DuetListItem & JSXBase.HTMLAttributes<HTMLDuetListItemElement>;
            "duet-logo": LocalJSX.DuetLogo & JSXBase.HTMLAttributes<HTMLDuetLogoElement>;
            "duet-menu-bar": LocalJSX.DuetMenuBar & JSXBase.HTMLAttributes<HTMLDuetMenuBarElement>;
            "duet-menu-bar-button": LocalJSX.DuetMenuBarButton & JSXBase.HTMLAttributes<HTMLDuetMenuBarButtonElement>;
            "duet-menu-bar-dropdown": LocalJSX.DuetMenuBarDropdown & JSXBase.HTMLAttributes<HTMLDuetMenuBarDropdownElement>;
            "duet-menu-bar-dropdown-link": LocalJSX.DuetMenuBarDropdownLink & JSXBase.HTMLAttributes<HTMLDuetMenuBarDropdownLinkElement>;
            "duet-menu-bar-link": LocalJSX.DuetMenuBarLink & JSXBase.HTMLAttributes<HTMLDuetMenuBarLinkElement>;
            "duet-modal": LocalJSX.DuetModal & JSXBase.HTMLAttributes<HTMLDuetModalElement>;
            "duet-multiselect": LocalJSX.DuetMultiselect & JSXBase.HTMLAttributes<HTMLDuetMultiselectElement>;
            "duet-nav": LocalJSX.DuetNav & JSXBase.HTMLAttributes<HTMLDuetNavElement>;
            "duet-notification": LocalJSX.DuetNotification & JSXBase.HTMLAttributes<HTMLDuetNotificationElement>;
            "duet-notification-drawer": LocalJSX.DuetNotificationDrawer & JSXBase.HTMLAttributes<HTMLDuetNotificationDrawerElement>;
            "duet-number-input": LocalJSX.DuetNumberInput & JSXBase.HTMLAttributes<HTMLDuetNumberInputElement>;
            "duet-page-heading": LocalJSX.DuetPageHeading & JSXBase.HTMLAttributes<HTMLDuetPageHeadingElement>;
            "duet-pagination": LocalJSX.DuetPagination & JSXBase.HTMLAttributes<HTMLDuetPaginationElement>;
            "duet-paragraph": LocalJSX.DuetParagraph & JSXBase.HTMLAttributes<HTMLDuetParagraphElement>;
            "duet-progress": LocalJSX.DuetProgress & JSXBase.HTMLAttributes<HTMLDuetProgressElement>;
            "duet-promo-card": LocalJSX.DuetPromoCard & JSXBase.HTMLAttributes<HTMLDuetPromoCardElement>;
            "duet-radio": LocalJSX.DuetRadio & JSXBase.HTMLAttributes<HTMLDuetRadioElement>;
            "duet-radio-group": LocalJSX.DuetRadioGroup & JSXBase.HTMLAttributes<HTMLDuetRadioGroupElement>;
            "duet-range-slider": LocalJSX.DuetRangeSlider & JSXBase.HTMLAttributes<HTMLDuetRangeSliderElement>;
            "duet-range-stepper": LocalJSX.DuetRangeStepper & JSXBase.HTMLAttributes<HTMLDuetRangeStepperElement>;
            "duet-scrollable": LocalJSX.DuetScrollable & JSXBase.HTMLAttributes<HTMLDuetScrollableElement>;
            "duet-section-layout": LocalJSX.DuetSectionLayout & JSXBase.HTMLAttributes<HTMLDuetSectionLayoutElement>;
            "duet-select": LocalJSX.DuetSelect & JSXBase.HTMLAttributes<HTMLDuetSelectElement>;
            "duet-shaped-image": LocalJSX.DuetShapedImage & JSXBase.HTMLAttributes<HTMLDuetShapedImageElement>;
            "duet-slideout": LocalJSX.DuetSlideout & JSXBase.HTMLAttributes<HTMLDuetSlideoutElement>;
            "duet-slideout-lang": LocalJSX.DuetSlideoutLang & JSXBase.HTMLAttributes<HTMLDuetSlideoutLangElement>;
            "duet-slideout-link": LocalJSX.DuetSlideoutLink & JSXBase.HTMLAttributes<HTMLDuetSlideoutLinkElement>;
            "duet-slideout-panel": LocalJSX.DuetSlideoutPanel & JSXBase.HTMLAttributes<HTMLDuetSlideoutPanelElement>;
            "duet-slideout-panel-dropdown": LocalJSX.DuetSlideoutPanelDropdown & JSXBase.HTMLAttributes<HTMLDuetSlideoutPanelDropdownElement>;
            "duet-spacer": LocalJSX.DuetSpacer & JSXBase.HTMLAttributes<HTMLDuetSpacerElement>;
            "duet-spinner": LocalJSX.DuetSpinner & JSXBase.HTMLAttributes<HTMLDuetSpinnerElement>;
            "duet-step": LocalJSX.DuetStep & JSXBase.HTMLAttributes<HTMLDuetStepElement>;
            "duet-stepper": LocalJSX.DuetStepper & JSXBase.HTMLAttributes<HTMLDuetStepperElement>;
            "duet-submenu-bar": LocalJSX.DuetSubmenuBar & JSXBase.HTMLAttributes<HTMLDuetSubmenuBarElement>;
            "duet-submenu-bar-dropdown": LocalJSX.DuetSubmenuBarDropdown & JSXBase.HTMLAttributes<HTMLDuetSubmenuBarDropdownElement>;
            "duet-submenu-bar-dropdown-link": LocalJSX.DuetSubmenuBarDropdownLink & JSXBase.HTMLAttributes<HTMLDuetSubmenuBarDropdownLinkElement>;
            "duet-submenu-bar-link": LocalJSX.DuetSubmenuBarLink & JSXBase.HTMLAttributes<HTMLDuetSubmenuBarLinkElement>;
            "duet-tab": LocalJSX.DuetTab & JSXBase.HTMLAttributes<HTMLDuetTabElement>;
            "duet-tab-group": LocalJSX.DuetTabGroup & JSXBase.HTMLAttributes<HTMLDuetTabGroupElement>;
            "duet-table": LocalJSX.DuetTable & JSXBase.HTMLAttributes<HTMLDuetTableElement>;
            "duet-textarea": LocalJSX.DuetTextarea & JSXBase.HTMLAttributes<HTMLDuetTextareaElement>;
            "duet-toggle": LocalJSX.DuetToggle & JSXBase.HTMLAttributes<HTMLDuetToggleElement>;
            "duet-toolbar": LocalJSX.DuetToolbar & JSXBase.HTMLAttributes<HTMLDuetToolbarElement>;
            "duet-toolbar-dropdown": LocalJSX.DuetToolbarDropdown & JSXBase.HTMLAttributes<HTMLDuetToolbarDropdownElement>;
            "duet-toolbar-dropdown-link": LocalJSX.DuetToolbarDropdownLink & JSXBase.HTMLAttributes<HTMLDuetToolbarDropdownLinkElement>;
            "duet-toolbar-link": LocalJSX.DuetToolbarLink & JSXBase.HTMLAttributes<HTMLDuetToolbarLinkElement>;
            "duet-tooltip": LocalJSX.DuetTooltip & JSXBase.HTMLAttributes<HTMLDuetTooltipElement>;
            "duet-tray": LocalJSX.DuetTray & JSXBase.HTMLAttributes<HTMLDuetTrayElement>;
            "duet-upload": LocalJSX.DuetUpload & JSXBase.HTMLAttributes<HTMLDuetUploadElement>;
            "duet-upload-aria-status": LocalJSX.DuetUploadAriaStatus & JSXBase.HTMLAttributes<HTMLDuetUploadAriaStatusElement>;
            "duet-visually-hidden": LocalJSX.DuetVisuallyHidden & JSXBase.HTMLAttributes<HTMLDuetVisuallyHiddenElement>;
        }
    }
}
