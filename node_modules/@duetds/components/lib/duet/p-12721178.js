/*!
 * Built with Duet Design System
 */
const e=(e,t,r,n,s={childList:!0,subtree:!0})=>{let d;return"undefined"!=typeof MutationObserver&&(d=new MutationObserver((e=>{r(n(e,t))})),d.observe(e,s)),d},t=(t,r,n)=>e(t,r,n,s),r=(t,r,s)=>e(t,r,s,n,{childList:!0,subtree:!0}),n=e=>{let t=!1,r=!1;return e.forEach((e=>{e.addedNodes.length&&(t=!0),e.removedNodes.length&&(r=!0)})),{addedNode:t,removedNode:r,mutationList:e}},s=(e,t)=>{let r;return e.forEach((e=>{for(let n=0;n<e.addedNodes.length;n++)r=d(e.addedNodes[n],t)||r})),r},d=(e,t)=>{if(1===e.nodeType)return(e.tagName===t.toUpperCase()?[e]:Array.from(e.querySelectorAll(t))).find((e=>!0===e.checked))};export{r as a,d as f,t as w}