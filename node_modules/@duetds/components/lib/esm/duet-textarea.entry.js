/*!
 * Built with Duet Design System
 */
import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-b45ea754.js';
import { i as inheritGlobalTheme } from './themeable-component-cb76be7c.js';
import { c as createID } from './create-id-981107da.js';
import { c as cleanValue } from './input-utils-de45e099.js';

const duetTextareaCss = "*.sc-duet-textarea,*.sc-duet-textarea::after,*.sc-duet-textarea::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-textarea-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;display:block;width:100%;max-width:100%;text-align:left}.sc-duet-textarea-h:last-child,.sc-duet-textarea-h:last-of-type{margin-right:0 !important}@media (min-width: 36em){.sc-duet-textarea-h{width:calc(50% - 16px - 3px)}.duet-expand.sc-duet-textarea-h{width:100% !important}}.duet-m-0.sc-duet-textarea-h{margin:0 !important}duet-tooltip.sc-duet-textarea{position:absolute;top:12px;right:0}@media (min-width: 48em){duet-tooltip.sc-duet-textarea{position:relative;top:4px;right:auto}}.duet-textarea-container.sc-duet-textarea{position:relative;width:100%;height:100%}.duet-textarea-container.sc-duet-textarea .duet-input-top-caption.sc-duet-textarea{display:none}.duet-textarea-container.duet-input-top-caption-shown.sc-duet-textarea .duet-input-top-caption.sc-duet-textarea{display:flex !important}.duet-textarea-wrapper.sc-duet-textarea{position:relative}.duet-textarea-placeholder.sc-duet-textarea{position:absolute;top:-9px;left:9px;z-index:200;display:block;width:auto;max-width:60%;padding:0 0.25rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background:rgb(255, 255, 255)}.duet-textarea.sc-duet-textarea{padding:15px !important;position:relative;z-index:100;display:block;width:100%;min-width:8rem;min-height:160px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;font-variant-numeric:tabular-nums;line-height:1.25;color:rgb(0, 41, 77);resize:vertical;background:rgb(255, 255, 255);border:1px solid rgb(144, 149, 153);border-radius:4px;transition:150ms ease}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58);border-color:rgb(116, 116, 117)}.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea{border-color:rgb(222, 35, 98) !important}.duet-theme-turva.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea{border-color:rgb(224, 42, 13) !important}.duet-textarea.sc-duet-textarea::-webkit-input-placeholder{color:rgb(101, 119, 135);opacity:1 !important;transition:color 300ms ease}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea::-webkit-input-placeholder{color:rgb(116, 116, 117)}.duet-textarea.sc-duet-textarea:focus::-webkit-input-placeholder{color:rgb(207, 210, 212)}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus::-webkit-input-placeholder{color:rgb(207, 207, 209)}.duet-textarea.sc-duet-textarea::-moz-placeholder{color:rgb(101, 119, 135);opacity:1 !important}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea::-moz-placeholder{color:rgb(116, 116, 117)}.duet-textarea.sc-duet-textarea:focus::-moz-placeholder{color:rgb(207, 210, 212)}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus::-moz-placeholder{color:rgb(207, 207, 209)}.duet-textarea.sc-duet-textarea:-ms-input-placeholder{color:rgb(101, 119, 135)}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:-ms-input-placeholder{color:rgb(116, 116, 117)}.duet-textarea.sc-duet-textarea:focus:-ms-input-placeholder{color:rgb(207, 210, 212)}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus:-ms-input-placeholder{color:rgb(207, 207, 209)}.duet-textarea[disabled].sc-duet-textarea{color:rgb(101, 119, 135) !important;cursor:default !important;background:rgb(245, 248, 250) !important;border-color:rgb(245, 248, 250) !important}.duet-theme-turva.sc-duet-textarea .duet-textarea[disabled].sc-duet-textarea{color:rgb(116, 116, 117) !important;background:rgb(245, 245, 247) !important;border-color:rgb(245, 245, 247) !important}.duet-textarea.sc-duet-textarea:hover:not(:disabled){box-shadow:0 0 0 1px rgb(144, 149, 153)}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:hover:not(:disabled){box-shadow:0 0 0 1px rgb(116, 116, 117)}.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea:hover:not(:disabled){box-shadow:0 0 0 1px rgb(222, 35, 98)}.duet-theme-turva.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea:hover:not(:disabled){box-shadow:0 0 0 1px rgb(224, 42, 13)}.duet-textarea.sc-duet-textarea:focus{border-color:rgb(0, 119, 179);outline:0;box-shadow:0 0 0 1px rgb(0, 119, 179);transition:none}.duet-theme-turva.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus{border-color:rgb(23, 28, 58);box-shadow:0 0 0 1px rgb(23, 28, 58)}.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus{box-shadow:0 0 0 1px rgb(222, 35, 98)}.duet-theme-turva.has-error.sc-duet-textarea .duet-textarea.sc-duet-textarea:focus{box-shadow:0 0 0 1px rgb(224, 42, 13)}.duet-textarea.sc-duet-textarea:not(:focus):not(:hover):invalid{box-shadow:none}.duet-textarea-help.sc-duet-textarea{font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;line-height:1.25}.duet-textarea-help.sc-duet-textarea span.sc-duet-textarea{display:block;margin-top:8px}.duet-theme-turva.sc-duet-textarea .duet-textarea-help.sc-duet-textarea{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(116, 116, 117)}.has-error.sc-duet-textarea .duet-textarea-help.sc-duet-textarea{color:rgb(222, 35, 98)}.duet-theme-turva.has-error.sc-duet-textarea .duet-textarea-help.sc-duet-textarea{color:rgb(224, 42, 13)}.duet-label-hidden.sc-duet-textarea duet-label.sc-duet-textarea{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}.duet-character-count.sc-duet-textarea{display:block;margin:8px 0 0 auto}";

const CharacterCount = ({ value, maxlength, label, theme }) => {
  if (maxlength == null) {
    return;
  }
  const length = value.length;
  const remainder = Math.max(maxlength - length, 0); // ensure we never have negative numbers
  const isApproachingLimit = remainder / maxlength <= 0.1; // <= 10% chars remaining
  return (h("div", { class: "duet-character-count" }, h("duet-caption", { margin: "none", theme: theme, size: "small" }, h("duet-visually-hidden", { "aria-live": "polite", "aria-atomic": "true", class: "duet-textarea-counter-remaining" }, isApproachingLimit && `${remainder} ${label}`), h("span", { "aria-hidden": "true" }, length, "/", maxlength))));
};
const DuetTextarea = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.duetInput = createEvent(this, "duetInput", 7);
    this.duetChange = createEvent(this, "duetChange", 7);
    this.duetBlur = createEvent(this, "duetBlur", 7);
    this.duetFocus = createEvent(this, "duetFocus", 7);
    /**
     * Own Properties
     */
    this.textareaId = createID("DuetTextarea");
    this.topCaptionId = createID("DuetCaptionTop");
    this.topCaptionPlaceholderId = createID("DuetCaptionPlaceholderTop");
    this.labelId = createID("DuetLabel");
    this.errorId = createID("DuetError");
    this.characterCountId = createID("DuetCharacterCount");
    this.disallowPatternRegex = null;
    /**
     * Component event handling.
     */
    this.handleInput = (ev) => {
      if (this.disallowPatternRegex) {
        cleanValue(this.nativeInput, this.disallowPatternRegex);
      }
      this.value = this.nativeInput.value;
      this.isCaptionVisible = !!this.caption;
      this.duetInput.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-textarea",
      });
    };
    this.handleChange = (ev) => {
      this.value = this.nativeInput.value;
      this.duetChange.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-textarea",
      });
    };
    this.handleBlur = (ev) => {
      this.duetBlur.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-textarea",
      });
    };
    this.handleFocus = (ev) => {
      if (this.counter) {
        this.hiddenCounterLabel.textContent = `${Math.max(this.maxlength - this.value.length, 0)}/${this.maxlength} ${this.counterLabel}`;
      }
      this.duetFocus.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-textarea",
      });
    };
    this.getDescribedBy = () => {
      const describedBy = [];
      if (this.isCaptionVisible && this.topCaptionId) {
        describedBy.push(this.topCaptionId);
      }
      if (this.accessibleDescribedBy) {
        describedBy.push(this.accessibleDescribedBy);
      }
      if (this.error) {
        describedBy.push(this.errorId);
      }
      if (this.counter) {
        describedBy.push(this.characterCountId);
      }
      return describedBy.length > 0 ? describedBy.join(" ") : null;
    };
    this.margin = "auto";
    this.accessibleActiveDescendant = undefined;
    this.accessibleAutocomplete = undefined;
    this.accessibleControls = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleLiveError = "polite";
    this.accessibleOwns = undefined;
    this.accessibleDescribedBy = undefined;
    this.theme = "";
    this.expand = false;
    this.disabled = false;
    this.identifier = undefined;
    this.required = false;
    this.label = "label";
    this.labelHidden = false;
    this.name = undefined;
    this.placeholder = undefined;
    this.caption = undefined;
    this.echoPlaceholder = false;
    this.maxlength = undefined;
    this.minlength = undefined;
    this.error = "";
    this.role = undefined;
    this.tooltip = "";
    this.tooltipDirection = "auto";
    this.value = "";
    this.disallowPattern = null;
    this.counter = false;
    this.counterLabel = undefined;
  }
  disallowedPatternChange() {
    this.disallowPatternRegex = this.disallowPattern ? new RegExp(this.disallowPattern, "g") : null;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.disallowedPatternChange();
    this.isCaptionVisible = !!this.caption;
    if (this.counter && this.maxlength == null) {
      console.warn("[DUET WARNING]: counter will only take effect if maxlength is set");
    }
    if (!this.counter && this.counterLabel != null) {
      console.warn("[DUET WARNING]: counter-label is redundant unless used with counter");
    }
    if (this.counter && !this.counterLabel) {
      console.warn("[DUET WARNING]: counter requires counter-label to be set");
    }
  }
  /**
   * Sets focus on the specified `duet-textarea`. Use this method instead of the global
   * `textarea.focus()`.
   */
  async setFocus(options) {
    this.nativeInput.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const identifier = this.identifier || this.textareaId;
    return (h(Host, { class: {
        "duet-m-0": this.margin === "none",
        "duet-has-counter": this.counter && !this.error,
        "duet-expand": this.expand,
      } }, h("div", { class: {
        "duet-textarea-container": true,
        "duet-theme-turva": this.theme === "turva",
        "duet-label-hidden": this.labelHidden,
        "duet-input-top-caption-shown": this.isCaptionVisible,
        "has-error": !!this.error,
      } }, h("duet-label", { theme: this.theme === "turva" ? "turva" : "default", class: { "duet-has-tooltip": !!this.tooltip }, margin: this.isCaptionVisible ? "small" : "auto", id: this.labelId, for: identifier }, this.label), this.tooltip && (h("duet-tooltip", { direction: this.tooltipDirection, accessibleInputLabel: this.label, theme: this.theme === "turva" ? "turva" : "default" }, this.tooltip)), this.caption && (h("duet-caption", { id: this.topCaptionId, size: "medium", theme: this.theme === "turva" ? "turva" : "default" }, this.caption)), h("div", { class: "duet-textarea-wrapper" }, this.placeholder && this.echoPlaceholder && this.value && (h("duet-caption", { id: this.topCaptionPlaceholderId, class: "duet-textarea-placeholder", size: "small" }, this.placeholder)), h("textarea", { onInput: this.handleInput, onChange: this.handleChange, onBlur: this.handleBlur, onFocus: this.handleFocus, ref: input => (this.nativeInput = input), class: { "duet-textarea": true, disabled: this.disabled }, value: this.value, disabled: this.disabled, "aria-labelledby": this.accessibleLabelledBy ? `${this.labelId} ${this.accessibleLabelledBy}` : this.labelId, "aria-controls": this.accessibleControls, "aria-autocomplete": this.accessibleAutocomplete, "aria-activedescendant": this.accessibleActiveDescendant, "aria-owns": this.accessibleOwns, "aria-describedby": this.getDescribedBy(), "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, placeholder: this.placeholder, spellcheck: "false", required: this.required, minlength: this.minlength, maxlength: this.maxlength, role: this.role, name: this.name, id: identifier })), h("duet-grid", { alignment: "stretch" }, h("duet-grid-item", { margin: "none", fill: true }, h("div", { class: "duet-textarea-help", id: this.errorId, "aria-atomic": "true", "aria-live": this.accessibleLiveError, "aria-relevant": "additions removals" }, this.error && h("span", null, this.error))), h("duet-grid-item", { margin: "none", class: "duet-character-count-caption" }, this.counter && (h(CharacterCount, { theme: this.theme, value: this.value, maxlength: this.maxlength, label: this.counterLabel })))), this.counter && (h("duet-visually-hidden", { class: "duet-visually-hidden", id: this.characterCountId, ref: el => {
        this.hiddenCounterLabel = el;
      } })))));
  }
  get element() { return getElement(this); }
  static get watchers() { return {
    "disallowPattern": ["disallowedPatternChange"]
  }; }
};
DuetTextarea.style = duetTextareaCss;

export { DuetTextarea as duet_textarea };
