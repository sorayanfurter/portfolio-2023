/*!
 * Built with Duet Design System
 */
import { r as registerInstance, h, H as Host, g as getElement } from './index-b45ea754.js';
import { a as media_query_large } from './tokens-f6b32339.js';
import { i as inheritGlobalTheme } from './themeable-component-cb76be7c.js';
import { f as isEscapeKey } from './keyboard-utils-d237bd5a.js';

const duetMenuBarDropdownCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;height:100%}@media (min-width: 62em){:host(:last-child) .duet-menu-bar-dropdown button{padding:0 16px 0 16px}}@media (min-width: 76.25em){:host(:last-child) .duet-menu-bar-dropdown button{padding:0 16px 0 28px}}.duet-menu-bar-dropdown{position:relative;height:100%}.duet-menu-bar-dropdown button{position:relative;display:flex;gap:8px;align-items:center;justify-content:center;height:100%;padding:0 12px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;font-weight:400;line-height:1.25;color:rgb(0, 77, 128);text-align:center;text-decoration:none;cursor:pointer}@media (min-width: 62em){.duet-menu-bar-dropdown button{padding:0 16px}}@media (min-width: 76.25em){.duet-menu-bar-dropdown button{padding:0 28px}}.duet-menu-bar-dropdown button:hover{color:rgb(0, 119, 179)}.duet-menu-bar-dropdown button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-menu-bar-dropdown button .label{display:flex;gap:0.5rem;align-items:center;justify-content:center}.duet-menu-bar-dropdown button.active{color:rgb(0, 119, 179)}.duet-menu-bar-dropdown button.active .caret{transform:rotate(180deg)}.duet-theme-turva .duet-menu-bar-dropdown button.active{color:rgb(198, 12, 48)}.duet-menu-bar-dropdown button.active::after{position:absolute;top:auto;bottom:2px;left:0;display:block;width:100%;height:2px;content:\"\";background:rgb(0, 119, 179);transition:300ms ease;transform:translateY(2px)}.duet-theme-turva .duet-menu-bar-dropdown button.active::after{background:rgb(198, 12, 48)}.duet-menu-bar-dropdown .items{position:absolute;right:0%;left:auto;z-index:600;display:flex;flex-direction:column;align-items:center;justify-content:center;min-width:225px;padding:1rem 0;color:rgb(0, 41, 77);background:rgb(243, 249, 252);border-radius:0 0 8px 8px;box-shadow:0 6px 6px 0 rgba(0, 41, 77, 0.1)}.duet-menu-bar-dropdown .items.hidden{display:none}.duet-menu-bar-dropdown.duet-theme-turva button{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-menu-bar-dropdown.duet-theme-turva button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-menu-bar-dropdown.duet-theme-turva button:hover{color:rgb(198, 12, 48)}.duet-menu-bar-dropdown.duet-theme-turva button.active{color:rgb(198, 12, 48)}.duet-menu-bar-dropdown.duet-theme-turva button.active::after{background:rgb(198, 12, 48)}.duet-menu-bar-dropdown.duet-theme-turva .items{background:rgb(245, 245, 247)}";

const DuetMenuBarDropdown = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    /**
     * Own Properties.
     */
    this.mql = [window.matchMedia(media_query_large.replace(/'/g, ""))];
    this.boundMqlFunctions = [];
    this.changeIconSize = () => {
      if (this.mql[0].matches) {
        this.iconSize = "x-small";
      }
      else {
        this.iconSize = "small";
      }
    };
    this.onClick = () => {
      this.open = !this.open;
    };
    this.getVariant = () => {
      const slot = this.element.parentElement.getAttribute("slot");
      switch (slot) {
        case "center":
          return "right";
        case "right":
          return "right";
        default:
          return "right";
      }
    };
    this.iconSize = "x-small";
    this.accessibleLabel = undefined;
    this.theme = "";
    this.open = false;
    this.icon = undefined;
  }
  handleFocus(e) {
    const isClickOutside = e.composedPath().every(node => node !== this.element);
    if (isClickOutside) {
      this.open = false;
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  connectedCallback() {
    this.changeIconSize();
    for (let i = 0; i < this.mql.length; i++) {
      // addEventListener is not available in Stencil hydrate
      if (this.mql[i].addEventListener) {
        const bound = this.changeIconSize.bind(this);
        this.mql[i].addEventListener("change", bound);
        this.boundMqlFunctions[i] = bound;
      }
    }
  }
  disconnectedCallback() {
    for (let i = 0; i < this.mql.length; i++) {
      // removeEventListener is not available in Stencil hydrate
      if (this.mql[i].removeEventListener) {
        this.mql[i].removeEventListener("change", this.boundMqlFunctions[i]);
      }
    }
    this.boundMqlFunctions = [];
  }
  handleEscape(e) {
    if (isEscapeKey(e)) {
      this.open = false;
      this.setFocus();
    }
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    this.button.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, null, h("div", { class: {
        "duet-menu-bar-dropdown": true,
        "duet-theme-turva": this.theme === "turva",
        active: this.open,
        [`duet-menu-bar-dropdown--slot-${this.getVariant()}`]: true,
      } }, h("button", { ref: element => (this.button = element), "aria-label": this.accessibleLabel, "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", id: "button", type: "button", class: {
        active: this.open,
      }, onClick: this.onClick, onKeyUp: e => this.handleEscape(e) }, this.icon && (h("duet-icon", { theme: this.theme, name: this.icon, size: this.iconSize, margin: "none", color: "currentColor" })), h("div", { class: "label" }, h("slot", { name: "label" }), h("duet-icon", { class: "caret", theme: this.theme, name: "action-arrow-down-small", margin: "none", size: "xxx-small", color: "currentColor" }))), h("div", { tabindex: "-1", role: "menu", id: "menu", "aria-labelledby": "button", class: {
        items: true,
        hidden: !this.open,
      } }, h("slot", null)))));
  }
  get element() { return getElement(this); }
};
DuetMenuBarDropdown.style = duetMenuBarDropdownCss;

export { DuetMenuBarDropdown as duet_menu_bar_dropdown };
