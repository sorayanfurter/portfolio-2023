/*!
 * Built with Duet Design System
 */
import { r as registerInstance, c as createEvent, h, H as Host, g as getElement } from './index-b45ea754.js';
import { i as inheritGlobalTheme } from './themeable-component-cb76be7c.js';
import { c as createID } from './create-id-981107da.js';
import { d as debounce } from './js-utils-fa98b8cd.js';
import { i as isKeyboardClick } from './keyboard-utils-d237bd5a.js';
import { g as getLanguage, a as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './language-utils-6be16ff0.js';
import { c as capitalizeFirstLetter, g as getColorByName, s as shadeRGBColor } from './token-utils-a1dcaa4b.js';
import './string-utils-5954f458.js';
import './tokens.module-ed773027.js';

const duetActionButtonCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline-block;margin:0 auto}button.duet-action-button{white-space:nowrap}button.duet-action-button{display:inline-flex;align-items:center;justify-content:center;width:32px;height:32px;min-height:auto !important;padding:0 !important;margin:0 0 0 8px;color:rgb(0, 41, 77);cursor:pointer;background:rgb(245, 248, 250);border-radius:50%;transition:background-color 300ms ease !important}.duet-theme-turva button.duet-action-button{color:rgb(23, 28, 58);background:rgb(245, 245, 247)}button.duet-action-button duet-icon{display:block}@media (max-width: 35.9375em){button.duet-action-button{width:32px;height:32px}}button.duet-action-button:not(:disabled):hover{background:#e9ecee}.duet-theme-turva button.duet-action-button:not(:disabled):hover{background:#e9e9eb}button.duet-action-button:focus{outline:0;box-shadow:0 0 0 2px rgb(0, 119, 179) !important}.duet-theme-turva button.duet-action-button:focus{box-shadow:0 0 0 2px rgb(23, 28, 58) !important}button.duet-action-button:active:focus{background:#dddfe1 !important;box-shadow:none}.duet-theme-turva button.duet-action-button:active:focus{background:#ddddde !important}button.duet-action-button:disabled{color:rgb(144, 149, 153);cursor:default;background:rgb(245, 248, 250);opacity:0.75}.duet-theme-turva button.duet-action-button:disabled{color:rgb(116, 116, 117);background:rgb(245, 245, 247)}";

const DuetActionButton = class {
  constructor(hostRef) {
    registerInstance(this, hostRef);
    this.duetActionEvent = createEvent(this, "duetActionEvent", 6);
    this.listId = createID("duet-action-button");
    /**
     * Private methods.
     */
    //helper to emit relevant page events
    this.emitPageEvent = debounce(e => {
      this.duetActionEvent.emit({
        component: "duet-action-button",
        originalEvent: e,
        action: this.actionId,
        name: this.actionName,
        meta: this.actionMeta,
        id: this.listId,
      });
    });
    this.numbersStore = "";
    this.language = getLanguage();
    this.theme = "";
    this.iconName = "action-arrow-left-small";
    this.iconColor = "currentColor";
    this.iconSize = "xx-small";
    this.actionName = "default-action";
    this.actionId = undefined;
    this.actionMeta = undefined;
    this.disabled = false;
    this.color = "";
    this.background = "";
    this.accessibleTitle = true;
    this.accessibleDescribedBy = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleLabelsDefaults = {
      en: "Click to activate action",
      fi: "Klikkaa aktivoidaksesi toiminto",
      sv: "Klicka för att aktivera åtgärd",
    };
    this.accessibleLabel = getLocaleString(this.accessibleLabelsDefaults);
    this.accessibleControls = "";
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabel === this.accessibleLabelsDefaults[oldValue]) {
      this.accessibleLabel = getLocaleString(this.accessibleLabelsDefaults, newValue);
    }
  }
  //handle a11y keyboard navigation events
  async onKeyboardDown(e) {
    if (isKeyboardClick(e)) {
      this.emitPageEvent(e);
    }
  }
  //return readable title for the action-button
  getTitle() {
    let titleString = "";
    if (typeof this.accessibleTitle === "string") {
      titleString = this.accessibleTitle;
    }
    if (this.accessibleTitle === true) {
      titleString = capitalizeFirstLetter(`${this.actionName}`);
    }
    return titleString;
  }
  //set update current when mouse click on page number
  async onMouseHandler(e) {
    e.preventDefault();
    this.duetActionEvent.emit({
      component: "duet-action-button",
      originalEvent: e,
      action: this.actionName,
      id: this.actionId,
      meta: this.actionMeta,
    });
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Sets focus on the specified `duet-action-button`. Use this method instead of the global
   * `button.focus()`.
   */
  async setFocus(options) {
    if (this.nativeButton) {
      this.nativeButton.focus(options);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const color = this.color === "currentColor" ? "currentColor" : getColorByName(this.color, this.theme);
    const backgroundColor = getColorByName(this.background, this.theme);
    const backgroundHoverColor = backgroundColor ? shadeRGBColor(backgroundColor, -0.1) : backgroundColor;
    const backgroundStyles = backgroundColor
      ? `
          button.duet-action-button {
            background: ${backgroundColor} !important;
          }
          button.duet-action-button:not(:disabled):hover {
            background: ${backgroundHoverColor} !important;
          }
        `
      : "";
    const styles = {
      color,
      "border-color": getColorByName(this.iconColor, this.theme),
      "border-width": "1px",
      "border-style": "solid",
    };
    return (h(Host, { onKeyDown: e => this.onKeyboardDown(e) }, h("style", { innerHTML: backgroundStyles }), h("button", { ref: button => (this.nativeButton = button), part: "button", style: styles, disabled: this.disabled, id: this.listId, class: {
        "duet-action-button": true,
        "duet-action-button--disabled": this.disabled,
        [`duet-action-button--${this.theme}`]: this.theme !== "",
      }, type: "button", onClick: e => this.onMouseHandler(e), "aria-label": this.accessibleLabel, "aria-labelledby": this.accessibleLabelledBy, "aria-description": this.accessibleDescription, "aria-describedby": this.accessibleDescribedBy, "aria-details": this.accessibleDetails, "aria-controls": this.accessibleControls, title: this.getTitle() }, h("duet-icon", { part: "icon", name: this.iconName, color: this.iconColor, margin: "none", size: this.iconSize }), h("duet-visually-hidden", null, h("slot", null)))));
  }
  get element() { return getElement(this); }
  static get watchers() { return {
    "language": ["watchLanguageStateHandler"]
  }; }
};
DuetActionButton.style = duetActionButtonCss;

export { DuetActionButton as duet_action_button };
