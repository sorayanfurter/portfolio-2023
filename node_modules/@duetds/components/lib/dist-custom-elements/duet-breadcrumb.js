/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { d as defineCustomElement$2 } from './p-0674039c.js';

const duetBreadcrumbCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-breadcrumb{display:flex;flex-direction:row;align-items:center;justify-content:flex-start;height:100%;font-size:0.875rem;font-weight:inherit;color:inherit;text-decoration:none}.duet-breadcrumb:focus{outline:0}:host(.user-is-tabbing) .duet-breadcrumb:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}:host(.user-is-tabbing) .duet-breadcrumb.duet-theme-turva:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}";

const DuetBreadcrumb$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.theme = "";
    this.href = "";
    this.icon = "";
    this.accessibleLabel = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, null, h("a", { class: {
        "duet-breadcrumb": true,
        "duet-theme-turva": this.theme === "turva",
      }, href: this.href ? this.href : undefined, "aria-label": this.accessibleLabel }, this.icon && h("duet-icon", { size: "x-small", name: this.icon, margin: "none", color: "currentColor" }), !this.icon && h("slot", null))));
  }
  static get style() { return duetBreadcrumbCss; }
}, [1, "duet-breadcrumb", {
    "theme": [1025],
    "href": [1025],
    "icon": [1025],
    "accessibleLabel": [1, "accessible-label"]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-breadcrumb", "duet-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-breadcrumb":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetBreadcrumb$1);
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetBreadcrumb = DuetBreadcrumb$1;
const defineCustomElement = defineCustomElement$1;

export { DuetBreadcrumb, defineCustomElement };
