/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { d as defineCustomElement$2 } from './p-1344c068.js';

function groupBy(prop, items) {
  const result = {};
  items.forEach(item => {
    const value = item[prop];
    if (!result[value]) {
      result[value] = [];
    }
    result[value].push(item);
  });
  return result;
}

const duetStepperCss = ":host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:20px !important;display:block;width:100%}:host(.duet-m-0){margin:0 !important}.duet-stepper{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}@media (min-width: 36em){.duet-stepper{padding:28px !important;padding-top:36px !important;padding-bottom:36px !important;background:rgb(255, 255, 255);border-radius:4px;box-shadow:0 2px 6px 0 rgba(0, 41, 77, 0.07), 0 -1px 0 0 rgba(0, 0, 0, 0.09), -1px 0 0 0 rgba(0, 0, 0, 0.07), 1px 0 0 0 rgba(0, 0, 0, 0.07), 0 1px 0 0 rgba(0, 0, 0, 0.07)}}";

const DuetStepper$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.duetStepChange = createEvent(this, "duetStepChange", 7);
    this.theme = "";
    this.accessibleLive = "Lista jossa {total} kohtaa. Olet kohdassa {current}.";
    this.margin = "auto";
    this.backDisabled = false;
    this.selected = 0;
  }
  currentStepChanged(nextStep) {
    if (isNaN(nextStep)) {
      throw new Error(`step must be a number. got: ${nextStep}`);
    }
    if (nextStep < 0) {
      throw new Error(`step must be not be less than zero. got: ${nextStep}`);
    }
    if (nextStep > this.getSteps().length) {
      throw new Error(`step must not exceed total number of steps`);
    }
    this.updateStepState();
    // Shifting focus would occasionally fail if done immediately.
    // This may be due to re-render happening at the same time.
    // So we defer shifting focus, to ensure it always works.
    setTimeout(() => this.setStepFocus(), 50);
  }
  currentStepInvokedDisable() {
    this.updateStepState();
  }
  onDuetStepClick(e) {
    this.duetStepChange.emit({
      fromStep: this.selected,
      toStep: e.detail.stepIndex,
      component: "duet-stepper",
    });
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  async connectedCallback() {
    this.updateStepState();
  }
  getSteps() {
    return Array.from(this.element.querySelectorAll("duet-step"));
  }
  setStepFocus() {
    const steps = this.getSteps();
    const step = steps[this.selected];
    step.setFocus();
  }
  updateStepState() {
    const steps = this.getSteps();
    steps.forEach((step, index) => {
      let state;
      if (index < this.selected) {
        state = this.backDisabled ? "disabled" : "complete";
      }
      else if (index > this.selected) {
        state = "incomplete";
      }
      else {
        state = "current";
      }
      step.theme = this.theme;
      step.state = state;
      step.stepIndex = index;
    });
    const stepsByState = groupBy("state", steps);
    Object.values(stepsByState).forEach(steps => {
      steps.forEach((step, i) => {
        step.roundedTop = i === 0;
        step.roundedBottom = i === steps.length - 1;
      });
    });
  }
  formatAnnouncement() {
    const steps = this.getSteps();
    const current = (this.selected + 1).toString(10);
    const total = steps.length.toString(10);
    return this.accessibleLive.replace("{current}", current).replace("{total}", total);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { class: { "duet-m-0": this.margin === "none" } }, h("div", { class: { "duet-stepper": true, "duet-theme-turva": this.theme === "turva" } }, h("duet-visually-hidden", { "aria-live": "polite", "aria-atomic": "true", "aria-relevant": "all" }, this.formatAnnouncement()), h("slot", null))));
  }
  get element() { return this; }
  static get watchers() { return {
    "selected": ["currentStepChanged"],
    "backDisabled": ["currentStepInvokedDisable"]
  }; }
  static get style() { return duetStepperCss; }
}, [1, "duet-stepper", {
    "theme": [1025],
    "accessibleLive": [1, "accessible-live"],
    "margin": [1],
    "backDisabled": [4, "back-disabled"],
    "selected": [1538]
  }, [[0, "duetStepClick", "onDuetStepClick"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-stepper", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-stepper":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetStepper$1);
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetStepper = DuetStepper$1;
const defineCustomElement = defineCustomElement$1;

export { DuetStepper, defineCustomElement };
