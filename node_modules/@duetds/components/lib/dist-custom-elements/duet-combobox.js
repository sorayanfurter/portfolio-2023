/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h as h$1, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { d as debounce } from './p-0b3f675e.js';
import { c as isEnterKey, b as isEscapeKey, d as isTabKey, e as isArrowUpKey, f as isArrowDownKey } from './p-d8549efe.js';
import { g as getLanguage, a as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-076452be.js';
import { p as parsePossibleJSON } from './p-5a9d75e1.js';
import { h, F as Fragment } from './p-152ee893.js';
import { d as defineCustomElement$2 } from './p-0674039c.js';

const SelectSingle = ({ item, search = "", selected }) => {
  const regEx = search !== "" ? new RegExp("(" + search.split(" ").join("|") + ")", "gi") : undefined;
  return (h(Fragment, null,
    selected && h("duet-icon", { class: "option-icon", name: "messaging-checked", size: "xx-small", margin: "none" }),
    regEx ? (h("span", { class: "option-container", "aria-hidden": "true" },
      h("span", { innerHTML: item.name.replace(regEx, '<span class="highlight">$&</span>') }))) : (item.name),
    item.tags && h("span", { class: "option-tags" }, item.tags.join(", "))));
};

const DuetComboBoxSelect = ({ item, active, total, selected, label = undefined, clickHandler = e => {
  e.preventDefault();
}, keyHandler = e => {
  e.preventDefault();
}, search, }) => {
  return (h("li", { class: {
      "list-item": true,
      option: true,
      active: active,
      selected: selected,
    }, id: active ? "active_item" : "", "data-index": item.id, "aria-selected": active ? "true" : undefined, "aria-current": selected ? "true" : undefined, role: "option", "aria-label": label || `${item.name}, (${item.id + 1} of ${total})` },
    h("a", { tabindex: "-1", onClick: e => clickHandler(e), onKeyUp: e => keyHandler(e), class: "option-link", "aria-label": label || `${item.name}, (${item.id + 1} of ${total})`, "aria-hidden": "true" },
      h(SelectSingle, { item: item, search: search, selected: selected }))));
};

const duetComboboxCss = ".sc-duet-combobox-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;position:relative;display:inline-block;width:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(0, 41, 77)}.sc-duet-combobox-h a.sc-duet-combobox{color:rgb(0, 41, 77);transition:none}.duet-theme-turva.sc-duet-combobox-h{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-theme-turva.sc-duet-combobox-h a.sc-duet-combobox{color:rgb(23, 28, 58)}.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.option.sc-duet-combobox .option-tags.sc-duet-combobox{color:rgb(116, 116, 117)}.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.option.selected.sc-duet-combobox{background:rgb(244, 207, 214)}.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.active.sc-duet-combobox,.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:focus,.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:hover{color:rgb(255, 255, 255);background:rgb(198, 12, 48)}.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.active.sc-duet-combobox .option-tags.sc-duet-combobox,.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:focus .option-tags.sc-duet-combobox,.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:hover .option-tags.sc-duet-combobox{color:rgb(255, 255, 255)}.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.active.sc-duet-combobox a.sc-duet-combobox,.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:focus a.sc-duet-combobox,.duet-theme-turva.sc-duet-combobox-h .duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:hover a.sc-duet-combobox{color:rgb(255, 255, 255)}.duet-combobox-list.sc-duet-combobox{position:absolute;top:calc(100% - 12px);height:0;overflow:hidden;background:rgb(255, 255, 255);border-radius:0 4px;box-shadow:0 2px 10px 0 rgba(0, 41, 77, 0.1);opacity:0}.duet-combobox-list.open.sc-duet-combobox{z-index:700;display:block;height:auto;opacity:1}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox{max-height:200px;padding:0.75rem 0;margin:0;overflow-y:scroll;font-weight:600;list-style:none;cursor:pointer;scroll-behavior:smooth}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox{padding:4px 0}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:not(.selected){padding-left:16px}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:not(.selected) .highlight.sc-duet-combobox{text-decoration:underline}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.option.sc-duet-combobox .option-link.sc-duet-combobox{display:block;width:100%}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.option.sc-duet-combobox .option-tags.sc-duet-combobox{float:right;padding-right:0.875rem;font-weight:400;color:rgb(144, 149, 153)}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.option-link.sc-duet-combobox{display:block;width:100%}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.selected.sc-duet-combobox{padding-left:0;background:rgb(205, 229, 241)}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.selected.option.sc-duet-combobox .option-icon.sc-duet-combobox{padding:0 8px 0 8px}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.selected.option.sc-duet-combobox .option-tags.sc-duet-combobox{color:rgb(144, 149, 153)}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.active.sc-duet-combobox,.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:focus,.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:hover{color:rgb(255, 255, 255);background:rgb(0, 119, 179)}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.active.sc-duet-combobox .option-tags.sc-duet-combobox,.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:focus .option-tags.sc-duet-combobox,.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:hover .option-tags.sc-duet-combobox{color:rgb(255, 255, 255)}.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.active.sc-duet-combobox a.sc-duet-combobox,.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:focus a.sc-duet-combobox,.duet-combobox-list.sc-duet-combobox .duet-combobox-listbox.sc-duet-combobox .list-item.sc-duet-combobox:hover a.sc-duet-combobox{color:rgb(255, 255, 255)}";

const DuetCombobox$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.duetChange = createEvent(this, "duetChange", 3);
    this.resizeObserver = new ResizeObserver(debounce(entries => {
      var _a, _b;
      // otherwise, something is wrong, expecting 1 element only
      if ((entries === null || entries === void 0 ? void 0 : entries.length) === 1) {
        const currentWidth = (_b = (_a = entries[0]) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect().width;
        this.listContainer.style.width = `${currentWidth + 1}px`;
        // this.listElement.style.width = `${currentWidth + 1}px`
      }
    }, 100));
    this.processedItems = null;
    this.inputWidth = 0;
    this.inputValue = "";
    this.selectionMsg = "";
    this.listOpen = false;
    this.selectedItems = new Set();
    this.activeItem = undefined;
    this.language = getLanguage();
    this.accessibleLabelDefaults = {
      en: {
        heading: "Select:",
        item: "{name}, ({current} of {total})",
        itemFiltered: "{name}, ({current} of {total}, {hiddenItems} filtered)",
      },
      fi: {
        heading: "Valitse:",
        item: "{name}, ({current}/{total})",
        itemFiltered: "{name}, ({current}/{total}, {hiddenItems} suodatettu)",
      },
      sv: {
        heading: "VÃ¤lj:",
        item: "{name}, ({current} av {total})",
        itemFiltered: "{name}, ({current} av {total}, {hiddenItems} filtrerade)",
      },
    };
    this.accessibleLabels = getLocaleString(parsePossibleJSON(this.accessibleLabelDefaults), getLanguage());
    this.theme = "";
    this.force = false;
    this.items = undefined;
    this.formatter = (item) => item && item.name ? item.name : "";
    this.value = undefined;
    this.minCharacters = 1;
    this.openListOnClick = false;
    this.filterType = "startsWith";
  }
  activeItemHandler(state) {
    this.input.accessibleActiveDescendant = this.listOpen && (state || state === 0) ? `active_item` : "";
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue &&
      this.accessibleLabels === getLocaleString(parsePossibleJSON(this.accessibleLabelDefaults), oldValue)) {
      this.accessibleLabels = getLocaleString(parsePossibleJSON(this.accessibleLabelDefaults), newValue);
    }
  }
  handleDocumentClick(e) {
    //we want to remove all user text if they have NOT selected from the dropdown
    const path = e.composedPath();
    const isClickOutside = path.every(el => el !== this.element);
    if (isClickOutside) {
      this.updateInputText(true);
      this.listOpen = false;
    }
  }
  /**
   * Exposes a formatter function to format the item value displayed after a user selects an item
   * @param item: DuetComboboxItem
   */
  async formatItem(item) {
    return this.formatter(item);
  }
  async processItems() {
    this.items = this.processedItems = parsePossibleJSON(this.items);
    await this.updateInputText();
  }
  async processValue() {
    if (this.value) {
      const selectedItem = this.items.find(item => item.value === this.value);
      this.updateSelectedItems(selectedItem.id);
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  connectedCallback() {
    this.items = this.processedItems = parsePossibleJSON(this.items);
    this.input = this.element.querySelector("duet-input");
    this.input.addEventListener("duetChange", this.updateInputValue.bind(this));
    this.input.addEventListener("click", () => {
      if (!this.openListOnClick) {
        this.inputValue.length >= this.minCharacters ? (this.listOpen = true) : (this.listOpen = false);
      }
      else {
        this.listOpen = !this.listOpen;
      }
    });
    this.element.addEventListener("keydown", this.handleInputKeyDownEvent.bind(this));
    connectLanguageChangeObserver(this);
    //add correct aria attributes to the input element
    this.input.accessibleAutocomplete = "list";
    this.input.accessibleControls = "duet-combobox-list-element";
  }
  disconnectedCallback() {
    this.input.removeEventListener("duetChange", this.updateInputValue.bind(this));
    this.input.removeEventListener("click", () => this.inputValue.length ? (this.listOpen = true) : (this.listOpen = false));
    this.element.removeEventListener("keydown", this.handleInputKeyDownEvent.bind(this));
    this.listElement.removeEventListener("click", e => {
      e.stopPropagation();
    });
    this.resizeObserver.disconnect();
    disconnectLanguageChangeObserver(this);
  }
  componentDidLoad() {
    // observe resize events to dynamically adjust size of dropdown area
    this.resizeObserver.observe(this.input);
    this.listElement.addEventListener("click", e => {
      e.stopPropagation();
    });
    this.processValue();
  }
  /**
   * Updates the input text based on the selected/clicked items.
   * @param event - event
   *'param item: DuetComboboxItem - the item that was selected
   */
  onListClick(e, item) {
    e.preventDefault();
    // update selected item with id
    this.updateSelectedItems(item.id, true);
    this.listOpen = false;
    return this.listOpen;
  }
  /**
   * Helper function that checks inputs in the field, compares it with the item list and returns true when inputvalue matches selectedItem id
   * TODO: this should be disabled in multiple mode
   */
  shouldListBeFiltered() {
    if (this.selectedItems.size && this.input.value === this.inputValue) {
      const item = this.items.filter(item => this.selectedItems.has(item.id));
      return !(this.formatter(item).toLowerCase() === this.input.value.toLowerCase());
    }
    return true;
  }
  /**
   * Helper function that return correct collection depending on filter status returend by shouldListBeFiltered
   */
  returnFilteredOrNonFiltered() {
    return this.processedItems
      ? this.shouldListBeFiltered()
        ? this.getFilteredItems()
        : this.sortFilteredItems(this.processedItems)
      : [];
  }
  /**
   * Updates the selected items based on the item id.
   * @param id
   * @private
   */
  async updateSelectedItems(id, emitEvent) {
    // for a multiple scenario wrap this in an if/else and just don't clear here
    this.selectedItems.clear();
    if (this.selectedItems) {
      if (this.selectedItems.has(id)) {
        this.selectedItems.delete(id);
      }
      else {
        this.selectedItems.add(id);
      }
    }
    if (emitEvent) {
      const item = this.selectedItems.size === 0 ? [] : this.items.filter(item => this.selectedItems.has(item.id));
      this.duetChange.emit({
        value: item[0].value,
        item: item[0],
        component: "duet-combobox",
      });
    }
    await this.updateInputText();
  }
  /**
   * Updates the input text based on the selected/clicked items.
   * @param bool -override to clear if invoked by "click outside"
   */
  async updateInputText(isBlurred = false) {
    const item = this.selectedItems.size === 0 ? [] : this.items.filter(item => this.selectedItems.has(item.id));
    //if items changed and given id no longer exists
    if (item.length === 0 && this.selectedItems.size > 0) {
      this.selectedItems.clear();
      this.input.value = "";
      this.value = undefined;
      this.activeItem = undefined;
    }
    if (this.selectedItems.size === 1) {
      this.input.value = ""; // set value to empty so that cursor position follows accordingly
      this.input.value = await this.formatItem(item[0]);
      this.input.scrollLeft = this.input.scrollWidth;
      this.activeItem = undefined;
      this.value = item[0].value;
    }
    if (isBlurred && this.selectedItems.size === 0) {
      //if nothing is selected and a user clicks outside, we want the input field to clearly illustrate that nothing was selected
      if (this.force) {
        this.inputValue = "";
        this.input.value = "";
      }
      this.activeItem = undefined;
    }
    this.listOpen = false;
  }
  updateInputValue(e) {
    var _a;
    this.inputValue = e.detail.value;
    this.listOpen = String(this.inputValue).length >= this.minCharacters && ((_a = this.getFilteredItems()) === null || _a === void 0 ? void 0 : _a.length) > 0;
  }
  handleInputKeyDownEvent(e) {
    //if selection is made, close the list and update internal and external values
    // this should be set to undefined on everything BUT up/down arrow according to the aria 1.1 specs
    // https://www.w3.org/TR/wai-aria-practices-1.1/#combobox
    this.input.accessibleActiveDescendant = undefined;
    if (isEnterKey(e)) {
      e.preventDefault();
      this.selectActiveItem();
      this.updateInputText(false);
      this.listOpen = false;
      return;
    }
    //tabbing out or escaping, restore initial state
    if (isEscapeKey(e) || isTabKey(e)) {
      this.updateInputText(true);
      this.listOpen = false;
      return;
    }
    //handle arrow up/down navigation
    let nextActiveItem = this.activeItem;
    if (isArrowUpKey(e)) {
      e.preventDefault();
      nextActiveItem = this.activeItem - 1;
    }
    else if (isArrowDownKey(e)) {
      e.preventDefault();
      nextActiveItem = this.listOpen ? this.activeItem + 1 : this.activeItem;
      this.listOpen = true;
    }
    if (isArrowDownKey(e) || isArrowUpKey(e)) {
      const listItems = this.shouldListBeFiltered() ? this.getFilteredItems() : this.processedItems;
      if (nextActiveItem < 0 || !nextActiveItem) {
        nextActiveItem = 0;
      }
      if (nextActiveItem >= listItems.length) {
        nextActiveItem = listItems.length - 1;
      }
      // this should be set to undefined on everything BUT up/down arrow according to the aria 1.1 specs
      // https://www.w3.org/TR/wai-aria-practices-1.1/#combobox
      this.input.accessibleActiveDescendant = "active_item";
      this.activeItem = nextActiveItem;
      this.scrollToActive();
    }
    this.announceActive();
    return;
  }
  selectActiveItem() {
    if (this.activeItem === undefined) {
      return;
    }
    const filteredItem = this.returnFilteredOrNonFiltered();
    const item = filteredItem[this.activeItem];
    this.updateSelectedItems(item.id, true);
  }
  announceActive(items) {
    if (!items) {
      items = this.returnFilteredOrNonFiltered();
    }
    if (this.activeItem === undefined || this.activeItem === -1) {
      return;
    }
    const item = items[this.activeItem];
    this.selectionMsg = structuredClone(this.formatLabel(item, items.length, this.items.length));
  }
  //function that scrolls to the li element with the class "active"
  scrollToActive() {
    const activeElement = this.listElement.querySelector(".active");
    if (activeElement) {
      activeElement.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }
  formatLabel(item, length, itemsLength) {
    if (!item || itemsLength === undefined) {
      return "";
    }
    const labelString = length === itemsLength ? this.accessibleLabels.item : this.accessibleLabels.itemFiltered;
    return labelString
      .replace("{name}", String(item.name))
      .replace("{current}", String(this.activeItem + 1))
      .replace("{total}", String(length))
      .replace("{hiddenItems}", String(itemsLength - length));
  }
  /**
   * Filter the items based on the input value
   */
  getFilteredItems() {
    // filter items based on user inputs
    const filteredItems = this.processedItems.filter(item => {
      var _a, _b, _c, _d;
      // filter by name and value
      // if value contains inputvalue
      return ((_a = String(item.value)) === null || _a === void 0 ? void 0 : _a.toLowerCase()[this.filterType]((_b = this.inputValue) === null || _b === void 0 ? void 0 : _b.toLowerCase())) ||
        (
        // if name contains input value
        (_c = String(item.name)) === null || _c === void 0 ? void 0 : _c.toLowerCase()[this.filterType]((_d = this.inputValue) === null || _d === void 0 ? void 0 : _d.toLowerCase())) ||
        // if the item is selected
        this.selectedItems.has(item.id);
    });
    return this.sortFilteredItems(filteredItems);
  }
  /**
   * Sort the return from getFilteredItems so that any item with and item.id that matches this.selectedItems is placed first
   */
  sortFilteredItems(items) {
    if (items.length > 0) {
      items
        .filter(item => this.selectedItems.has(item.id))
        .forEach(item => {
        const index = items.indexOf(item);
        items.splice(index, 1);
        items.unshift(item);
      });
    }
    return items;
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const selectElements = this.returnFilteredOrNonFiltered();
    return (h$1(Host, { role: "combobox", "aria-expanded": this.listOpen ? "true" : "false", "aria-owns": "duet-combobox-list-element", "aria-haspopup": "listbox", class: {
        "duet-combobox": true,
        [`duet-theme-${this.theme}`]: true,
      } }, h$1("slot", null), h$1("div", { role: "list", class: {
        "duet-combobox-list": true,
        open: this.listOpen,
      }, ref: el => (this.listContainer = el) }, h$1("ul", { class: {
        "duet-combobox-listbox-open": this.listOpen,
        "duet-combobox-listbox": true,
      }, role: "listbox", ref: el => (this.listElement = el), id: "duet-combobox-list-element" }, selectElements.map((item, index) => {
      return (h$1(DuetComboBoxSelect, { item: item, active: index === this.activeItem, selected: this.selectedItems.has(item.id), search: this.inputValue, total: selectElements.length, clickHandler: e => this.onListClick(e, item), label: this.formatLabel(item, selectElements.length, this.items.length) }));
    })))));
  }
  get element() { return this; }
  static get watchers() { return {
    "activeItem": ["activeItemHandler"],
    "language": ["watchLanguageStateHandler"],
    "items": ["processItems"],
    "value": ["processValue"]
  }; }
  static get style() { return duetComboboxCss; }
}, [6, "duet-combobox", {
    "accessibleLabelDefaults": [1, "accessible-label-defaults"],
    "accessibleLabels": [1040],
    "theme": [1025],
    "force": [4],
    "items": [1032],
    "formatter": [16],
    "value": [1537],
    "minCharacters": [2, "min-characters"],
    "openListOnClick": [4, "open-list-on-click"],
    "filterType": [1, "filter-type"],
    "processedItems": [32],
    "inputWidth": [32],
    "inputValue": [32],
    "selectionMsg": [32],
    "listOpen": [32],
    "selectedItems": [32],
    "activeItem": [32],
    "language": [32],
    "formatItem": [64]
  }, [[4, "click", "handleDocumentClick"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-combobox", "duet-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-combobox":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetCombobox$1);
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetCombobox = DuetCombobox$1;
const defineCustomElement = defineCustomElement$1;

export { DuetCombobox, defineCustomElement };
