/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { b as isEscapeKey } from './p-d8549efe.js';
import { d as defineCustomElement$2 } from './p-0674039c.js';

const duetToolbarDropdownCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;height:100%}.duet-toolbar-dropdown{position:relative;height:100%}.duet-toolbar-dropdown button{position:relative;display:flex;gap:8px;align-items:center;justify-content:center;height:100%;padding:0 16px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;font-weight:400;line-height:1.25;color:rgb(0, 77, 128);text-align:center;text-decoration:none;cursor:pointer}.duet-toolbar-dropdown button .label{display:flex;gap:0.5rem;align-items:center;justify-content:center}.duet-toolbar-dropdown button:hover{color:rgb(0, 41, 77);background:rgb(243, 249, 252)}.duet-toolbar-dropdown button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-toolbar-dropdown button.open .caret{transform:rotate(180deg)}.duet-toolbar-dropdown button.active,.duet-toolbar-dropdown button.open{color:rgb(0, 41, 77)}.duet-toolbar-dropdown button.active::after,.duet-toolbar-dropdown button.open::after{position:absolute;top:auto;bottom:1px;left:0;display:block;width:100%;height:1px;content:\"\";background:rgb(0, 119, 179);transition:300ms ease;transform:translateY(1px)}.duet-toolbar-dropdown .items{position:absolute;top:102%;right:0%;left:auto;z-index:600;display:flex;flex-direction:column;align-items:center;justify-content:center;min-width:175px;padding:1rem 0;color:rgb(0, 41, 77);background:rgb(243, 249, 252);border-radius:0 0 8px 8px;box-shadow:0 6px 6px 0 rgba(0, 41, 77, 0.1)}.duet-toolbar-dropdown .items.hidden{display:none}.duet-toolbar-dropdown.right .items{right:auto;left:0%}.duet-toolbar-dropdown.duet-theme-turva button{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-toolbar-dropdown.duet-theme-turva button:hover{color:rgb(23, 28, 58);background:rgb(245, 245, 247)}.duet-toolbar-dropdown.duet-theme-turva button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-toolbar-dropdown.duet-theme-turva button.active,.duet-toolbar-dropdown.duet-theme-turva button.open{color:rgb(23, 28, 58)}.duet-toolbar-dropdown.duet-theme-turva button.active::after,.duet-toolbar-dropdown.duet-theme-turva button.open::after{background:rgb(198, 12, 48)}.duet-toolbar-dropdown.duet-theme-turva .items{background:rgb(245, 245, 247)}";

const DuetToolbarDropdown$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.onClick = () => {
      this.open = !this.open;
    };
    this.theme = "";
    this.accessibleLabel = undefined;
    this.active = false;
    this.open = false;
    this.icon = undefined;
  }
  handleFocus(e) {
    const isClickOutside = e.composedPath().every(node => node !== this.element);
    if (isClickOutside) {
      this.open = false;
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  handleEscape(e) {
    if (isEscapeKey(e)) {
      this.open = false;
      this.setFocus();
    }
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    this.button.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    let itemsAlign = "right";
    if (this.element && this.element.parentElement) {
      itemsAlign = this.element.parentElement.getAttribute("slot") === "left" ? "right" : "left";
    }
    return (h(Host, null, h("div", { class: {
        "duet-toolbar-dropdown": true,
        "duet-theme-turva": this.theme === "turva",
        [itemsAlign]: true,
      } }, h("button", { ref: element => (this.button = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", "aria-current": this.active ? "true" : "false", "aria-label": this.accessibleLabel, id: "button", type: "button", class: {
        active: this.active,
        open: this.open,
      }, onClick: this.onClick, onKeyUp: e => this.handleEscape(e) }, this.icon && (h("duet-icon", { theme: this.theme, name: this.icon, size: "x-small", margin: "none", color: "currentColor" })), h("div", { class: "label" }, h("slot", { name: "label" }), h("duet-icon", { class: "caret", theme: this.theme, name: "action-arrow-down-small", margin: "none", size: "xxx-small", color: "currentColor" }))), h("div", { tabindex: "-1", role: "menu", id: "menu", "aria-labelledby": "button", class: {
        items: true,
        hidden: !this.open,
      } }, h("slot", null)))));
  }
  get element() { return this; }
  static get style() { return duetToolbarDropdownCss; }
}, [1, "duet-toolbar-dropdown", {
    "theme": [1025],
    "accessibleLabel": [1, "accessible-label"],
    "active": [1540],
    "open": [1540],
    "icon": [1537],
    "setFocus": [64]
  }, [[8, "click", "handleFocus"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-toolbar-dropdown", "duet-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-toolbar-dropdown":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetToolbarDropdown$1);
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetToolbarDropdown = DuetToolbarDropdown$1;
const defineCustomElement = defineCustomElement$1;

export { DuetToolbarDropdown, defineCustomElement };
