/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h } from './p-fdc1ca33.js';
import { a as actionArrowDownSmall } from './p-115c79b6.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { g as getLanguage, a as getLocaleString } from './p-076452be.js';
import { d as defineCustomElement$4 } from './p-633e1ebc.js';
import { d as defineCustomElement$3 } from './p-0674039c.js';
import { d as defineCustomElement$2 } from './p-75c1e787.js';

const duetNotificationDrawerCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-drawer{position:relative}@media (min-width: 62em){.duet-drawer{display:inline-block}}.duet-drawer-toggle{position:relative;display:flex;align-items:center;width:100%;height:48px;padding:0 20px;overflow:hidden;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;font-variant-numeric:tabular-nums;line-height:48px;color:rgb(0, 41, 77);text-align:left;text-decoration:none;text-overflow:ellipsis;white-space:nowrap;cursor:pointer;background-color:rgb(255, 255, 255);border-bottom:1px solid rgb(225, 227, 230);border-radius:0;-webkit-appearance:none;appearance:none}@media (min-width: 62em){.duet-drawer-toggle{z-index:200;width:auto;max-width:200px;padding:0 30px 0 12px;overflow:hidden;font-size:0.875rem;line-height:4rem;border:0;border-radius:4px;transition:border 300ms ease}}.duet-theme-turva .duet-drawer-toggle{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58);background-color:rgb(255, 255, 255);border-color:rgb(228, 228, 230)}.duet-drawer-toggle:active{opacity:0.75}.duet-drawer-toggle:focus{outline:0}:host(.user-is-tabbing) .duet-drawer-toggle:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}:host(.user-is-tabbing) .duet-theme-turva .duet-drawer-toggle:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-drawer-toggle:hover{color:rgb(0, 77, 128)}.duet-theme-turva .duet-drawer-toggle:hover{color:rgb(68, 68, 69)}.duet-drawer-toggle::after{display:none !important}@media (min-width: 62em){.duet-drawer-toggle::after{position:absolute;top:auto;bottom:0;left:0;display:block !important;width:100%;height:3px;content:\"\";background:rgb(0, 119, 179);transition:300ms ease;transform:translateY(3px)}.duet-theme-turva .duet-drawer-toggle::after{background:rgb(198, 12, 48)}}.duet-drawer-toggle[aria-expanded=true],.duet-drawer-toggle[aria-expanded=true]:hover{color:rgb(0, 77, 128);border-bottom:1px solid rgb(245, 248, 250);border-radius:0}.duet-theme-turva .duet-drawer-toggle[aria-expanded=true],.duet-theme-turva .duet-drawer-toggle[aria-expanded=true]:hover{color:rgb(68, 68, 69);border-color:rgb(245, 245, 247)}@media (min-width: 62em){.duet-drawer-toggle[aria-expanded=true],.duet-drawer-toggle[aria-expanded=true]:hover{border:0}.duet-drawer-toggle[aria-expanded=true]::after,.duet-drawer-toggle[aria-expanded=true]:hover::after{left:0;width:100%;transform:translateY(0)}}.duet-drawer-icon{position:relative;display:inline-flex;min-width:12px;margin-right:12px;font-size:0;line-height:normal;vertical-align:baseline}@media (min-width: 62em){.duet-drawer-icon{margin-right:8px}}.duet-drawer-label{line-height:1}.duet-drawer-caret{position:absolute;top:50%;right:20px;display:flex;width:10px;height:10px;margin-left:8px;line-height:normal;pointer-events:none;transition:300ms ease;transform:translateY(-50%);transform-origin:50% 50%}@media (min-width: 62em){.duet-drawer-caret{right:16px;width:7px;height:7px}}.duet-drawer-caret duet-icon{width:10px}.duet-drawer-toggle[aria-expanded=true] .duet-drawer-caret{transform:translateY(-50%) rotate(180deg)}.duet-drawer-badge{position:absolute;top:0;right:0;display:inline-block;width:6px;height:6px;background:rgb(247, 178, 40);border-radius:50%;box-shadow:0 0 0 1px #c18b1f}.duet-theme-turva .duet-drawer-badge{background:rgb(250, 164, 15)}.duet-drawer-content{display:none;background-color:rgb(255, 255, 255);border-bottom:1px solid rgb(225, 227, 230)}.duet-drawer-content:focus{outline:0}.duet-theme-turva .duet-drawer-content{background-color:rgb(255, 255, 255);border-color:rgb(225, 227, 230)}@media (min-width: 62em){.duet-drawer-content{position:absolute;top:100%;z-index:600;display:block;width:450px;max-height:420px;padding-left:0;overflow-y:auto;visibility:hidden;background-color:rgb(255, 255, 255);border:1px solid rgb(225, 227, 230);border-radius:4px;border-top-left-radius:0;border-top-right-radius:0;box-shadow:0 4px 10px 0 rgba(0, 41, 77, 0.15);opacity:0;transition:300ms ease;transform:scale(0.95) translateZ(0) translateY(-10px);transform-origin:50% 0;scrollbar-width:none}.duet-drawer-content::-webkit-scrollbar{display:none}.duet-theme-turva .duet-drawer-content{background-color:rgb(255, 255, 255)}.duet-drawer-content.duet-drawer-left{right:0}.duet-drawer-content.duet-drawer-right{left:0}}.duet-drawer-content.duet-drawer-open{display:block}@media (min-width: 62em){.duet-drawer-content.duet-drawer-open{visibility:visible;opacity:1;transform:scale(1) translateZ(0) translateY(0)}}";

const ESC_KEY = 27;
const DuetNotificationDrawer$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /**
     * Component event handling.
     */
    this.handleKeyDown = (ev) => {
      if (this.isOpen && ev.keyCode === ESC_KEY) {
        this.close();
      }
    };
    this.toggleMenu = (e) => {
      // this is needed to prevent the main menu closing on mobile
      e.stopPropagation();
      this.isOpen ? this.close() : this.open();
    };
    this.updateNotificationState = () => {
      this.hasNotifications = this.element.children.length > 0;
    };
    this.isOpen = false;
    this.hasNotifications = undefined;
    this.icon = "";
    this.label = "Label";
    this.language = getLanguage();
    this.accessibleLabelNotificationsDefaults = {
      en: "No notifications",
      fi: "Ei ilmoituksia",
      sv: "Inga notifikationer",
    };
    this.accessibleLabelNotifications = getLocaleString(this.accessibleLabelNotificationsDefaults);
    this.badge = false;
    this.theme = "";
    this.direction = "left";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.updateNotificationState();
  }
  connectedCallback() {
    this.observer = new MutationObserver(this.updateNotificationState);
    this.observer.observe(this.element, { childList: true });
  }
  disconnectedCallback() {
    this.observer.disconnect();
    this.observer = null;
  }
  handleClickFocusOutside(e) {
    const target = e.target;
    if (this.isOpen && !this.element.contains(target)) {
      this.close(false);
    }
  }
  /**
   * Move focus to the menu's button. Use instead of the native `focus()` method
   * @param options
   */
  async setFocus(options) {
    this.drawerButtonEl.focus(options);
  }
  /**
   * Open the menu
   */
  async open() {
    const header = this.element.closest("duet-header");
    if (header) {
      header.closeMenus();
    }
    this.isOpen = true;
    this.drawerContentEl.scrollTop = 0;
  }
  /**
   * Close the menu
   * @param moveFocusToButton should focus be moved to the menu's button on close?
   */
  async close(moveFocusToButton = true) {
    this.isOpen = false;
    if (moveFocusToButton) {
      this.setFocus({ preventScroll: true });
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("div", { class: {
        "duet-drawer": true,
        "duet-theme-turva": this.theme === "turva",
      }, onKeyDown: this.handleKeyDown }, h("button", { ref: el => (this.drawerButtonEl = el), type: "button", class: "duet-drawer-toggle", id: "duet-drawer-toggle", "aria-controls": "duet-drawer-content", "aria-expanded": this.isOpen ? "true" : "false", onClick: this.toggleMenu }, this.icon && (h("div", { class: "duet-drawer-icon" }, h("duet-icon", { margin: "none", size: "x-small", name: this.icon, color: "currentColor" }), this.badge && h("div", { class: "duet-drawer-badge" }))), h("span", { class: "duet-drawer-label" }, this.label), h("div", { class: "duet-drawer-caret" }, h("duet-icon", { margin: "none", size: "auto", icon: actionArrowDownSmall.svg, color: "currentColor" }))), h("div", { id: "duet-drawer-content", class: {
        "duet-drawer-content": true,
        "duet-drawer-right": this.direction === "right",
        "duet-drawer-left": this.direction === "left",
        "duet-drawer-open": this.isOpen,
      }, ref: element => (this.drawerContentEl = element) }, this.hasNotifications ? (h("div", { role: "list" }, h("slot", null))) : (h("duet-empty-state", { size: "small" }, h("duet-paragraph", { size: "small", margin: "none" }, this.accessibleLabelNotifications))))));
  }
  get element() { return this; }
  static get style() { return duetNotificationDrawerCss; }
}, [1, "duet-notification-drawer", {
    "icon": [1],
    "label": [1],
    "language": [1],
    "accessibleLabelNotificationsDefaults": [1, "accessible-label-notification-default"],
    "accessibleLabelNotifications": [1, "accessible-label-notifications"],
    "badge": [4],
    "theme": [1025],
    "direction": [1],
    "isOpen": [32],
    "hasNotifications": [32],
    "setFocus": [64],
    "open": [64],
    "close": [64]
  }, [[6, "focus", "handleClickFocusOutside"], [6, "click", "handleClickFocusOutside"]]]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-notification-drawer", "duet-empty-state", "duet-icon", "duet-paragraph"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-notification-drawer":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetNotificationDrawer$1);
      }
      break;
    case "duet-empty-state":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "duet-paragraph":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetNotificationDrawer = DuetNotificationDrawer$1;
const defineCustomElement = defineCustomElement$1;

export { DuetNotificationDrawer, defineCustomElement };
