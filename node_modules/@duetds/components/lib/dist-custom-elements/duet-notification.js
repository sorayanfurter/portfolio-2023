/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { g as getLanguage, a as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-076452be.js';
import { d as defineCustomElement$2 } from './p-1344c068.js';

const duetNotificationCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-notification{display:block;padding:16px;color:rgb(0, 41, 77);cursor:pointer;border-bottom:1px solid rgb(225, 227, 230);transition:300ms ease}:host(:last-of-type) .duet-notification{border-bottom:0}.duet-notification.duet-theme-turva{color:rgb(23, 28, 58);border-bottom-color:rgb(228, 228, 230)}.duet-notification.duet-notification-highlight{font-weight:600;background:rgb(243, 249, 252)}.duet-notification.duet-notification-highlight.duet-theme-turva{background:rgb(252, 243, 244)}@media (min-width: 62em){.duet-notification:hover{background:rgb(243, 249, 252)}.duet-notification:hover.duet-theme-turva{background:rgb(252, 243, 244)}}.duet-notification a{text-decoration:none}.duet-notification a:focus{outline:0}:host(.user-is-tabbing) .duet-notification:focus-within{z-index:1;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}:host(.user-is-tabbing) .duet-notification:focus-within.duet-theme-turva{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-notification-container{position:relative;display:flex}.duet-notification-badge-container{position:relative;width:16px}.duet-notification-badge{position:absolute;top:6px;left:-2px;width:8px;height:8px;background:rgb(0, 119, 179);border-radius:50%}.duet-theme-turva .duet-notification-badge{background:rgb(198, 12, 48)}.duet-notification-content{flex:1}.duet-notification-date{position:absolute;top:2px;right:0;width:96px;font-size:0.75rem;font-weight:600;line-height:1.25;color:rgb(101, 119, 135);text-align:right;text-transform:uppercase}@media (max-width: 35.9375em){.duet-notification-date{width:auto}}.duet-theme-turva .duet-notification-date{color:rgb(68, 68, 69)}::slotted(duet-heading){padding-right:80px !important}::slotted(duet-paragraph){margin-bottom:2px !important}";

const DuetNotification$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.language = getLanguage();
    this.accessibleLabelUnreadDefaults = {
      en: "Unread",
      fi: "Lukematon",
      sv: "OlÃ¤st",
    };
    this.accessibleLabelUnread = getLocaleString(this.accessibleLabelUnreadDefaults, this.language);
    this.url = "#";
    this.date = "";
    this.highlight = false;
    this.external = false;
    this.theme = "";
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabelUnread === this.accessibleLabelUnreadDefaults[oldValue]) {
      this.accessibleLabelUnread = getLocaleString(this.accessibleLabelUnreadDefaults, newValue);
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Move focus to the notification's link element.
   * Use this method instead of the native `focus()` method.
   * @param options
   */
  async setFocus(options) {
    this.linkElement.focus(options);
  }
  render() {
    return (h("div", { role: "listitem", class: {
        "duet-notification": true,
        "duet-notification-highlight": this.highlight,
        "duet-theme-turva": this.theme === "turva",
      } }, h("a", { ref: element => (this.linkElement = element), href: this.url, target: this.external ? "_blank" : "_self" }, h("div", { class: "duet-notification-container" }, h("div", { class: "duet-notification-badge-container" }, this.highlight && (h("div", { class: "duet-notification-badge" }, h("duet-visually-hidden", null, this.accessibleLabelUnread, ":")))), h("div", { class: "duet-notification-content" }, h("slot", null)), h("div", { class: "duet-notification-date" }, this.date)))));
  }
  get element() { return this; }
  static get watchers() { return {
    "language": ["watchLanguageStateHandler"]
  }; }
  static get style() { return duetNotificationCss; }
}, [1, "duet-notification", {
    "language": [1537],
    "accessibleLabelUnreadDefaults": [16],
    "accessibleLabelUnread": [1025, "accessible-label-unread"],
    "url": [1],
    "date": [1],
    "highlight": [4],
    "external": [4],
    "theme": [1025],
    "setFocus": [64]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-notification", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-notification":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetNotification$1);
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetNotification = DuetNotification$1;
const defineCustomElement = defineCustomElement$1;

export { DuetNotification, defineCustomElement };
