/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { F as FocusGuard } from './p-efaad71c.js';
import { g as getLanguage, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver, a as getLocaleString } from './p-076452be.js';
import { g as getColorByName } from './p-de68431d.js';
import { d as defineCustomElement$2 } from './p-0674039c.js';

const duetSlideoutPanelCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;height:100%}:host slot:not([name=label])::slotted(*){position:relative;top:0.5rem;opacity:0;transition:top 0.3s ease-in, opacity 0.3s ease-in}:host([open]) slot:not([name=label])::slotted(*){top:0;opacity:1}.duet-slideout-panel{position:relative;height:100%}.duet-slideout-panel .link{position:relative;display:flex;gap:20px;align-items:center;justify-content:flex-start;width:100%;height:100%;padding:8px 0;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1.5rem;font-weight:800;line-height:1.25;color:rgb(0, 41, 77);text-align:left;text-decoration:none;cursor:pointer}.duet-slideout-panel .link .label{display:flex;gap:0.5rem;align-items:center;justify-content:space-between;width:100%}.duet-slideout-panel .link .label-text.small{font-size:1rem;font-weight:600}.duet-slideout-panel .link .label-text.medium{font-size:1.25rem;font-weight:600}.duet-slideout-panel .link .label-text.large{font-size:1.5rem;font-weight:800}.duet-slideout-panel .link:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-slideout-panel .link.active .label-text{position:relative}.duet-slideout-panel .link.active .label-text.small::after{height:1px;transform:translateY(1px)}.duet-slideout-panel .link.active .label-text::after{position:absolute;top:auto;bottom:0;left:0;display:block;width:100%;height:2px;content:\"\";background:rgb(0, 119, 179);transform:translateY(2px)}.duet-slideout-panel .dialog{position:fixed;top:0;left:0;z-index:600;width:100%;height:100%;overflow-y:auto;visibility:visible}.duet-slideout-panel .dialog.hidden{visibility:hidden}.duet-slideout-panel .dialog.hidden .top .back,.duet-slideout-panel .dialog.hidden .top span{opacity:0}.duet-slideout-panel .top{display:flex;align-items:center;justify-content:space-between;padding:4px}.duet-slideout-panel .top .back{opacity:1;transition:top 0.3s ease-in, opacity 0.3s ease-in}.duet-slideout-panel .top .back:focus,.duet-slideout-panel .top .close:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-slideout-panel .top duet-icon{padding:16px}.duet-slideout-panel .top span{font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600;line-height:1.5;color:rgb(0, 41, 77);opacity:1;transition:top 0.3s ease-in, opacity 0.3s ease-in}.duet-slideout-panel .items{display:flex;flex-direction:column;align-items:flex-start;justify-content:flex-start;padding:1rem 16px;overflow-y:auto;color:rgb(0, 41, 77)}.duet-slideout-panel.duet-theme-turva .link{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-slideout-panel.duet-theme-turva .link:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-slideout-panel.duet-theme-turva .link.active .label-text::after{background:rgb(198, 12, 48)}.duet-slideout-panel.duet-theme-turva .top .back:focus,.duet-slideout-panel.duet-theme-turva .top .close:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-slideout-panel.duet-theme-turva .top span{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}slot:not([name=label]){--active-height:1px;--active-translate-y:translateY(1px);font-size:1rem;font-weight:600;color:rgb(0, 41, 77)}.duet-theme-turva slot:not([name=label]){color:rgb(23, 28, 58)}";

const DuetSlideoutPanel$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.exitLangObject = {
      en: "Exit the menu",
      fi: "Poistu valikosta",
      sv: "Avsluta menyn",
    };
    this.backLangObject = {
      en: "Back to main menu",
      fi: "Takaisin päävalikkoon",
      sv: "Tillbaka till huvudmenyn",
    };
    this.updateLabel = () => {
      const labelSlotElement = this.element.querySelector("[slot='label']");
      this.label = labelSlotElement;
    };
    this.onToggleClick = () => {
      const toggle = !this.open;
      this.open = toggle;
      if (toggle) {
        setTimeout(() => {
          this.closeButton.focus();
        }, 200);
      }
      else {
        setTimeout(() => {
          this.openButton.focus();
        }, 200);
      }
    };
    this.onCloseClick = e => {
      e.stopPropagation();
      const parentElement = this.element.parentElement;
      if (parentElement.tagName === "DUET-SLIDEOUT") {
        const slideout = this.element.parentElement;
        slideout.toggle();
      }
    };
    this.label = undefined;
    this.language = getLanguage();
    this.theme = "";
    this.active = false;
    this.open = false;
    this.icon = undefined;
    this.labelSize = "medium";
    this.backgroundColor = "primary-lightest";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.updateLabel();
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    if (this.open) {
      setTimeout(() => {
        this.closeButton.focus(options);
      }, 200);
    }
    else {
      setTimeout(() => {
        this.openButton.focus(options);
      }, 200);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const defaultBackgroundColor = this.backgroundColor === "primary-lightest"
      ? this.theme === "turva"
        ? "gray-lighter"
        : this.backgroundColor
      : this.backgroundColor;
    const styles = {
      background: getColorByName(defaultBackgroundColor, this.theme),
    };
    const exitTranslation = getLocaleString(this.exitLangObject);
    const backTranslation = getLocaleString(this.backLangObject);
    return (h(Host, null, h("div", { class: {
        "duet-slideout-panel": true,
        "duet-theme-turva": this.theme === "turva",
        active: this.open,
      } }, h("button", { ref: element => (this.openButton = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", "aria-current": this.active ? "true" : "false", id: "button", type: "button", class: {
        link: true,
        active: this.active,
      }, onClick: this.onToggleClick }, this.icon && h("duet-icon", { name: this.icon, size: "medium", margin: "none", color: "secondary" }), h("div", { class: "label" }, h("span", { class: { "label-text": true, [this.labelSize]: true } }, h("slot", { name: "label" })), h("duet-icon", { class: "caret", name: "action-arrow-right", margin: "none", size: "x-small", color: "secondary" }))), h("div", { class: {
        dialog: true,
        hidden: !this.open,
      }, style: styles }, h(FocusGuard, { moveFocusTo: this.closeButton }), h("div", { class: "top" }, h("button", { ref: element => (this.closeButton = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", "aria-label": `${backTranslation}`, type: "button", class: {
        back: true,
      }, onClick: this.onToggleClick }, h("duet-icon", { class: "caret", name: "action-arrow-left", margin: "none", size: "small", color: "secondary" })), h("span", null, this.label.innerHTML), h("button", { class: "close", type: "button", onClick: this.onCloseClick, "aria-label": `${exitTranslation}` }, h("duet-icon", { name: "navigation-close", size: "small", margin: "none", color: "secondary" }))), h("div", { tabindex: "-1", role: "menu", id: "menu", "aria-labelledby": "button", class: {
        items: true,
      } }, h("slot", null)), h(FocusGuard, { moveFocusTo: this.closeButton })))));
  }
  get element() { return this; }
  static get style() { return duetSlideoutPanelCss; }
}, [1, "duet-slideout-panel", {
    "theme": [1025],
    "active": [1540],
    "open": [1540],
    "icon": [1537],
    "labelSize": [1537, "label-size"],
    "backgroundColor": [1537, "background-color"],
    "label": [32],
    "language": [32],
    "setFocus": [64]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-slideout-panel", "duet-icon"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-slideout-panel":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetSlideoutPanel$1);
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetSlideoutPanel = DuetSlideoutPanel$1;
const defineCustomElement = defineCustomElement$1;

export { DuetSlideoutPanel, defineCustomElement };
