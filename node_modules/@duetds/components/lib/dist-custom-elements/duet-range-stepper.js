/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { c as createID } from './p-c1325e35.js';
import { h as isArrowLeftKey, e as isArrowUpKey, n as isMinusKey, l as isArrowKey, j as isArrowRightKey, f as isArrowDownKey, o as isPlusKey } from './p-d8549efe.js';
import { g as getLanguage, a as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-076452be.js';
import { d as defineCustomElement$4 } from './p-3b39da12.js';
import { d as defineCustomElement$3 } from './p-0674039c.js';
import { d as defineCustomElement$2 } from './p-1344c068.js';

const duetRangeStepperCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline-block;margin:0 auto}.duet-range-stepper{display:flex;flex-wrap:wrap;gap:0;align-items:baseline;justify-content:center;min-width:30px;min-height:30px;font-weight:600;text-decoration:none;border-left-width:0}.duet-range-stepper{white-space:nowrap}.duet-range-stepper .duet-range-step-counter{font-weight:600;color:rgb(0, 41, 77)}.duet-range-stepper ::part(button){border:0}";

const DuetRangeStepper$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.duetRangeStepUpdate = createEvent(this, "duetRangeStepUpdate", 7);
    this.leftBn = createID("duetRangeStepper-left");
    this.rightBn = createID("duetRangeStepper-right");
    this.handleClick = (e, direction) => {
      e.preventDefault();
      this.stepIndex += direction;
      this.clampStepIndex();
      this.handleStepClick(e);
    };
    this.language = getLanguage();
    this.theme = "";
    this.stepIndex = 1;
    this.stepSize = 50;
    this.total = 1000;
    this.ariaLabelsDefaults = {
      en: {
        next_increment: "Next range increment",
        previous_increment: "Previous range increment",
        x_of_y: "{0}–{1} of {2}",
      },
      fi: {
        next_increment: "Seuraava välillä",
        previous_increment: "Edellinen välillä",
        x_of_y: "{0}–{1} / {2}",
      },
      sv: {
        next_increment: "Nästa intervall",
        previous_increment: "Föregående intervall",
        x_of_y: "{0}–{1} av {2}",
      },
    };
    this.ariaLabels = getLocaleString(this.ariaLabelsDefaults);
    this.ariaControls = "";
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.ariaLabels === this.ariaLabelsDefaults[oldValue]) {
      this.ariaLabels = getLocaleString(this.ariaLabelsDefaults, newValue);
    }
  }
  watchStepIndexStateHandler(newValue) {
    if (this.leftBnRef && this.rightBnRef) {
      if (newValue <= 1) {
        if (this.element === document.activeElement) {
          this.rightBnRef.setFocus();
        }
        this.leftBnRef.setAttribute("disabled", "");
      }
      else {
        this.leftBnRef.removeAttribute("disabled");
      }
      if (newValue >= this.total / this.stepSize) {
        if (this.element === document.activeElement) {
          this.leftBnRef.setFocus();
        }
        this.rightBnRef.setAttribute("disabled", "");
      }
      else {
        this.rightBnRef.removeAttribute("disabled");
      }
    }
  }
  watchStepSizeStateHandler(newValue, oldValue) {
    if (newValue !== oldValue) {
      if (this.stepIndex * newValue > this.total) {
        this.stepIndex = Math.ceil(this.total / newValue);
      }
      // trigger handler in case a button needs to be disabled or enabled but stepIndex did not change
      this.watchStepIndexStateHandler(this.stepIndex);
    }
  }
  handleStepClick(e) {
    this.duetRangeStepUpdate.emit({
      originalEvent: e,
      component: "duet-range-stepper",
      from: this.getFrom(),
      to: this.getTo(),
      index: this.stepIndex,
    });
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.clampStepIndex();
  }
  componentDidLoad() {
    this.watchStepIndexStateHandler(this.stepIndex);
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  clampStepIndex() {
    if (this.stepIndex < 1) {
      this.stepIndex = 1;
    }
    else if (this.stepIndex * this.stepSize > this.total) {
      this.stepIndex = Math.ceil(this.total / this.stepSize);
    }
  }
  getFrom() {
    return Math.floor((this.stepIndex - 1) * this.stepSize) + 1;
  }
  getTo() {
    return Math.min(Math.floor(this.stepIndex * this.stepSize), this.total);
  }
  generateStepSize() {
    return this.ariaLabels.x_of_y
      .replace("{0}", String(this.getFrom()))
      .replace("{1}", String(this.getTo()))
      .replace("{2}", String(this.total));
  }
  generatePreviousIncrementLabel() {
    if (this.getFrom() === 1) {
      return "";
    }
    return this.ariaLabels.x_of_y
      .replace("{0}", String(Math.max(this.getFrom() - this.stepSize, 1)))
      .replace("{1}", String(Math.min(this.getFrom() - 1, this.total)))
      .replace("{2}", String(this.total));
  }
  generateNextIncrementLabel() {
    if (this.getTo() === this.total) {
      return "";
    }
    return this.ariaLabels.x_of_y
      .replace("{0}", String(this.getTo() + 1))
      .replace("{1}", String(Math.min(this.getTo() + this.stepSize, this.total)))
      .replace("{2}", String(this.total));
  }
  //handle a11y keyboard navigation events
  async onKeyboardDown(e) {
    // handle a11y based keyboard navigation for left/right/up/down
    let next = this.stepIndex;
    let dir = 1;
    if (isArrowLeftKey(e) || isArrowUpKey(e) || isMinusKey(e)) {
      next--;
      dir = -1;
      this.leftBnRef.setFocus();
    }
    if (isArrowRightKey(e) || isArrowDownKey(e) || isPlusKey(e)) {
      next++;
      dir = 1;
    }
    if (isArrowKey(e)) {
      if (next > 0 && next * this.stepSize <= this.total) {
        this.handleClick(e, dir);
      }
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("div", { class: {
        "duet-range-stepper": true,
        "duet-theme-turva": this.theme === "turva",
      }, onKeyDown: e => this.onKeyboardDown(e), "aria-controls": this.ariaControls }, h("span", { class: "duet-range-step-counter", part: "range-numbers" }, this.generateStepSize()), h("duet-action-button", { class: "duet-range-step-button duet-range-step-minus", onClick: e => this.handleClick(e, -1), id: this.leftBn, "accessible-label": `${this.ariaLabels.previous_increment} ${this.generatePreviousIncrementLabel()}`, ref: el => (this.leftBnRef = el), part: "navigation-arrow", iconName: "action-arrow-left-small" }), h("duet-action-button", { class: "duet-range-step-button duet-range-step-plus", onClick: e => this.handleClick(e, 1), "accessible-label": `${this.ariaLabels.next_increment} ${this.generateNextIncrementLabel()}`, id: this.rightBn, ref: el => (this.rightBnRef = el), part: "navigation-arrow", iconName: "action-arrow-right-small" })));
  }
  get element() { return this; }
  static get watchers() { return {
    "language": ["watchLanguageStateHandler"],
    "stepIndex": ["watchStepIndexStateHandler"],
    "stepSize": ["watchStepSizeStateHandler"]
  }; }
  static get style() { return duetRangeStepperCss; }
}, [1, "duet-range-stepper", {
    "theme": [1025],
    "stepIndex": [1026, "step-index"],
    "stepSize": [2, "step-size"],
    "total": [2],
    "ariaLabelsDefaults": [16],
    "ariaLabels": [1040],
    "ariaControls": [1, "accessible-controls"],
    "language": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-range-stepper", "duet-action-button", "duet-icon", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-range-stepper":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetRangeStepper$1);
      }
      break;
    case "duet-action-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetRangeStepper = DuetRangeStepper$1;
const defineCustomElement = defineCustomElement$1;

export { DuetRangeStepper, defineCustomElement };
