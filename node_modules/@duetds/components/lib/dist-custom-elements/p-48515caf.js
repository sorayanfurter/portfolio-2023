/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { d as defineCustomElement$4 } from './p-351d00f1.js';
import { d as defineCustomElement$3 } from './p-0674039c.js';
import { d as defineCustomElement$2 } from './p-1ac08a92.js';
import { d as defineCustomElement$1 } from './p-1344c068.js';

const duetScrollableCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;-webkit-tap-highlight-color:transparent}:host{position:relative !important}:host .duet-scrollable-items{display:flex}:host .duet-scrollable-items .duet-scrollable-button{position:relative;flex:0 0 auto;flex-basis:40px;padding:10px;cursor:pointer}:host .duet-scrollable-items .duet-scrollable-button:active{transform:scale(0.8)}:host .duet-scrollable-items .duet-scrollable-button--left{left:-12px}:host .duet-scrollable-items .duet-scrollable-button--right{right:-12px}:host .duet-scrollable-items .duet-scrollable-button--occluded{display:none}:host .duet-scrollable-items .duet-scrollable-list{display:flex;flex-wrap:nowrap;gap:20px;padding-top:2px;overflow-x:auto;overflow-y:hidden;white-space:nowrap;scroll-snap-type:x mandatory;scroll-behavior:smooth;scroll-margin:0 20px;-ms-overflow-style:-ms-autohiding-scrollbar;-webkit-overflow-scrolling:touch;}:host .duet-scrollable-items .duet-scrollable-list:not(.buttons){white-space:normal}:host .duet-scrollable-items .duet-scrollable-list::-webkit-scrollbar{display:none}:host .duet-scrollable-items .duet-scrollable-list.collapsed{flex-wrap:wrap}:host .duet-scrollable-items.center{justify-content:center}:host .duet-scrollable-items.center .duet-scrollable-list.collapsed{justify-content:center}.collapse{width:100%;text-align:center}.collapse.hide{visibility:hidden}::slotted(*){scroll-snap-align:center;margin-left:0;-webkit-transition:-webkit-transform 0.2s ease-in-out;transition:-webkit-transform 0.2s ease-in-out;transition:transform 0.2s ease-in-out;transition:transform 0.2s ease-in-out, -webkit-transform 0.2s ease-in-out}";

const DuetScrollable = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /**
     * Private variables and constants index
     */
    this.currentIndex = 0;
    this.tabListElement = undefined;
    this.tabListClass = "duet-scrollable-list";
    this.hasCollapseButtonLabelSlot = false;
    this.resizeObserver = new ResizeObserver(entries => {
      var _a, _b, _c, _d;
      // otherwise, something is wrong, expecting 1 element only
      if ((entries === null || entries === void 0 ? void 0 : entries.length) === 1) {
        const currentWidth = (_b = (_a = entries[0]) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect().width;
        const scrollWidth = (_d = (_c = entries[0]) === null || _c === void 0 ? void 0 : _c.target) === null || _d === void 0 ? void 0 : _d.scrollWidth;
        // in order to avoid state "jumping" on the boundary condition we add a few pixels to the comparison
        this.isTabContentSmallerThanWrapper = scrollWidth > currentWidth + 5;
      }
    });
    this.collapsedOnClick = () => {
      this.collapsed = !this.collapsed;
    };
    this.tablistAtStart = true;
    this.isTabContentSmallerThanWrapper = false;
    this.tablistAtEnd = false;
    this.childrenData = {};
    this.theme = "";
    this.identifier = "";
    this.collapsed = false;
    this.buttons = true;
    this.center = false;
    this.selected = 0;
  }
  watchPropHandler(newValue) {
    this.scrollToTab(newValue, "center");
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.hasCollapseButtonLabelSlot = !!this.host.querySelector(":scope > [slot='collapse-button-label']");
    const slotted = this.host.querySelectorAll(":scope > :not([slot='collapse-button-label'])");
    this.childrenData = { hasChildren: slotted && slotted.length > 0, numberOfChildren: slotted && slotted.length };
  }
  componentDidLoad() {
    this.resizeObserver.observe(this.tabListElement);
  }
  disconnectedCallback() {
    this.resizeObserver.disconnect();
  }
  /**
   * Private methods.
   */
  getLastVisibleElement() {
    const clientWidth = this.tabListElement.clientWidth;
    const xValues = Array.from(this.host.querySelectorAll("button")).findIndex(element => element.getBoundingClientRect().x > clientWidth);
    return xValues;
  }
  getFirstVisibleElement() {
    const buttonCollection = this.host.querySelectorAll("button");
    // reverse the array because we want the first invisible element form the middle, not the first in the list
    const arrayOfXValues = Array.from(buttonCollection).map(el => el.getBoundingClientRect().x - el.getBoundingClientRect().width);
    const xValues = arrayOfXValues.findIndex(element => {
      return element > 0;
    });
    return xValues;
  }
  updateScrollButtons(container = this.tabListElement) {
    if (!this.buttons) {
      return;
    }
    if (container.scrollLeft <= 0) {
      this.tablistAtStart = true;
    }
    else if (container.scrollLeft > 0) {
      this.tablistAtStart = false;
    }
    if (container.clientWidth + container.scrollLeft + 10 >= container.scrollWidth) {
      this.tablistAtEnd = true;
    }
    else if (container.clientWidth + container.scrollLeft + 10 < container.scrollWidth) {
      this.tablistAtEnd = false;
    }
  }
  scrollToTab(index = this.currentIndex, inline) {
    if (!this.childrenData.hasChildren) {
      return;
    }
    if (index + 1 >= this.childrenData.numberOfChildren) {
      index = this.childrenData.numberOfChildren - 1;
    }
    if (index < 0) {
      index = 0;
    }
    const buttons = this.host.querySelectorAll("button");
    // store previous position
    let prevPosition = buttons[0].getBoundingClientRect().x;
    // iterations to run
    let ticksWhereScrollDidNotHappen = 5;
    const getAnimationFrame = () => {
      // if we get the same value enter the logic loop
      if (buttons[0].getBoundingClientRect().x === prevPosition) {
        ticksWhereScrollDidNotHappen--;
        // When iteration is not complete run the calculation again
        if (ticksWhereScrollDidNotHappen !== 0) {
          window.requestAnimationFrame(getAnimationFrame);
          return;
        }
        this.updateScrollButtons();
      }
      else {
        window.requestAnimationFrame(getAnimationFrame);
        prevPosition = buttons[0].getBoundingClientRect().x;
      }
    };
    buttons[index].scrollIntoView({ behavior: "smooth", inline });
    window.requestAnimationFrame(getAnimationFrame);
  }
  scrollLeft() {
    this.tablistAtEnd = false;
    const first = this.getFirstVisibleElement() - 1;
    this.scrollToTab(first, "center");
  }
  scrollRight() {
    this.tablistAtStart = false;
    const last = this.getLastVisibleElement() + 1;
    this.scrollToTab(last, "center");
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { class: {
        "duet-theme-turva": this.theme === "turva",
        "duet-theme-default": this.theme === "default",
      } }, this.hasCollapseButtonLabelSlot && (h("div", { class: {
        collapse: true,
        hide: !this.isTabContentSmallerThanWrapper && !this.collapsed,
      } }, h("duet-button", { variation: "plain", margin: "none", "center-text": true, onClick: () => this.collapsedOnClick() }, h("slot", { name: "collapse-button-label" })))), h("div", { class: {
        "duet-scrollable-items": true,
        buttons: this.buttons,
        center: this.center,
      } }, h("button", { part: `${this.identifier}-button-left`, "aria-hidden": "true", class: {
        "duet-scrollable-button": true,
        "duet-scrollable-button--left": true,
        "duet-scrollable-button--occluded": !this.isTabContentSmallerThanWrapper,
      }, onClick: () => this.scrollLeft(), disabled: this.tablistAtStart, tabindex: "-1", hidden: !this.buttons }, h("duet-icon", { name: "action-arrow-left-small", size: "small", margin: "none" })), h("div", { class: {
        [this.tabListClass]: true,
        collapsed: this.collapsed,
      }, onScroll: () => this.updateScrollButtons(), ref: element => (this.tabListElement = element) }, h("slot", null)), h("button", { part: `${this.identifier}-button-right`, "aria-hidden": "true", class: {
        "duet-scrollable-button": true,
        "duet-scrollable-button--right": true,
        "duet-scrollable-button--occluded": !this.isTabContentSmallerThanWrapper,
      }, onClick: () => this.scrollRight(), disabled: this.tablistAtEnd, tabindex: "-1", hidden: !this.buttons }, h("duet-icon", { name: "action-arrow-right-small", size: "small", margin: "none" })))));
  }
  get host() { return this; }
  static get watchers() { return {
    "selected": ["watchPropHandler"]
  }; }
  static get style() { return duetScrollableCss; }
}, [1, "duet-scrollable", {
    "theme": [1025],
    "identifier": [1],
    "collapsed": [1540],
    "buttons": [4],
    "center": [4],
    "selected": [1026],
    "tablistAtStart": [32],
    "isTabContentSmallerThanWrapper": [32],
    "tablistAtEnd": [32],
    "childrenData": [32]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-scrollable", "duet-button", "duet-icon", "duet-spinner", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-scrollable":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetScrollable);
      }
      break;
    case "duet-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "duet-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DuetScrollable as D, defineCustomElement as d };
