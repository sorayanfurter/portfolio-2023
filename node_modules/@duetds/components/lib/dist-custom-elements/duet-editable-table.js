/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h as h$1, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { f as fieldSorter } from './p-0b3f675e.js';
import { i as isKeyboardClick } from './p-d8549efe.js';
import { g as getLanguage, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver, a as getLocaleString } from './p-076452be.js';
import { h } from './p-152ee893.js';
import { d as defineCustomElement$7 } from './p-3b39da12.js';
import { d as defineCustomElement$6 } from './p-351d00f1.js';
import { d as defineCustomElement$5 } from './p-0674039c.js';
import { d as defineCustomElement$4 } from './p-1ac08a92.js';
import { d as defineCustomElement$3 } from './p-8b72e2b2.js';
import { d as defineCustomElement$2 } from './p-1344c068.js';

//simple functional component that renders the data in the table
const TableData = ({ data, groupId, alignment }, _children) => {
  const classNames = `duet-editable-table duet-editable-table-content-${groupId}`;
  if (typeof data === "string") {
    return h("td", { innerHTML: data, class: classNames, part: `${groupId}content`, style: { verticalAlign: alignment } });
  }
  else {
    return (h("td", { class: classNames, part: `${groupId}content`, style: { verticalAlign: alignment } }, data));
  }
};

const duetEditableTableCss = ".sc-duet-editable-table-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.duet-editable-table-actions-menu.sc-duet-editable-table{position:relative;padding:0 !important;margin:0}.duet-editable-table-actions-menu-button.sc-duet-editable-table{position:relative;right:-16px;float:right;padding:0}.duet-editable-table-actions-menu-icon.sc-duet-editable-table .duet-icon.sc-duet-editable-table{max-width:16px;max-height:16px}.duet-editable-table-row.duet-table-action-row.sc-duet-editable-table .duet-text-right.sc-duet-editable-table{text-align:right}.duet-editable-table-header.sc-duet-editable-table tr.sc-duet-editable-table .duet-editable-table-header-hidden.sc-duet-editable-table{padding:0 !important;font-size:0;border-bottom:0}";

const DuetEditableTable$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.duetTableToggle = createEvent(this, "duetTableToggle", 7);
    this.duetMenuClick = createEvent(this, "duetMenuClick", 7);
    this.hasHeadSlotFirst = false;
    this.hasHeadSlotLast = false;
    this.sortableDefaultLabel = {
      fi: "Järjestä",
      en: "Click to sort",
      sv: "Klicka för att sortera",
    };
    this.actionColumnLabel = {
      en: "Actions for rows",
      fi: "Toiminnot rivillä",
      sv: "Åtgärder för rader",
    };
    /**
     * Private methods.
     */
    this.toggleColumn = (column, e) => {
      e.preventDefault();
      const { sort_order, direction, index, key } = column;
      this.duetTableToggle.emit({
        sort_order,
        index,
        direction,
        key,
        component: "duet-editable-table",
        originalEvent: e,
      });
    };
    this.handleKeyDown = (column, e) => {
      if (isKeyboardClick(e)) {
        this.toggleColumn(column, e);
      }
    };
    this.language = getLanguage();
    this.margin = "auto";
    this.variation = "striped";
    this.sticky = false;
    this.stickyDistance = "with-links";
    this.breakpoint = "small";
    this.actions = undefined;
    this.columns = undefined;
    this.rows = undefined;
    this.sortable = false;
    this.groupId = "";
    this.theme = "";
    this.accessibleRole = undefined;
    this.hideHeadVisually = false;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.hasHeadSlotFirst = !!this.element.querySelector("[slot='thead-first']");
    this.hasHeadSlotLast = !!this.element.querySelector("[slot='thead-last']");
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  createLabel(column) {
    const { sort_order, direction, index, label } = column;
    const i18nLabel = getLocaleString(label);
    if (!this.sortable) {
      return i18nLabel;
    }
    const getButtonIcon = () => {
      // "action-subtract-small" https://cdn.duetds.com/api/icons/2.2.12/lib/assets/action-subtract-small.svg
      // "action-arrow-down-small" https://cdn.duetds.com/api/icons/2.2.12/lib/assets/action-arrow-down-small.svg
      // "action-arrow-up-small" https://cdn.duetds.com/api/icons/2.2.12/lib/assets/action-arrow-up-small.svg
      if (!!sort_order && direction === 1) {
        return "action-arrow-down-small";
      }
      else if (!!sort_order && direction === -1) {
        return "action-arrow-up-small";
      }
      return "action-subtract-small";
    };
    return (h$1("span", { class: "duet-table-label", "data-index": index }, h$1("duet-button", { size: "small", icon: getButtonIcon(), "icon-size": "medium-small", "accessible-label": this.sortableDefaultLabel[this.language], variation: "plain", margin: "none", "icon-right": true, onClick: event => this.toggleColumn(column, event), onKeyDown: event => this.handleKeyDown(column, event) }, i18nLabel)));
  }
  getSortedColumns() {
    //create a new array from sort instead of mutating original
    return [...this.columns].sort(fieldSorter(["index"]));
  }
  getRowSortOrder() {
    //create a new array from sort instead of mutating original
    const fields = [...this.columns].sort(fieldSorter(["sort_order"]));
    //return only key from objects that have sort_order
    return fields
      .filter(column => column.sort_order)
      .map(column => {
      // add - in-front of descending direction (required by field-sorter)
      return column.direction === -1 ? `-${column.key}` : column.key;
    });
  }
  renderTableHeader() {
    if (!this.columns) {
      return;
    }
    const sortedColumns = this.getSortedColumns();
    return (h$1("tr", { class: {
        "duet-table-action-header": !!this.actions,
      } }, sortedColumns.map(column => {
      if (column.display !== false) {
        const label = this.createLabel(column);
        return label !== "" ? h$1("th", { scope: "col" }, label) : h$1("td", null);
      }
    }), this.actions && (h$1("th", { scope: "col", class: "duet-table-action-header-heading" }, this.actions && h$1("duet-visually-hidden", null, this.actionColumnLabel[this.language])))));
  }
  renderActions(rowItem, index) {
    // escape early
    if (!this.actions) {
      return;
    }
    // iterate through actions and add them in the sidebar
    return (h$1("td", { class: "duet-text-right" }, this.actions.map(actionItem => {
      return (h$1("duet-action-button", { actionMeta: Object.assign({}, (rowItem === null || rowItem === void 0 ? void 0 : rowItem.meta) || {}, { index }), actionId: (rowItem === null || rowItem === void 0 ? void 0 : rowItem.uid) || (rowItem === null || rowItem === void 0 ? void 0 : rowItem.id) || null, actionName: actionItem.name, theme: this.theme, iconName: actionItem.icon, iconColor: actionItem.color, iconSize: actionItem.size, background: actionItem.background, "accessible-label": `${rowItem.actionDescription || ""} ${getLocaleString(actionItem.label)} ` }));
    })));
  }
  renderTableBody() {
    const columns = this.getSortedColumns();
    const rowSortOrder = this.getRowSortOrder();
    const sortedRows = [...this.rows].sort(fieldSorter(rowSortOrder));
    // return a tbody with rows for each item in sortedRows
    return sortedRows.map((row, index) => (h$1("tr", { class: {
        "duet-table-action-row": !!this.actions,
        "duet-editable-table-row": true,
        [`duet-editable-table-row-${this.groupId}`]: true,
      }, "data-meta": JSON.stringify(row.meta) }, columns.map(column => {
      //if we don't have any data for this column, try getting an item instead (for backwards compatibility
      const value = row[column.key] ? row[column.key] : row.item;
      if (column.display !== false) {
        return h$1(TableData, { data: value, groupId: this.groupId });
      }
    }), this.actions && this.renderActions(row, index))));
  }
  /**
   * Render Methods
   */
  render() {
    return (h$1(Host, { class: {
        [`duet-editable-table-${this.variation}`]: true,
        "duet-editable-table": true,
        [`duet-editable-table-${this.theme}`]: true,
        // sticky only valid when in regular table layout
        "duet-editable-table-scrollable": this.breakpoint === "none-scrollable",
        "duet-editable-table-sortable": this.sortable,
        "duet-editable-table-actions": !!this.actions,
        "duet-m-0": this.margin === "none",
        "duet-theme-turva": this.theme === "turva",
      } }, h$1("duet-table", { class: "duet-editable-table-table", sticky: this.sticky, stickyDistance: this.stickyDistance, margin: this.margin, theme: this.theme, variation: this.variation, breakpoint: this.breakpoint, "hide-head-visually": this.hideHeadVisually }, h$1("table", { role: this.accessibleRole }, h$1("caption", null, h$1("slot", { name: "tcaption" })), h$1("thead", null, this.hasHeadSlotFirst && (h$1("tr", null, h$1("td", { class: "duet-editable-table-actions-menu", colSpan: 99 }, h$1("slot", { name: "thead-first" })))), this.renderTableHeader(), this.hasHeadSlotLast && (h$1("tr", null, h$1("td", { class: "duet-editable-table-actions-menu", colSpan: 99 }, h$1("slot", { name: "thead-last" }))))), h$1("tbody", null, this.renderTableBody()), h$1("tfoot", null, h$1("tr", null, h$1("th", { class: "duet-editable-table-footer-menu", colSpan: 99 }, h$1("slot", { name: "tfoot" }))))))));
  }
  get element() { return this; }
  static get style() { return duetEditableTableCss; }
}, [6, "duet-editable-table", {
    "margin": [1],
    "variation": [1],
    "sticky": [4],
    "stickyDistance": [1, "sticky-distance"],
    "breakpoint": [1],
    "actions": [1040],
    "columns": [1040],
    "rows": [1040],
    "sortable": [4],
    "groupId": [1, "group-id"],
    "theme": [1025],
    "accessibleRole": [1, "accessible-role"],
    "hideHeadVisually": [4, "hide-head-visually"],
    "language": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-editable-table", "duet-action-button", "duet-button", "duet-icon", "duet-spinner", "duet-table", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-editable-table":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetEditableTable$1);
      }
      break;
    case "duet-action-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "duet-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "duet-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "duet-table":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetEditableTable = DuetEditableTable$1;
const defineCustomElement = defineCustomElement$1;

export { DuetEditableTable, defineCustomElement };
