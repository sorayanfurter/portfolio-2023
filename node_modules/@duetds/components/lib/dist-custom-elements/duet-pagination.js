/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h, F as Fragment, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { c as createID } from './p-c1325e35.js';
import { d as debounce } from './p-0b3f675e.js';
import { l as isArrowKey, m as isNumber, h as isArrowLeftKey, e as isArrowUpKey, j as isArrowRightKey, f as isArrowDownKey } from './p-d8549efe.js';
import { g as getLanguage, a as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-076452be.js';
import { d as defineCustomElement$7 } from './p-3b39da12.js';
import { d as defineCustomElement$6 } from './p-d9a3be78.js';
import { d as defineCustomElement$5 } from './p-351d00f1.js';
import { d as defineCustomElement$4 } from './p-0674039c.js';
import { d as defineCustomElement$3 } from './p-1ac08a92.js';
import { d as defineCustomElement$2 } from './p-1344c068.js';

const shouldDisplayNavigation = (visibleItems, total, take) => {
  if (visibleItems * 2 > total / take) {
    return false;
  }
  return true;
};

const duetPaginationCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:inline-block;margin:0 auto}.duet-pagination-nav{position:relative}.duet-pagination ::part(button){border:0}.duet-pagination,.duet-pagination li{display:flex;flex-wrap:wrap;gap:0.1rem;align-items:center}.duet-pagination-item-is-active .duet-pagination-page-number{border-bottom-color:inherit;border-bottom-style:solid;border-bottom-width:2px}.duet-pagination duet-button{width:30px;min-width:36px;font-weight:600;text-decoration:none;border-left-width:0}.duet-pagination-overlay{position:absolute;top:1rem;z-index:300;width:100%;text-align:center}.duet-pagination.duet-pagination-is-dimmed{opacity:0.5}";

const DuetPagination$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.duetPageChange = createEvent(this, "duetPageChange", 3);
    this.listId = createID("duet-pagination-list");
    /**
     * Private methods.
     */
    // called from the watcher and used to make sure any changed to current also updates the internal section index
    this.actionChain = async (after, before) => {
      if (after === 0) {
        this.current = 1;
      }
      else if (before !== after) {
        const calculatedSectionIndex = Math.ceil(after / this.visibleItems) - 1;
        if (calculatedSectionIndex !== this.internalSectionIndex) {
          this.internalSectionIndex = calculatedSectionIndex;
          await this.setFocus();
        }
      }
      return true;
    };
    //helper to emit relevant page events
    this.emitPageEvent = debounce((ev, passedPage) => {
      const page = Number(passedPage || this.current);
      this.duetPageChange.emit({
        component: "duet-pagination",
        from: page * this.take,
        to: page * this.take + this.take,
        current: page,
        take: this.take,
        type: "page",
        originalEvent: ev,
      });
    }, 100);
    // this will return the entered number, or the current page if the user presses enter
    this.getEnteredNumber = debounce(ev => {
      this.emitPageEvent(ev, this.numbersStore);
      this.current = Number(this.numbersStore);
      this.numbersStore = "";
      this.duetPageChange.emit({
        component: "duet-pagination",
        from: this.current * this.take,
        to: this.current * this.take + this.take,
        current: this.current,
        take: this.take,
        type: "jump",
        originalEvent: ev,
      });
    }, 500);
    this.numbersStore = "";
    this.totalPages = 10;
    this.internalSectionIndex = 0;
    this.language = getLanguage();
    this.theme = "";
    this.jumpString = "...";
    this.variation = "default";
    this.accessibleDescribedBy = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleLabelsDefaults = {
      en: {
        next_page: "Next page",
        previous_page: "Previous page",
        first_page: "First page",
        last_page: "Last page",
        jump_to: "Jump to page",
        go_to: "Go to page",
        description: "You may use arrow keys to select page number",
        pagination_label: "Pagination, choose a number to jump to a page",
        prev_section: "Show previous {0} page numbers, screen reader user should use arrowkeys to navigate",
        next_section: "Show next {0} page numbers, screen reader user should use arrowkeys to navigate",
      },
      fi: {
        next_page: "Seuraava sivu",
        previous_page: "Edellinen sivu",
        first_page: "Ensimmäinen sivu",
        last_page: "Viimeinen sivu",
        jump_to: "Siirry sivulle",
        go_to: "Siirry sivulle",
        description: "Voit käyttää nuolinäppäimiä sivunumeron valitsemiseen",
        pagination_label: "Sivutus, valitse sivunumero siirtyäksesi sivulle",
        prev_section: "Näytä edelliset {0} sivunumerot, käyttäjän pitää käyttää nuolinäppäimiä navigoidaksesi",
        next_section: "Näytä seuraavat {0} sivunumerot, käyttäjän pitää käyttää nuolinäppäimiä navigoidaksesi",
      },
      sv: {
        next_page: "Nästa sida",
        previous_page: "Föregående sida",
        first_page: "Första sidan",
        last_page: "Sista sidan",
        jump_to: "Hoppa till sida",
        go_to: "Hoppa till sida",
        description: "Du kan använda piltangenterna för att välja sida",
        pagination_label: "Sidutning, välj en siffra för att hoppa till en sida",
        prev_section: "Visa föregående {0} sidnummer, skrivbordsläsare ska använda piltangenterna för att navigera",
        next_section: "Visa nästa {0} sidnummer, skrivbordsläsare ska använda piltangenterna för att navigera",
      },
    };
    this.accessibleLabels = getLocaleString(this.accessibleLabelsDefaults);
    this.take = 5;
    this.visibleItems = 5;
    this.total = 1000;
    this.ariaControls = "";
    this.current = 1;
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabels === this.accessibleLabelsDefaults[oldValue]) {
      this.accessibleLabels = getLocaleString(this.accessibleLabelsDefaults, newValue);
    }
  }
  watchPropTotalHandler( /*newValue: boolean, oldValue: boolean*/) {
    this.calculatePageTake();
    return true;
  }
  watchStateHandler(newValue, oldValue) {
    return this.actionChain(newValue, oldValue);
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    // we want to keep the internal current index in sync with the current prop, but take advantage of the multiple with 0 for the first iteration
    this.internalSectionIndex = Math.ceil(this.current / this.visibleItems) - 1;
    this.calculatePageTake();
    inheritGlobalTheme(this);
  }
  componentWillRender() {
    if (this.internalSectionIndex !== 0 && this.internalSectionIndex !== this.totalPages) {
      this.calculatePageTake();
    }
  }
  componentDidRender() {
    this.setFocus();
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  //get totalpages from visible and total
  calculatePageTake() {
    this.totalPages = Math.ceil(this.total / this.take);
  }
  //set update current when mouse click on page number
  async onMouseHandler(e, dir) {
    e.preventDefault();
    e.stopPropagation();
    this.current = this.current + dir;
    this.emitPageEvent(e);
  }
  //handle a11y keyboard navigation events
  async onKeyboardDown(e) {
    let next = this.current;
    // handle a11y based keyboard navigation for left/right/up/down
    if (isArrowLeftKey(e) || isArrowUpKey(e)) {
      next--;
    }
    if (isArrowRightKey(e) || isArrowDownKey(e)) {
      next++;
    }
    if (isArrowKey(e)) {
      if (next <= this.totalPages) {
        this.current = next;
        this.emitPageEvent(e);
      }
    }
    //handle the jump feature, where numbers can be entered
    // this isn't supported in NVDA where the number buttons are used by NVDA itself
    // and because of that the feature is not announced for screenreaders
    if (isNumber(e) && this.shouldDisplayNavigation()) {
      this.numbersStore = this.numbersStore + e.key;
      if (Number(this.numbersStore) > this.totalPages) {
        this.numbersStore = this.totalPages + "";
      }
      this.getEnteredNumber(e);
    }
  }
  // utility to set focus on active button
  async setFocus() {
    const currentDomElement = this.nativeNav.querySelector(`li.duet-pagination-item-is-active duet-button`);
    currentDomElement && (await currentDomElement.setFocus());
  }
  //handles click on page numbers
  pageClickHandler(e) {
    e.preventDefault();
    const clickedId = Number(e.target.getAttribute("data-id"));
    this.current = clickedId;
    this.emitPageEvent({}, clickedId);
  }
  //handles click on the next section buttons
  sectionClickHandler(e, direction) {
    e.preventDefault();
    let next = this.internalSectionIndex + direction;
    const takePerVisibleItems = this.take * this.visibleItems;
    if (next * takePerVisibleItems > this.total) {
      next = this.internalSectionIndex;
    }
    const newSection = next;
    this.internalSectionIndex = newSection >= 0 ? newSection : 0;
  }
  //handles click on the jump (1)button
  jumpToStart(e) {
    e.preventDefault();
    this.internalSectionIndex = 0;
    this.current = 1;
    this.emitPageEvent(e);
  }
  //handles click on the jump (total) button
  jumpToEnd(e) {
    e.preventDefault();
    this.internalSectionIndex = Math.ceil(this.totalPages / this.take - 1);
    this.current = this.totalPages;
    this.emitPageEvent(e);
  }
  // render the individual page numbers
  renderPageNumbers() {
    const items = [];
    let i = this.internalSectionIndex * this.visibleItems;
    do {
      i++;
      if (i > this.totalPages) {
        break;
      }
      items.push(h("li", { class: {
          "duet-pagination-item": true,
          "duet-pagination-item-is-active": i === this.current,
        }, role: "menuitem" }, h("duet-button", { class: {
          "duet-pagination-link": true,
        }, color: i !== this.current
          ? this.theme !== "turva"
            ? "secondary"
            : "secondary-turva"
          : this.theme !== "turva"
            ? "primary"
            : "primary-turva", "data-id": i, "center-text": true, variation: "plain", margin: "none", accessibleLabel: `${this.accessibleLabels.go_to} ${i}`, onClick: e => this.pageClickHandler(e), theme: this.theme }, h("div", { class: "duet-pagination-page-number", "aria-hidden": true }, i))));
    } while (i < this.visibleItems + this.internalSectionIndex * this.visibleItems);
    return items;
  }
  shouldDisplayNavigation() {
    if (this.variation !== "compact") {
      return shouldDisplayNavigation(this.visibleItems, this.total, this.take);
    }
    return false;
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { onKeyDown: e => this.onKeyboardDown(e) }, h("nav", { role: "navigation", "aria-labelledby": this.accessibleLabelledBy ? `${this.accessibleLabelledBy} ${this.listId}` : this.listId, "aria-describedby": this.accessibleDescribedBy ? `${this.accessibleDescribedBy} ${this.listId}` : this.listId, "aria-descriptions": this.accessibleDescription, "aria-details": this.accessibleDetails, ref: el => (this.nativeNav = el), "aria-controls": this.ariaControls, class: {
        "duet-pagination-nav": true,
        [`duet-pagination-variation-${this.variation}`]: true,
      } }, this.numbersStore !== "" && (h("div", { "aria-live": "assertive", "aria-relevant": "text", class: "duet-pagination-overlay", "aria-label": `${this.accessibleLabels.jump_to} ${this.numbersStore}`, part: "navigation-overlay" }, h("duet-badge", { theme: this.theme }, "jump to page : ", this.numbersStore))), h("ol", { id: this.listId, class: {
        "duet-pagination": true,
        "duet-pagination-is-dimmed": this.numbersStore !== "",
      }, role: "menubar", "aria-label": this.accessibleLabels.pagination_label, "aria-description": this.accessibleLabels.description }, h("li", { class: {
        "duet-pagination-page-button": true,
        "duet-pagination-button-first": true,
      }, role: "menuitem", part: "navigation-arrow" }, h("duet-action-button", { disabled: this.internalSectionIndex === 0 && this.current <= 1, "data-direction": "back", onClick: e => this.onMouseHandler(e, -1), "accessible-label": this.accessibleLabels.previous_page, "icon-name": "action-arrow-left-small", theme: this.theme })), this.internalSectionIndex !== 0 && this.shouldDisplayNavigation() && (h(Fragment, null, h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-jump" }, h("duet-button", { class: "duet-pagination-link duet-pagination-link-jump-back", "center-text": "true", variation: "plain", color: this.theme !== "turva" ? "secondary" : "secondary-turva", margin: "none", accessibleLabel: this.accessibleLabels.first_page, onClick: e => this.jumpToStart(e), theme: this.theme }, h("div", { class: "duet-pagination-page-number" }, "1"))), h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-section" }, h("duet-button", { class: "duet-pagination-link duet-pagination-link-dots-back", "center-text": "true", color: this.theme !== "turva" ? "secondary" : "secondary-turva", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.prev_section.replace("{0}", `${this.visibleItems}`), onClick: e => this.sectionClickHandler(e, -1), theme: this.theme }, h("div", { class: "duet-pagination-page-number", "aria-hidden": "true" }, "..."))))), this.renderPageNumbers(), this.internalSectionIndex * (this.visibleItems + 2) < this.totalPages && this.shouldDisplayNavigation() && // eslint-disable-line
      (h(Fragment, null, h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-section" }, h("duet-button", { class: "duet-pagination-link duet-pagination-link-dots-forward", "center-text": "true", color: this.theme !== "turva" ? "secondary" : "secondary-turva", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.next_section.replace("{0}", `${this.visibleItems}`), onClick: e => this.sectionClickHandler(e, 1), theme: this.theme }, h("div", { class: "duet-pagination-page-number", "aria-hidden": "true" }, "..."))), h("li", { class: "duet-pagination-item", role: "menuitem", part: "navigation-jump" }, h("duet-button", { class: "duet-pagination-link duet-pagination-link-jump-forward", "center-text": "true", color: this.theme !== "turva" ? "secondary" : "secondary-turva", variation: "plain", margin: "none", accessibleLabel: this.accessibleLabels.last_page, onClick: e => this.jumpToEnd(e), theme: this.theme }, h("div", { class: "duet-pagination-page-number" }, this.totalPages))))), h("li", { class: {
        "duet-pagination-page-button": true,
        "duet-pagination-button-last": true,
      }, role: "menuitem", part: "navigation-arrow" }, h("duet-action-button", { disabled: this.current === this.totalPages &&
        this.internalSectionIndex === Math.ceil(this.totalPages / this.visibleItems) - 1, class: "duet-date-dialog-next", "accessible-label": this.accessibleLabels.next_page, onClick: e => this.onMouseHandler(e, 1), "icon-name": "action-arrow-right-small", theme: this.theme }))))));
  }
  get element() { return this; }
  static get watchers() { return {
    "language": ["watchLanguageStateHandler"],
    "total": ["watchPropTotalHandler"],
    "current": ["watchStateHandler"]
  }; }
  static get style() { return duetPaginationCss; }
}, [1, "duet-pagination", {
    "theme": [1025],
    "jumpString": [1, "jump-string"],
    "variation": [1],
    "accessibleDescribedBy": [1, "accessible-described-by"],
    "accessibleDetails": [1, "accessible-details"],
    "accessibleLabelledBy": [1, "accessible-labelled-by"],
    "accessibleDescription": [1, "accessible-description"],
    "accessibleLabelsDefaults": [16],
    "accessibleLabels": [1040],
    "take": [2],
    "visibleItems": [2, "visible-items"],
    "total": [2],
    "ariaControls": [1, "accessible-controls"],
    "current": [1026],
    "numbersStore": [32],
    "totalPages": [32],
    "internalSectionIndex": [32],
    "language": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-pagination", "duet-action-button", "duet-badge", "duet-button", "duet-icon", "duet-spinner", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-pagination":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetPagination$1);
      }
      break;
    case "duet-action-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "duet-badge":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "duet-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "duet-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetPagination = DuetPagination$1;
const defineCustomElement = defineCustomElement$1;

export { DuetPagination, defineCustomElement };
