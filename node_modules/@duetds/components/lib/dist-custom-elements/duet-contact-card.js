/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, h, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { g as getLanguage, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-076452be.js';
import { d as defineCustomElement$8 } from './p-351d00f1.js';
import { d as defineCustomElement$7 } from './p-628b8684.js';
import { d as defineCustomElement$6 } from './p-0674039c.js';
import { d as defineCustomElement$5 } from './p-9db7387e.js';
import { d as defineCustomElement$4 } from './p-75c1e787.js';
import { d as defineCustomElement$3 } from './p-1ac08a92.js';
import { d as defineCustomElement$2 } from './p-1344c068.js';

const duetContactCardCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:12px !important;display:block}:host(.duet-m-0){margin:0 !important}::slotted(*){padding-top:1.5rem}@media (min-width: 48em){::slotted(*){grid-column:2/span 2;padding-top:0}}.duet-contact-card{display:grid;grid-template-columns:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600;line-height:1.5;color:rgb(0, 41, 77)}.duet-contact-card.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}@media (min-width: 48em){.duet-contact-card{grid-template-columns:min-content minmax(0, 1fr) auto;gap:20px}}.duet-contact-card .image{width:4rem;height:4rem;margin-bottom:8px;border-radius:4px}@media (min-width: 48em){.duet-contact-card .image{width:6rem;height:6rem;padding-bottom:0}}.duet-contact-card .description{padding-bottom:8px}.duet-contact-card .email,.duet-contact-card .phone{display:grid;grid-template-columns:min-content auto;gap:8px;align-items:center;justify-content:flex-start;padding-bottom:8px;word-break:break-all}";

const DuetContactCard$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    /**
     * Own Properties.
     */
    this.phoneLabel = {
      en: "Phone",
      fi: "Puhelin",
      sv: "Telefon",
    };
    this.language = getLanguage();
    this.theme = "";
    this.margin = "auto";
    this.image = undefined;
    this.name = undefined;
    this.description = undefined;
    this.email = undefined;
    this.phone = undefined;
    this.buttonText = undefined;
    this.buttonIcon = "form-date";
    this.buttonUrl = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const isTurva = this.theme === "turva";
    const theme = isTurva ? "turva" : "default";
    return (h(Host, { class: { "duet-m-0": this.margin === "none" } }, h("div", { class: {
        "duet-contact-card": true,
        "duet-theme-turva": this.theme === "turva",
      }, role: "group", "aria-label": this.name }, this.image ? h("img", { class: "image", src: this.image, alt: this.name }) : h("div", null), h("div", null, this.name && (h("duet-heading", { class: "name", level: "h3", margin: "none", theme: theme }, this.name)), this.description && (h("duet-paragraph", { class: "description", margin: "none", theme: theme }, this.description)), this.email && (h("div", { class: "email" }, h("duet-icon", { name: "navigation-message", size: "x-small", color: "primary-dark", margin: "none", theme: theme }), h("duet-link", { url: `mailto:${this.email}`, accessibleLabel: `Email: ${this.email}`, theme: theme }, this.email))), this.phone && (h("div", { class: "phone" }, h("duet-icon", { name: "form-tel", size: "x-small", color: "primary-dark", margin: "none", theme: theme }), h("duet-link", { url: `tel:${this.phone}`, accessibleLabel: `${this.phoneLabel[this.language]}: ${this.phone}`, theme: theme }, this.phone)))), this.buttonUrl && this.buttonText && (h("div", { class: "call-to-action" }, h("duet-button", { variation: "default", icon: this.buttonIcon, fixed: true, margin: "none", url: this.buttonUrl, theme: theme }, this.buttonText))), h("div", null), h("slot", null))));
  }
  get element() { return this; }
  static get style() { return duetContactCardCss; }
}, [1, "duet-contact-card", {
    "theme": [1025],
    "margin": [1],
    "image": [1025],
    "name": [1025],
    "description": [1025],
    "email": [1025],
    "phone": [1025],
    "buttonText": [1025, "button-text"],
    "buttonIcon": [1025, "button-icon"],
    "buttonUrl": [1025, "button-url"],
    "language": [32]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-contact-card", "duet-button", "duet-heading", "duet-icon", "duet-link", "duet-paragraph", "duet-spinner", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-contact-card":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetContactCard$1);
      }
      break;
    case "duet-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "duet-heading":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "duet-link":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "duet-paragraph":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "duet-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetContactCard = DuetContactCard$1;
const defineCustomElement = defineCustomElement$1;

export { DuetContactCard, defineCustomElement };
