/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { c as createID } from './p-c1325e35.js';

const duetRadioCss = "*.sc-duet-radio,*.sc-duet-radio::after,*.sc-duet-radio::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-radio-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:28px !important;margin-bottom:12px !important;display:inline-flex;width:100%;vertical-align:bottom;-webkit-tap-highlight-color:transparent}.sc-duet-radio-h:last-child,.sc-duet-radio-h:last-of-type{margin-right:0 !important}.vertical.sc-duet-radio-h{margin-right:0 !important}.horizontal.sc-duet-radio-h{margin-bottom:0 !important;width:auto}.horizontal.sc-duet-radio-h .duet-label.sc-duet-radio span.sc-duet-radio{max-width:100%}@media (min-width: 48em){.horizontal-responsive.sc-duet-radio-h{margin-right:28px !important;margin-bottom:0 !important;width:auto}.horizontal-responsive.sc-duet-radio-h:last-child,.horizontal-responsive.sc-duet-radio-h:last-of-type{margin-right:0 !important}.horizontal-responsive.sc-duet-radio-h .duet-label.sc-duet-radio span.sc-duet-radio{max-width:100%}}.duet-m-0.sc-duet-radio-h{margin:0 !important}.sc-duet-radio-h:last-child:not(:only-child){margin-right:0 !important;margin-bottom:0 !important}.duet-label.sc-duet-radio{position:relative;z-index:100;display:flex;width:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;hyphens:auto;line-height:1.5;color:rgb(0, 41, 77);word-break:break-word;overflow-wrap:break-word;cursor:pointer;background:transparent}.duet-theme-turva.sc-duet-radio .duet-label.sc-duet-radio{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-label.sc-duet-radio span.sc-duet-radio{flex-grow:1;font-size:1rem}.duet-label-hidden.sc-duet-radio .duet-label.sc-duet-radio{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}.duet-radio-container.sc-duet-radio{position:relative;width:100%;height:100%}.duet-radio.sc-duet-radio{padding:14px !important;position:absolute;top:0;left:0;z-index:200;width:100%;height:100%;cursor:pointer;opacity:0}.duet-radio.sc-duet-radio+label.sc-duet-radio::before{z-index:100;flex-shrink:0;width:20px;height:20px;margin:2px 10px 1px 1px;content:\"\";background:rgb(255, 255, 255);border:1px solid rgb(0, 41, 77);border-radius:50%}.duet-theme-turva.sc-duet-radio .duet-radio.sc-duet-radio+label.sc-duet-radio::before{border-color:rgb(23, 28, 58)}.duet-radio.sc-duet-radio:focus+label.sc-duet-radio::before{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-theme-turva.sc-duet-radio .duet-radio.sc-duet-radio:focus+label.sc-duet-radio::before{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-radio.sc-duet-radio:checked+label.sc-duet-radio::after{position:absolute;top:6px;left:5px;z-index:200;flex-shrink:0;width:12px;height:12px;content:\"\";background:rgb(0, 41, 77);border-radius:50%}.duet-theme-turva.sc-duet-radio .duet-radio.sc-duet-radio:checked+label.sc-duet-radio::after{background:rgb(23, 28, 58)}.duet-radio[disabled].sc-duet-radio{cursor:default}.duet-radio[disabled].sc-duet-radio+label.sc-duet-radio{color:rgb(101, 119, 135)}.duet-theme-turva.sc-duet-radio .duet-radio[disabled].sc-duet-radio+label.sc-duet-radio{color:rgb(116, 116, 117)}.duet-radio[disabled].sc-duet-radio+label.sc-duet-radio::before{border-color:rgb(207, 210, 212)}.duet-theme-turva.sc-duet-radio .duet-radio[disabled].sc-duet-radio+label.sc-duet-radio::before{border-color:rgb(207, 207, 209)}.duet-radio[disabled].sc-duet-radio:checked+label.sc-duet-radio::before{border:1px solid rgb(101, 119, 135)}.duet-radio[disabled].sc-duet-radio:checked+label.sc-duet-radio::after{background:rgb(101, 119, 135)}.duet-theme-turva.sc-duet-radio .duet-radio[disabled].sc-duet-radio:checked+label.sc-duet-radio::after{background:rgb(116, 116, 117);border-color:rgb(116, 116, 117)}";

const DuetRadio$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.duetChange = createEvent(this, "duetChange", 7);
    this.duetFocus = createEvent(this, "duetFocus", 7);
    this.duetBlur = createEvent(this, "duetBlur", 7);
    /**
     * Own Properties.
     */
    this.radioId = createID("DuetRadio");
    /**
     * Component event handling.
     */
    this.onClick = (ev) => {
      ev.stopPropagation();
    };
    this.onChange = (ev) => {
      this.checked = ev.target.value;
      if (this.checked && !this.blockEvents) {
        this.duetChange.emit({
          originalEvent: ev,
          checked: this.checked,
          value: this.value,
          component: "duet-radio",
        });
      }
    };
    this.onBlur = (ev) => {
      this.duetBlur.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-radio",
      });
    };
    this.onFocus = (ev) => {
      this.duetFocus.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-radio",
      });
    };
    this.accessibleActiveDescendant = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleIndex = undefined;
    this.margin = "auto";
    this.accessibleControls = undefined;
    this.accessibleOwns = undefined;
    this.accessibleDescribedBy = undefined;
    this.theme = "";
    this.disabled = false;
    this.required = false;
    this.blockEvents = false;
    this.identifier = undefined;
    this.label = "label";
    this.name = undefined;
    this.role = undefined;
    this.groupDisabled = undefined;
    this.groupDirection = undefined;
    this.groupResponsive = undefined;
    this.checked = undefined;
    this.value = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    if (this.value === undefined) {
      this.value = this.identifier;
    }
  }
  /**
   * Sets focus on the specified `duet-radio`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus(options) {
    this.nativeInput.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const identifier = this.identifier || this.radioId;
    return (h(Host, { onClick: this.onClick, class: {
        horizontal: this.groupDirection === "horizontal" && !this.groupResponsive,
        "horizontal-responsive": this.groupDirection === "horizontal" && this.groupResponsive,
        "duet-m-0": this.margin === "none",
      } }, h("div", { class: { "duet-radio-container": true, "duet-theme-turva": this.theme === "turva" } }, h("input", { type: "radio", onFocus: this.onFocus, onBlur: this.onBlur, onChange: this.onChange, value: this.value, tabindex: this.accessibleIndex, class: { "duet-radio": true, disabled: this.disabled || this.groupDisabled }, checked: this.checked, disabled: this.disabled || this.groupDisabled, required: this.required, "aria-controls": this.accessibleControls, "aria-activedescendant": this.accessibleActiveDescendant, "aria-owns": this.accessibleOwns, "aria-describedby": this.accessibleDescribedBy, "aria-labelledby": this.accessibleLabelledBy, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, role: this.role, name: this.name, id: identifier, ref: input => (this.nativeInput = input) }), h("label", { class: "duet-label", htmlFor: identifier }, h("span", null, this.label)))));
  }
  get element() { return this; }
  static get style() { return duetRadioCss; }
}, [2, "duet-radio", {
    "accessibleActiveDescendant": [1, "accessible-active-descendant"],
    "accessibleDetails": [1, "accessible-details"],
    "accessibleLabelledBy": [1, "accessible-labelled-by"],
    "accessibleDescription": [1, "accessible-description"],
    "accessibleIndex": [1, "accessible-index"],
    "margin": [1],
    "accessibleControls": [1, "accessible-controls"],
    "accessibleOwns": [1, "accessible-owns"],
    "accessibleDescribedBy": [1, "accessible-described-by"],
    "theme": [1025],
    "disabled": [516],
    "required": [4],
    "blockEvents": [4, "block-events"],
    "identifier": [1],
    "label": [1],
    "name": [1],
    "role": [1],
    "groupDisabled": [4, "group-disabled"],
    "groupDirection": [1, "group-direction"],
    "groupResponsive": [4, "group-responsive"],
    "checked": [1540],
    "value": [1537],
    "setFocus": [64]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-radio"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-radio":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetRadio$1);
      }
      break;
  } });
}

const DuetRadio = DuetRadio$1;
const defineCustomElement = defineCustomElement$1;

export { DuetRadio, defineCustomElement };
