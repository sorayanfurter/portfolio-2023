/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h, d as Host } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { c as createID } from './p-c1325e35.js';
import { g as getLanguage, a as getLocaleString, c as connectLanguageChangeObserver, d as disconnectLanguageChangeObserver } from './p-076452be.js';
import { d as defineCustomElement$4 } from './p-351d00f1.js';
import { d as defineCustomElement$3 } from './p-0674039c.js';
import { d as defineCustomElement$2 } from './p-1ac08a92.js';
import { d as defineCustomElement$1 } from './p-1344c068.js';

const duetAlertCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%;max-height:999px;border-radius:4px;transition:opacity 300ms ease, visibility 300ms ease, transform 300ms ease, max-height 300ms ease}:host(:focus){outline:0}:host(.user-is-tabbing:focus){border-radius:4px;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}:host(.user-is-tabbing.duet-theme-turva:focus){box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}:host(.duet-alert-is-dismissed){max-height:0;overflow:hidden;visibility:hidden !important;opacity:0;transform:scale(0.98)}:host(.duet-alert-is-dismissed) .duet-alert{margin:0 !important}.duet-alert{margin-bottom:16px !important;position:relative;width:100%;padding:16px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.25;color:rgb(0, 41, 77);background:#f2f8fb;border:1px solid rgb(0, 119, 179);border-radius:4px;transition:margin 100ms 300ms ease}.duet-alert.duet-p-0{padding:0 !important}.duet-alert.duet-m-0{margin:0 !important}.duet-alert.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58);background:#f3f4f5;border-color:rgb(23, 28, 58)}.duet-alert.warning{background:#fffbf4;border-color:rgb(247, 178, 40)}.duet-alert.warning.duet-theme-turva{background:#fffaf3;border-color:rgb(250, 164, 15)}.duet-alert.danger{background:#fdf4f7;border-color:rgb(222, 35, 98)}.duet-alert.danger.duet-theme-turva{background:#fdf4f3;border-color:rgb(224, 42, 13)}.duet-alert.success{background:#f2f9f7;border-color:rgb(0, 135, 90)}.duet-alert.success.duet-theme-turva{background:#f3f9f6;border-color:rgb(8, 135, 78)}.duet-alert-dismiss{position:absolute;top:2px;right:2px}.duet-alert-container{display:inline-flex;align-items:center;justify-content:center;width:100%;margin:0 auto !important}.duet-alert-container span{width:100%}.duet-alert-has-icon .duet-alert-container{margin-top:2px !important}.duet-alert-icon{display:inline-block;align-self:center;width:20px;min-width:20px;height:20px;margin:0 16px 0 0 !important}.duet-alert-icon duet-icon{width:20px;height:20px}.duet-alert-is-dismissible{padding:16px 48px 16px 16px;text-align:left}.duet-alert-is-dismissible .duet-alert-container{text-align:left}";

const DuetAlert = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.duetDismiss = createEvent(this, "duetDismiss", 7);
    this.descriptiveId = createID("DuetAlert");
    this.handleDismiss = (ev) => {
      this.handleHide();
      this.duetDismiss.emit({
        component: "duet-alert",
        originalEvent: ev,
      });
    };
    this.handleShow = () => {
      this.isDismissed = false;
    };
    this.handleHide = () => {
      this.isDismissed = true;
    };
    this.theme = "";
    this.isDismissed = false;
    this.timeoutID = undefined;
    this.language = getLanguage();
    this.accessibleLabelDefaults = {
      fi: "Sulje viesti",
      sv: "StÃ¤ng meddelandet",
      en: "Close the message",
    };
    this.accessibleLabel = getLocaleString(this.accessibleLabelDefaults);
    this.announcements = true;
    this.icon = "";
    this.autoDismiss = undefined;
    this.margin = "auto";
    this.padding = "auto";
    this.variation = "default";
    this.dismissible = false;
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabel === this.accessibleLabelDefaults[oldValue]) {
      this.accessibleLabel = getLocaleString(this.accessibleLabelDefaults, newValue);
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  componentDidLoad() {
    if (this.autoDismiss) {
      this.timeoutID = setTimeout(() => this.handleDismiss(), this.autoDismiss);
    }
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    if (this.timeoutID) {
      clearTimeout(this.timeoutID);
    }
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Show.
   */
  async show() {
    this.handleShow();
  }
  /**
   * Hide.
   */
  async hide() {
    this.handleHide();
  }
  /**
   * There is bug in NVDA screen reader
   * that is causing multiple alert readings
   * when alert contains other components (link, button etc.).
   */
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const closeColor = this.theme === "turva" ? "secondary-turva" : "secondary";
    const role = this.variation === "danger" || this.variation === "warning" ? "alert" : "status";
    return (h(Host, { class: {
        "duet-theme-turva": this.theme === "turva",
        "duet-alert-is-dismissed": this.isDismissed,
      }, role: this.announcements ? role : undefined }, h("div", { class: {
        "duet-alert": true,
        "duet-alert-has-icon": !!this.icon,
        "duet-alert-is-dismissible": this.dismissible,
        "duet-p-0": this.padding === "none",
        "duet-m-0": this.margin === "none",
        [this.variation]: true,
        "duet-theme-turva": this.theme === "turva",
      } }, h("div", { class: "duet-alert-container" }, this.icon && (h("div", { class: "duet-alert-icon" }, h("duet-icon", { size: "auto", name: this.icon, color: "currentColor" }))), h("span", { id: this.descriptiveId }, h("slot", null))), this.dismissible && (h("div", { class: "duet-alert-dismiss" }, h("duet-button", { variation: "plain", accessibleLabel: this.accessibleLabel, accessibleDescribedBy: this.descriptiveId, color: closeColor, iconSize: "medium", icon: "navigation-close", iconOnly: true, margin: "none", theme: this.theme, onClick: this.handleDismiss, fixed: true }))))));
  }
  static get watchers() { return {
    "language": ["watchLanguageStateHandler"]
  }; }
  static get style() { return duetAlertCss; }
}, [1, "duet-alert", {
    "theme": [1025],
    "accessibleLabelDefaults": [1, "accessible-label-default"],
    "accessibleLabel": [1025, "accessible-label"],
    "announcements": [4],
    "icon": [1],
    "autoDismiss": [2, "auto-dismiss"],
    "margin": [1],
    "padding": [1],
    "variation": [1],
    "dismissible": [4],
    "isDismissed": [32],
    "timeoutID": [32],
    "language": [32],
    "show": [64],
    "hide": [64]
  }]);
function defineCustomElement() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-alert", "duet-button", "duet-icon", "duet-spinner", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-alert":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetAlert);
      }
      break;
    case "duet-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "duet-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$1();
      }
      break;
  } });
}

export { DuetAlert as D, defineCustomElement as d };
