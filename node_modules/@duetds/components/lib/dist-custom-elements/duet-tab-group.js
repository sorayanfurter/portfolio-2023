/*!
 * Built with Duet Design System
 */
import { p as proxyCustomElement, H, c as createEvent, h } from './p-fdc1ca33.js';
import { i as inheritGlobalTheme } from './p-4ebf1618.js';
import { c as createID } from './p-c1325e35.js';
import { h as isArrowLeftKey, e as isArrowUpKey, j as isArrowRightKey, f as isArrowDownKey } from './p-d8549efe.js';
import { g as getLanguage, a as getLocaleString } from './p-076452be.js';
import { d as defineCustomElement$b } from './p-351d00f1.js';
import { d as defineCustomElement$a } from './p-717d775c.js';
import { d as defineCustomElement$9 } from './p-a46a6322.js';
import { d as defineCustomElement$8 } from './p-0674039c.js';
import { d as defineCustomElement$7 } from './p-7a8d0bb0.js';
import { d as defineCustomElement$6 } from './p-48515caf.js';
import { d as defineCustomElement$5 } from './p-72c5512a.js';
import { d as defineCustomElement$4 } from './p-1ac08a92.js';
import { d as defineCustomElement$3 } from './p-d3213a33.js';
import { d as defineCustomElement$2 } from './p-1344c068.js';

const duetTabGroupCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;-webkit-tap-highlight-color:transparent;display:block;width:100%}.duet-tab-group-tabs{margin-bottom:28px !important;display:block;width:100%;max-width:100%;padding-top:2px;list-style:none}.duet-tab-group-tabs.duet-m-0{margin:0 !important}.duet-tab-group-tabs.duet-tab-group-collapses.duet-tab-group-hidden{display:none}@media (min-width: 36em){.duet-tab-group-tabs.duet-tab-group-collapses.duet-tab-group-hidden{display:block}}.duet-tab-variation-plain .duet-tab-group-tabs{border-bottom:1px solid rgb(225, 227, 230)}.duet-theme-turva.duet-tab-variation-plain .duet-tab-group-tabs{border-bottom-color:rgb(228, 228, 230)}.duet-tab-variation-checked .duet-tab-group-tabs{display:flex;gap:4px;padding-right:12px;padding-left:12px;overflow-x:scroll;-ms-overflow-style:none;scrollbar-width:none;}.duet-tab-variation-checked .duet-tab-group-tabs::-webkit-scrollbar{display:none}@media (min-width: 36em){.duet-tab-variation-checked .duet-tab-group-tabs{gap:8px;padding-right:16px;padding-left:16px;overflow:visible}}.duet-tab-plain-scrolling .duet-tab-group-tabs{display:flex;overflow-x:scroll;scroll-behavior:smooth;-ms-overflow-style:none;scrollbar-width:none;}.duet-tab-plain-scrolling .duet-tab-group-tabs::-webkit-scrollbar{display:none}@media (min-width: 36em){.duet-tab-plain-scrolling .duet-tab-group-tabs{display:block;overflow:auto}}@media (min-width: 36em){duet-select{display:none !important}}.duet-tab-button{-webkit-user-select:none;user-select:none;position:relative;z-index:100;display:block;width:100%;padding:20px;margin-top:-2px;overflow:visible;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600;line-height:1.1;color:rgb(0, 41, 77);text-align:left;text-decoration:none;cursor:pointer;background:rgb(255, 255, 255);border:2px solid rgb(225, 227, 230);border-radius:0;transition:150ms ease}.duet-tab-button.duet-p-0{padding:0 !important}.duet-tab-button.duet-m-0{margin:0 !important}.duet-theme-turva .duet-tab-button{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58);border-color:rgb(228, 228, 230)}.duet-tab-button.duet-p-0{padding:0 !important}@media (min-width: 36em){.duet-tab-button{display:inline-block;width:auto;margin-left:-2px;border-right:2px solid rgb(225, 227, 230);border-radius:0}}.duet-tab-button:hover{z-index:200;border-color:rgb(144, 149, 153)}.duet-theme-turva .duet-tab-button:hover{border-color:rgb(116, 116, 117)}.duet-tab-button:active{opacity:0.75;transition:none}.duet-tab-button.selected{z-index:201;color:rgb(255, 255, 255);background:rgb(0, 41, 77);border-color:rgb(0, 41, 77);outline:0;box-shadow:none !important}.duet-theme-turva .duet-tab-button.selected{color:rgb(255, 255, 255);background-color:rgb(23, 28, 58);border-color:rgb(23, 28, 58)}.duet-tab-button:focus{z-index:200;outline:0}:host(.user-is-tabbing) .duet-tab-button:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179) !important}:host(.user-is-tabbing) .duet-theme-turva .duet-tab-button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58) !important}.duet-tab-button:first-child{border-top-left-radius:4px;border-top-right-radius:4px}@media (min-width: 36em){.duet-tab-button:first-child{border-top-right-radius:0;border-bottom-left-radius:4px}}.duet-tab-button:last-child{border-bottom-right-radius:4px;border-bottom-left-radius:4px}@media (min-width: 36em){.duet-tab-button:last-child{border-radius:0;border-top-right-radius:4px;border-bottom-right-radius:4px}}.duet-tab-variation-plain .duet-tab-button{display:inline-block;width:auto;padding-right:0;padding-left:0;margin-left:0;border:0;border-radius:0;transition:none}.duet-tab-variation-plain .duet-tab-button+.duet-tab-button{margin-left:36px}.duet-tab-variation-plain .duet-tab-button.selected{color:rgb(0, 119, 179);background:rgb(255, 255, 255);border-bottom:3px solid rgb(0, 119, 179)}.duet-theme-turva.duet-tab-variation-plain .duet-tab-button.selected{color:rgb(198, 12, 48);border-bottom-color:rgb(198, 12, 48)}.duet-tab-variation-checked .duet-tab-button{position:relative;display:inline-block;flex-basis:0;flex-grow:1;width:200px;min-width:200px;padding:8px 4px;border-color:rgb(207, 210, 212);border-bottom-color:rgb(0, 119, 179);border-radius:4px 4px 0 0;transition:none}.duet-theme-turva.duet-tab-variation-checked .duet-tab-button{border-color:rgb(207, 210, 212);border-bottom-color:rgb(68, 68, 69)}@media (min-width: 36em){.duet-tab-variation-checked .duet-tab-button{min-width:0;padding:16px}}.duet-tab-variation-checked .duet-tab-button.stackable-tab{min-width:0}.duet-tab-variation-checked .duet-tab-button:first-child{margin-left:auto}.duet-tab-variation-checked .duet-tab-button:last-child{margin-right:auto}.duet-tab-variation-checked .duet-tab-button:active{opacity:1;transition:none}.duet-tab-variation-checked .duet-tab-button.selected{color:rgb(0, 119, 179);background:linear-gradient(180deg, rgb(243, 249, 252) 0%, rgb(255, 255, 255) 100%);border-color:rgb(0, 119, 179);border-bottom-color:#fff}.duet-theme-turva.duet-tab-variation-checked .duet-tab-button.selected{color:rgb(23, 28, 58);background:linear-gradient(180deg, rgb(245, 245, 247) 0%, rgb(255, 255, 255) 100%);border-color:rgb(68, 68, 69);border-bottom-color:#fff}.duet-tab-variation-checked .duet-tab-button .checked-tab-content{display:flex;flex-direction:row;justify-content:space-between}.duet-tab-variation-checked .duet-tab-button .checked-tab-content.stackable-checked-tab-content{flex-direction:column;height:100%}@media (min-width: 36em){.duet-tab-variation-checked .duet-tab-button .checked-tab-content.stackable-checked-tab-content{flex-direction:row}}.duet-tab-variation-checked .duet-tab-button .checked-tab-content .checked-tab-description{display:flex;flex-direction:column;overflow:hidden;overflow-wrap:break-word}.duet-tab-variation-checked .duet-tab-button .checked-tab-content .checked-tab-description.stackable-description{text-align:center}@media (min-width: 36em){.duet-tab-variation-checked .duet-tab-button .checked-tab-content .checked-tab-description.stackable-description{text-align:left}}.duet-tab-variation-checked .duet-tab-button .checked-tab-content .checked-tab-description .tab-caption{margin-top:4px;font-size:0.875rem;font-weight:400;color:rgb(101, 119, 135)}@media (min-width: 36em){.duet-tab-variation-checked .duet-tab-button .checked-tab-content .checked-tab-description .tab-caption{font-size:1rem;text-align:left}}.duet-theme-turva.duet-tab-variation-checked .duet-tab-button .checked-tab-content .checked-tab-description .tab-caption{color:rgb(68, 68, 69)}.duet-tab-variation-checked .duet-tab-button .checked-tab-content .checked-tab-description .tab-caption.selected{color:rgb(0, 119, 179)}.duet-theme-turva.duet-tab-variation-checked .duet-tab-button .checked-tab-content .checked-tab-description .tab-caption.selected{color:rgb(68, 68, 69)}.duet-tab-variation-checked .duet-tab-button .checked-tab-content .stackable-checkmark{order:-1;margin-top:8px;margin-bottom:8px}@media (min-width: 36em){.duet-tab-variation-checked .duet-tab-button .checked-tab-content .stackable-checkmark{order:1}}.duet-tab-group-content{position:relative;width:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.5;color:rgb(0, 41, 77);text-align:left}.duet-tab-group-content:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179) !important}.duet-theme-turva .duet-tab-group-content:focus{outline:0;box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58) !important}.duet-tab-group-content.checked-group-content{padding:28px 0 28px 0}.duet-tab-group-content.checked-group-content::after{position:absolute;top:-2px;left:0;width:100%;height:2px;content:\" \";background-color:rgb(0, 119, 179)}.duet-theme-turva .duet-tab-group-content{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-theme-turva .duet-tab-group-content.checked-group-content::after{background-color:rgb(68, 68, 69)}";

const DuetTabGroup$1 = /*@__PURE__*/ proxyCustomElement(class extends H {
  constructor() {
    super();
    this.__registerHost();
    this.__attachShadow();
    this.duetChange = createEvent(this, "duetChange", 3);
    this.duetTabChange = createEvent(this, "duetTabChange", 7);
    this.duetTabChangeRequested = createEvent(this, "duetTabChangeRequested", 7);
    this.id = createID("DuetTabGroup");
    /**
     * Component event handling.
     */
    this.handleKeyDown = ev => {
      let button;
      if (isArrowLeftKey(ev) || isArrowUpKey(ev)) {
        button = ev.target.previousElementSibling;
      }
      else if (isArrowRightKey(ev) || isArrowDownKey(ev)) {
        button = ev.target.nextElementSibling;
      }
      if (button) {
        ev.preventDefault();
        button.click();
        button.focus();
      }
    };
    this.onTabSelect = (tabIndex) => {
      if (this.tabChangeConfirm) {
        if (tabIndex !== this.selected) {
          const event = {
            value: tabIndex,
            component: "duet-tab-group",
          };
          this.duetTabChangeRequested.emit(event);
        }
      }
      else {
        this.openTab(tabIndex);
      }
    };
    this.scrollToActive = () => {
      if (this.variation === "checked" || this.variation === "plain-scrolling") {
        setTimeout(() => {
          const active = this.tabsContainer.querySelector(".selected");
          if (active) {
            active.scrollIntoView({ behavior: "smooth", inline: "center", block: "nearest" });
          }
        }, 50);
      }
    };
    this.renderTab = () => {
      const renderedTabs = this.tabs.map((element, index) => {
        return (h("button", { role: "tab", id: this.getButtonId(index), "aria-controls": this.getTabId(index), "aria-selected": element.selected ? "true" : "false", "aria-description": this.getAccessibleDescription(index), tabindex: index === 0 ? "0" : "-1", part: `${this.identifier}-button ${element.selected ? `${this.identifier}-button--selected` : ""}`, type: "button", class: {
            "duet-p-0": this.padding === "none",
            "duet-tab-button": true,
            "stackable-tab": this.variation === "checked" && this.tabs.length <= 3,
            selected: element.selected,
          }, onClick: () => this.onTabSelect(index), onKeyDown: ev => this.handleKeyDown(ev) }, this.variation === "checked" ? (h("div", { class: { "checked-tab-content": true, "stackable-checked-tab-content": this.tabs.length <= 3 } }, h("div", { class: { "checked-tab-description": true, "stackable-description": this.tabs.length <= 3 } }, h("p", null, element.label), h("p", { class: { "tab-caption": true, selected: element.selected } }, element.caption)), h("div", { class: { "stackable-checkmark": this.tabs.length <= 3 } }, h("duet-checkmark", { theme: this.theme, checked: element.selected, type: "radio", "presentation-only": true, center: true })))) : (element.label)));
      });
      if (this.scrolls) {
        return (h("duet-scrollable", { selected: this.selected, identifier: this.identifier }, renderedTabs));
      }
      return renderedTabs;
    };
    this.tabs = [];
    this.selected = undefined;
    this.theme = "";
    this.scrolls = false;
    this.collapses = true;
    this.accessibleLabel = undefined;
    this.variation = "default";
    this.language = getLanguage();
    this.labelDefaults = {
      fi: "Valitse",
      en: "Choose",
      sv: "Välj",
    };
    this.label = getLocaleString(this.labelDefaults, this.language);
    this.labelHidden = true;
    this.identifier = this.id;
    this.margin = "auto";
    this.padding = "auto";
    this.setTabIndex = false;
    this.tabChangeConfirm = false;
  }
  /**
   * Component lifecycle events.
   */
  async connectedCallback() {
    if (typeof MutationObserver !== "undefined") {
      this.mutationO = new MutationObserver(() => {
        this.updateTabs();
      });
      this.mutationO.observe(this.element, {
        attributes: true,
        attributeFilter: ["label"],
        childList: true,
        characterData: true,
        subtree: true,
      });
    }
    await this.updateTabs();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  componentDidLoad() {
    this.scrollToActive();
  }
  /**
   * This method allows you to open any of the tabs by calling the method and
   * passing the index of the tab. Please note that index starts from zero.
   */
  async openTab(tabIndex) {
    if (tabIndex >= this.tabs.length) {
      throw new Error(`[duet-tabs] Index ${tabIndex} is out of bounds of tabs length`);
    }
    this.selected = tabIndex;
    this.tabs.forEach((tab, i) => {
      tab.selected = i === tabIndex;
    });
    this.scrollToActive();
    const event = {
      value: tabIndex,
      component: "duet-tab-group",
    };
    this.duetChange.emit(event);
    this.duetTabChange.emit(event);
  }
  /**
   * This method used to refresh the contents of the tab group
   * but is now deprecated as this is done automatically.
   * @deprecated
   */
  async refresh() {
    console.log("[duet-tabs] Refresh method is deprecated and will be removed in the future version.");
  }
  /**
   * Local methods.
   */
  getTabs() {
    const allTabs = Array.from(this.element.querySelectorAll("duet-tab"));
    const localTabs = allTabs.filter(tab => tab.closest("duet-tab-group") === this.element);
    if (localTabs.length === 0) {
      throw new Error("[duet-tabs] Must have at least one tab");
    }
    // filter out any nested tabs
    return localTabs;
  }
  getButtonId(index) {
    return `${this.id}-button-${index}`;
  }
  getTabId(index) {
    return `${this.id}-tab-${index}`;
  }
  getAccessibleDescription(index) {
    const description = this.tabs[index].getAttribute("accessible-description") || null;
    return description;
  }
  async updateTabs() {
    this.tabs = this.getTabs();
    this.tabs.forEach((tab, index) => {
      tab.id = this.getTabId(index);
      tab.setAttribute("aria-labelledby", this.getButtonId(index));
      if (tab.selected) {
        this.selected = index;
      }
    });
    return;
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const variationClass = this.variation === "plain-scrolling" ? "duet-tab-variation-plain" : `duet-tab-variation-${this.variation}`;
    const isSwipeScrollable = this.variation === "checked" || this.variation === "plain-scrolling";
    return (h("div", { class: {
        "duet-tab-group": true,
        "duet-theme-turva": this.theme === "turva",
        [variationClass]: true,
        "duet-tab-plain-scrolling": this.variation === "plain-scrolling",
        "duet-tab-group-scrolls": this.scrolls,
        "duet-tab-group-collapses": this.collapses,
      }, "aria-label": this.accessibleLabel }, !isSwipeScrollable && this.tabs.length > 3 && this.collapses && (h("duet-select", { value: this.selected.toString(), expand: true, label: this.label, labelHidden: this.labelHidden, theme: this.theme, onDuetChange: event => this.onTabSelect(Number(event.detail.value)), items: this.tabs.map((tab, index) => {
        return { label: tab.label, value: index.toString() };
      }) })), h("div", { role: "tablist", class: {
        "duet-m-0": this.margin === "none" || this.variation === "checked",
        "duet-tab-group-tabs": true,
        "duet-tab-group-hidden": this.tabs.length > 3 && !isSwipeScrollable,
        "duet-tab-group-collapses": this.collapses,
      }, ref: el => {
        this.tabsContainer = el;
      } }, this.renderTab()), h("div", { role: "tabpanel", tabindex: this.setTabIndex ? null : "0", class: {
        "duet-tab-group-content": true,
        "duet-m-0": this.margin === "none",
        "checked-group-content": this.variation === "checked",
      } }, h("slot", null))));
  }
  get element() { return this; }
  static get style() { return duetTabGroupCss; }
}, [1, "duet-tab-group", {
    "theme": [1025],
    "scrolls": [4],
    "collapses": [4],
    "accessibleLabel": [1, "accessible-label"],
    "variation": [1],
    "language": [1025],
    "labelDefaults": [1, "label-default"],
    "label": [1],
    "labelHidden": [4, "label-hidden"],
    "identifier": [1],
    "margin": [1],
    "padding": [1],
    "setTabIndex": [4, "set-tab-index"],
    "tabChangeConfirm": [4, "tab-change-confirm"],
    "tabs": [32],
    "selected": [32],
    "openTab": [64],
    "refresh": [64]
  }]);
function defineCustomElement$1() {
  if (typeof customElements === "undefined") {
    return;
  }
  const components = ["duet-tab-group", "duet-button", "duet-caption", "duet-checkmark", "duet-icon", "duet-label", "duet-scrollable", "duet-select", "duet-spinner", "duet-tooltip", "duet-visually-hidden"];
  components.forEach(tagName => { switch (tagName) {
    case "duet-tab-group":
      if (!customElements.get(tagName)) {
        customElements.define(tagName, DuetTabGroup$1);
      }
      break;
    case "duet-button":
      if (!customElements.get(tagName)) {
        defineCustomElement$b();
      }
      break;
    case "duet-caption":
      if (!customElements.get(tagName)) {
        defineCustomElement$a();
      }
      break;
    case "duet-checkmark":
      if (!customElements.get(tagName)) {
        defineCustomElement$9();
      }
      break;
    case "duet-icon":
      if (!customElements.get(tagName)) {
        defineCustomElement$8();
      }
      break;
    case "duet-label":
      if (!customElements.get(tagName)) {
        defineCustomElement$7();
      }
      break;
    case "duet-scrollable":
      if (!customElements.get(tagName)) {
        defineCustomElement$6();
      }
      break;
    case "duet-select":
      if (!customElements.get(tagName)) {
        defineCustomElement$5();
      }
      break;
    case "duet-spinner":
      if (!customElements.get(tagName)) {
        defineCustomElement$4();
      }
      break;
    case "duet-tooltip":
      if (!customElements.get(tagName)) {
        defineCustomElement$3();
      }
      break;
    case "duet-visually-hidden":
      if (!customElements.get(tagName)) {
        defineCustomElement$2();
      }
      break;
  } });
}

const DuetTabGroup = DuetTabGroup$1;
const defineCustomElement = defineCustomElement$1;

export { DuetTabGroup, defineCustomElement };
