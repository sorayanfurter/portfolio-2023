/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a6cfed65.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');
const languageUtils = require('./language-utils-44df1d37.js');
require('./string-utils-5cadd058.js');

const duetContactCardCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:12px !important;display:block}:host(.duet-m-0){margin:0 !important}::slotted(*){padding-top:1.5rem}@media (min-width: 48em){::slotted(*){grid-column:2/span 2;padding-top:0}}.duet-contact-card{display:grid;grid-template-columns:100%;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600;line-height:1.5;color:rgb(0, 41, 77)}.duet-contact-card.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}@media (min-width: 48em){.duet-contact-card{grid-template-columns:min-content minmax(0, 1fr) auto;gap:20px}}.duet-contact-card .image{width:4rem;height:4rem;margin-bottom:8px;border-radius:4px}@media (min-width: 48em){.duet-contact-card .image{width:6rem;height:6rem;padding-bottom:0}}.duet-contact-card .description{padding-bottom:8px}.duet-contact-card .email,.duet-contact-card .phone{display:grid;grid-template-columns:min-content auto;gap:8px;align-items:center;justify-content:flex-start;padding-bottom:8px;word-break:break-all}";

const DuetContactCard = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Own Properties.
     */
    this.phoneLabel = {
      en: "Phone",
      fi: "Puhelin",
      sv: "Telefon",
    };
    this.language = languageUtils.getLanguage();
    this.theme = "";
    this.margin = "auto";
    this.image = undefined;
    this.name = undefined;
    this.description = undefined;
    this.email = undefined;
    this.phone = undefined;
    this.buttonText = undefined;
    this.buttonIcon = "form-date";
    this.buttonUrl = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
  }
  connectedCallback() {
    languageUtils.connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    languageUtils.disconnectLanguageChangeObserver(this);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const isTurva = this.theme === "turva";
    const theme = isTurva ? "turva" : "default";
    return (index.h(index.Host, { class: { "duet-m-0": this.margin === "none" } }, index.h("div", { class: {
        "duet-contact-card": true,
        "duet-theme-turva": this.theme === "turva",
      }, role: "group", "aria-label": this.name }, this.image ? index.h("img", { class: "image", src: this.image, alt: this.name }) : index.h("div", null), index.h("div", null, this.name && (index.h("duet-heading", { class: "name", level: "h3", margin: "none", theme: theme }, this.name)), this.description && (index.h("duet-paragraph", { class: "description", margin: "none", theme: theme }, this.description)), this.email && (index.h("div", { class: "email" }, index.h("duet-icon", { name: "navigation-message", size: "x-small", color: "primary-dark", margin: "none", theme: theme }), index.h("duet-link", { url: `mailto:${this.email}`, accessibleLabel: `Email: ${this.email}`, theme: theme }, this.email))), this.phone && (index.h("div", { class: "phone" }, index.h("duet-icon", { name: "form-tel", size: "x-small", color: "primary-dark", margin: "none", theme: theme }), index.h("duet-link", { url: `tel:${this.phone}`, accessibleLabel: `${this.phoneLabel[this.language]}: ${this.phone}`, theme: theme }, this.phone)))), this.buttonUrl && this.buttonText && (index.h("div", { class: "call-to-action" }, index.h("duet-button", { variation: "default", icon: this.buttonIcon, fixed: true, margin: "none", url: this.buttonUrl, theme: theme }, this.buttonText))), index.h("div", null), index.h("slot", null))));
  }
  get element() { return index.getElement(this); }
};
DuetContactCard.style = duetContactCardCss;

exports.duet_contact_card = DuetContactCard;
