/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a6cfed65.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');
const focusUtils = require('./focus-utils-b45e4830.js');
const keyboardUtils = require('./keyboard-utils-bb32119b.js');
const languageUtils = require('./language-utils-44df1d37.js');
const tokenUtils = require('./token-utils-c1864408.js');
require('./string-utils-5cadd058.js');
require('./tokens.module-5fe478ed.js');

const duetSlideoutCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;height:100%}:host slot:not([name=toggle])::slotted(*){position:relative;visibility:hidden;opacity:0}:host([open]) slot:not([name=toggle])::slotted(*){visibility:visible;opacity:1}:host(:not([open])) ::slotted(duet-slideout-panel){display:none}.duet-slideout{display:flex;align-items:center;height:100%}.duet-slideout .desktop-bg{display:none}@media (min-width: 62em){.duet-slideout .desktop-bg{position:fixed;top:0;left:0;z-index:400;display:block;width:100%;height:100%;visibility:hidden;background:rgba(0, 41, 77, 0.6);opacity:0;transition:600ms ease}.duet-slideout .desktop-bg:not(.hidden){visibility:visible;opacity:1;transition:600ms ease}}@media (min-width: 62em){.duet-slideout.duet-theme-turva .desktop-bg{background:rgba(23, 28, 58, 0.6)}}.duet-slideout .dialog{position:fixed;top:0;bottom:0;left:0;z-index:400;width:100%;height:100%;padding-bottom:75px;overflow-y:auto;box-shadow:0 3px 6px 0 rgba(0, 41, 77, 0.1) inset}@media (min-width: 62em){.duet-slideout .dialog{right:0;left:auto;width:500px;padding-bottom:0;transition:right 300ms ease;transition-delay:0s}}.duet-slideout .dialog .top{position:relative;z-index:1;display:flex;align-items:center;justify-content:flex-end;padding:4px}.duet-slideout .dialog .top button{cursor:pointer}.duet-slideout .dialog .top button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-slideout .dialog .top duet-icon{padding:16px}.duet-slideout .dialog .items{display:flex;flex-direction:column;align-items:flex-start;justify-content:center;width:100%;padding:0 1.5rem}.duet-slideout .dialog.hidden{pointer-events:none;visibility:hidden}@media (min-width: 62em){.duet-slideout .dialog.hidden{right:-500px;transition:300ms ease}}.duet-slideout.duet-theme-turva button{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-slideout.duet-theme-turva button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-slideout.duet-theme-turva button.active{color:rgb(198, 12, 48)}.duet-slideout.duet-theme-turva button.active::after{background:rgb(198, 12, 48)}.duet-slideout.duet-theme-turva .dialog .top button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}::slotted(*){width:100%}slot{color:rgb(0, 41, 77)}.duet-theme-turva slot{color:rgb(23, 28, 58)}slot[name=toggle]{color:inherit}";

const DuetSlideout = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.duetSlideoutEvent = index.createEvent(this, "duetSlideoutEvent", 7);
    this.exitLangObject = {
      en: "Exit the menu",
      fi: "Poistu valikosta",
      sv: "Avsluta menyn",
    };
    this.isSafariBrowser = /^((?!chrome|android).)*safari/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent);
    this.toggleMenu = (e) => {
      const toggle = !this.open;
      this.open = toggle;
      this.openButton.setAttribute("aria-expanded", this.open.toString());
      this.duetSlideoutEvent.emit({
        originalEvent: e,
        data: { element: this.element, open: this.open },
        component: "duet-slideout",
      });
      if (toggle) {
        const openPanel = this.element.querySelector("duet-slideout-panel[open]");
        if (openPanel) {
          openPanel.setFocus();
        }
        else {
          setTimeout(() => {
            this.closeButton.focus();
          }, 200);
        }
      }
      else {
        setTimeout(() => {
          this.openButton.setFocus();
        }, 200);
      }
    };
    this.onClick = (e) => {
      this.toggleMenu(e);
    };
    this.language = languageUtils.getLanguage();
    this.theme = "";
    this.open = false;
    this.backgroundColor = "gray-lightest";
  }
  /**
   * Toggles the slideout.
   */
  async toggle() {
    const event = new CustomEvent("toggle");
    this.toggleMenu(event);
    setTimeout(() => {
      this.closeButton.focus();
    }, 200);
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
    {
      this.openButton = this.element.querySelector(":scope > [slot='toggle']");
    }
    if (this.openButton) {
      this.openButton.accessiblePopup = "true";
      this.openButton.accessibleExpanded = false;
      this.openButton.addEventListener("click", e => {
        e.stopPropagation();
        e.preventDefault();
        this.onClick(e);
      });
      this.openButton = this.openButton;
    }
  }
  connectedCallback() {
    languageUtils.connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    languageUtils.disconnectLanguageChangeObserver(this);
  }
  /**
   * Component event handling.
   */
  handleKeyUp(ev) {
    // When Esc is pressed
    if (keyboardUtils.isEscapeKey(ev)) {
      if (this.open) {
        this.toggleMenu(ev);
      }
    }
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    this.openButton.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const styles = {
      background: tokenUtils.getColorByName(this.backgroundColor, this.theme),
    };
    const exitTranslation = languageUtils.getLocaleString(this.exitLangObject);
    return (index.h(index.Host, null, index.h("div", { class: { "duet-slideout": true, "duet-theme-turva": this.theme === "turva" } }, index.h("slot", { name: "toggle" }), index.h("div", { class: {
        "desktop-bg": true,
        hidden: !this.open,
      }, onClick: () => {
        this.open = false;
      } }), index.h("div", { tabindex: "-1", role: "dialog", id: "dialog", "aria-labelledby": "button", "aria-modal": this.isSafariBrowser ? false : true, "aria-flowto": "menubar", class: {
        dialog: true,
        hidden: !this.open,
      }, style: styles }, index.h(focusUtils.FocusGuard, { moveFocusTo: this.closeButton }), index.h("div", { class: "top" }, index.h("button", { ref: element => (this.closeButton = element), "aria-haspopup": "dialog", "aria-controls": "dialog", "aria-expanded": this.open ? "true" : "false", "aria-label": `${exitTranslation}`, type: "button", class: {
        "slideout-close": true,
        active: this.open,
      }, onClick: this.onClick }, index.h("duet-icon", { name: "navigation-close", size: "small", margin: "none", color: "secondary" }))), index.h("div", { id: "menubar", role: "menubar", class: {
        items: true,
      } }, index.h("slot", null)), index.h(focusUtils.FocusGuard, { moveFocusTo: this.closeButton })))));
  }
  get element() { return index.getElement(this); }
};
DuetSlideout.style = duetSlideoutCss;

exports.duet_slideout = DuetSlideout;
