/*!
 * Built with Duet Design System
 */
'use strict';

const debounce = (func, timeout = 250) => {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    timer = setTimeout(() => {
      func.apply(undefined, args);
    }, timeout);
  };
};
/**
 * The fieldSorter function is a helper function that takes an array of objects and returns
 * a function that can be used to sort those objects. The returned sorting function takes two
 * parameters, which are compared using the field values in the object. If one object's field value is greater than another's, then 1 is returned; if they're equal, 0 is returned; and if one object's field value is less than another's, - 1 will be returned. This allows for easy sorting by multiple fields in any order desired (e.g., first by name ascending and then by age descending).
 *
 *
 * @param fields Sort the table
 *
 * @return A function that takes two objects and returns an integer
 *
 */
function fieldSorter(fields) {
  return function (a, b) {
    return fields
      .map(function (o) {
      let dir = 1;
      if (o[0] === "-") {
        dir = -1;
        o = o.substring(1);
      }
      if (a[o] > b[o]) {
        return dir;
      }
      if (a[o] < b[o]) {
        return -dir;
      }
      return 0;
    })
      .reduce(function firstNonZeroValue(p, n) {
      return p ? p : n;
    }, 0);
  };
}

exports.debounce = debounce;
exports.fieldSorter = fieldSorter;
