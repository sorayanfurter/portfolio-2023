/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a6cfed65.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');
const createId = require('./create-id-c3b984b1.js');

const duetCheckboxCss = "*.sc-duet-checkbox,*.sc-duet-checkbox::after,*.sc-duet-checkbox::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-checkbox-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:8px !important;margin-bottom:12px !important;display:inline-flex;width:100%;vertical-align:bottom;-webkit-tap-highlight-color:transparent}.sc-duet-checkbox-h:last-child,.sc-duet-checkbox-h:last-of-type{margin-right:0 !important}.sc-duet-checkbox-h:last-child:not(:only-child){margin-bottom:0 !important}.duet-m-0.sc-duet-checkbox-h{margin:0 !important}.duet-label.sc-duet-checkbox{position:relative;z-index:100;display:inline;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.5;color:rgb(0, 41, 77);vertical-align:top;cursor:pointer;background:transparent;transition:300ms ease}.duet-theme-turva.sc-duet-checkbox .duet-label.sc-duet-checkbox{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}.duet-label.sc-duet-checkbox span.sc-duet-checkbox{display:inline-block;width:calc(100% - 32px);font-size:1rem;font-weight:400;vertical-align:top}.duet-checkbox-container.sc-duet-checkbox{position:relative;width:100%;height:100%}.duet-checkbox.sc-duet-checkbox{padding:14px !important;position:absolute;top:0;left:0;z-index:2;width:100%;height:100%;cursor:pointer;opacity:0}.duet-checkbox.sc-duet-checkbox+label.sc-duet-checkbox::before{z-index:100;display:inline-block;width:20px;height:20px;margin:2px 10px 1px 1px;vertical-align:top;content:\"\";background:rgb(255, 255, 255);border:1px solid rgb(0, 41, 77);border-radius:4px}.duet-theme-turva.sc-duet-checkbox .duet-checkbox.sc-duet-checkbox+label.sc-duet-checkbox::before{border-color:rgb(23, 28, 58)}.duet-checkbox.sc-duet-checkbox:checked+label.sc-duet-checkbox::before{background:rgb(0, 41, 77);border:1px solid rgb(0, 41, 77)}.duet-theme-turva.sc-duet-checkbox .duet-checkbox.sc-duet-checkbox:checked+label.sc-duet-checkbox::before{background:rgb(23, 28, 58);border-color:rgb(23, 28, 58)}.duet-checkbox.sc-duet-checkbox:focus+label.sc-duet-checkbox::before{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-theme-turva.sc-duet-checkbox .duet-checkbox.sc-duet-checkbox:focus+label.sc-duet-checkbox::before{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-checkbox.sc-duet-checkbox+label.sc-duet-checkbox{position:static}.duet-checkbox.sc-duet-checkbox:checked+label.sc-duet-checkbox::after{position:absolute;top:6px;left:5px;z-index:200;width:12px;height:12px;pointer-events:none;content:\"\";background:transparent url(\"data:image/svg+xml,%3Csvg%20fill%3D%27white%27%20xmlns%3D%27http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%27%20width%3D%2724%27%20height%3D%2724%27%20viewBox%3D%270%200%2024%2024%27%3E%3Cpath%20d%3D%27M23.374.287a1.5%2C1.5%2C0%2C0%2C0-2.093.345L7.246%2C20.2%2C2.561%2C15.511A1.5%2C1.5%2C0%2C1%2C0%2C.439%2C17.632l5.935%2C5.934a1.525%2C1.525%2C0%2C0%2C0%2C2.279-.186l15.066-21A1.5%2C1.5%2C0%2C0%2C0%2C23.374.287Z%27%20%2F%3E%3C%2Fsvg%3E\") no-repeat 0 0;background-size:100% auto}.duet-checkbox[disabled].sc-duet-checkbox{cursor:default}.duet-checkbox[disabled].sc-duet-checkbox+label.sc-duet-checkbox{color:rgb(101, 119, 135)}.duet-theme-turva.sc-duet-checkbox .duet-checkbox[disabled].sc-duet-checkbox+label.sc-duet-checkbox{color:rgb(116, 116, 117)}.duet-checkbox[disabled].sc-duet-checkbox+label.sc-duet-checkbox::before{border-color:rgb(207, 210, 212)}.duet-theme-turva.sc-duet-checkbox .duet-checkbox[disabled].sc-duet-checkbox+label.sc-duet-checkbox::before{border-color:rgb(207, 207, 209)}.duet-checkbox[disabled].sc-duet-checkbox:checked+label.sc-duet-checkbox::before{background:rgb(101, 119, 135);border:1px solid rgb(101, 119, 135)}.duet-theme-turva.sc-duet-checkbox .duet-checkbox[disabled].sc-duet-checkbox:checked+label.sc-duet-checkbox::before{background:rgb(116, 116, 117);border-color:rgb(116, 116, 117)}.duet-label-hidden.sc-duet-checkbox .duet-label.sc-duet-checkbox span.sc-duet-checkbox{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}";

const DuetCheckbox = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.duetChange = index.createEvent(this, "duetChange", 3);
    this.duetFocus = index.createEvent(this, "duetFocus", 7);
    this.duetBlur = index.createEvent(this, "duetBlur", 7);
    /**
     * Own Properties.
     */
    this.checkboxId = createId.createID("DuetCheckbox");
    /**
     * Component event handling.
     */
    this.onChange = (ev) => {
      this.checked = !this.checked;
      this.duetChange.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-checkbox",
      });
    };
    this.onBlur = (ev) => {
      this.duetBlur.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-checkbox",
      });
    };
    this.onFocus = (ev) => {
      this.duetFocus.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-checkbox",
      });
    };
    this.accessibleActiveDescendant = undefined;
    this.margin = "auto";
    this.accessibleControls = undefined;
    this.accessibleIndex = undefined;
    this.accessibleOwns = undefined;
    this.accessibleDescribedBy = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleSelected = undefined;
    this.required = false;
    this.theme = "";
    this.disabled = false;
    this.identifier = undefined;
    this.label = "label";
    this.labelHidden = false;
    this.name = undefined;
    this.role = undefined;
    this.checked = false;
    this.value = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
    if (this.value === undefined) {
      this.value = this.identifier;
    }
  }
  /**
   * Sets focus on the specified `duet-checkbox`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus(options) {
    this.nativeInput.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const identifier = this.identifier || this.checkboxId;
    return (index.h(index.Host, { class: { "duet-m-0": this.margin === "none" } }, index.h("div", { class: {
        "duet-checkbox-container": true,
        "duet-label-hidden": this.labelHidden,
        "duet-theme-turva": this.theme === "turva",
      } }, index.h("input", { ref: input => (this.nativeInput = input), type: "checkbox", onFocus: this.onFocus, onBlur: this.onBlur, onChange: this.onChange, value: this.value, class: { "duet-checkbox": true, disabled: this.disabled }, checked: this.checked, disabled: this.disabled, tabindex: this.accessibleIndex, "aria-controls": this.accessibleControls, "aria-activedescendant": this.accessibleActiveDescendant, "aria-owns": this.accessibleOwns, "aria-describedby": this.accessibleDescribedBy, "aria-labelledby": this.accessibleLabelledBy, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, "aria-selected": this.accessibleSelected, required: this.required, role: this.role, name: this.name, id: identifier }), index.h("label", { class: "duet-label", htmlFor: identifier }, index.h("span", null, this.label)))));
  }
  get element() { return index.getElement(this); }
};
DuetCheckbox.style = duetCheckboxCss;

exports.duet_checkbox = DuetCheckbox;
