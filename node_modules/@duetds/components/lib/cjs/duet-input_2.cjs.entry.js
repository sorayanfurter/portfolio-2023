/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a6cfed65.js');
const formSearch = require('./form-search-d61b2843.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');
const createId = require('./create-id-c3b984b1.js');
const inputUtils = require('./input-utils-b5e8f524.js');
const keyboardUtils = require('./keyboard-utils-bb32119b.js');
const languageUtils = require('./language-utils-44df1d37.js');
require('./string-utils-5cadd058.js');

var formEmail={"title":"form-email","tags":"form email","svg":"<svg fill=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\"><path d=\"M12 23.999c-3.205 0-6.218-1.248-8.484-3.514S.001 15.206.001 12.001s1.248-6.218 3.514-8.485C5.782 1.25 8.795.001 12 .001s6.218 1.248 8.485 3.514A11.92 11.92 0 0 1 24 12v2.25A3.754 3.754 0 0 1 20.25 18a3.77 3.77 0 0 1-3.48-2.365A6.009 6.009 0 0 1 12 18c-3.308 0-6-2.692-6-6s2.692-6 6-6 6 2.692 6 6v2.25c0 1.241 1.009 2.25 2.25 2.25s2.25-1.009 2.25-2.25V12c0-2.804-1.092-5.441-3.075-7.424A10.433 10.433 0 0 0 12 1.501c-2.804 0-5.441 1.092-7.424 3.075S1.501 9.196 1.501 12c0 2.805 1.092 5.441 3.075 7.424s4.619 3.074 7.423 3.074c2.257 0 4.494-.746 6.299-2.1a.749.749 0 1 1 .9 1.199A12.049 12.049 0 0 1 12 23.999zM12 7.5c-2.481 0-4.5 2.019-4.5 4.5s2.019 4.5 4.5 4.5 4.5-2.019 4.5-4.5-2.019-4.5-4.5-4.5z\"/></svg>"};

const duetInputCss = "*.sc-duet-input,*.sc-duet-input::after,*.sc-duet-input::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-input-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-right:16px !important;margin-bottom:12px !important;display:inline-flex;width:100%;min-width:calc(33.333% - 8px);max-width:100%;text-align:left;vertical-align:bottom}.sc-duet-input-h:last-child,.sc-duet-input-h:last-of-type{margin-right:0 !important}@media (min-width: 36em){.sc-duet-input-h{width:calc(50% - 16px - 3px)}}.duet-expand.sc-duet-input-h{width:100% !important}.duet-m-0.sc-duet-input-h{margin:0 !important}input[type=search].sc-duet-input::-webkit-search-cancel-button{-webkit-appearance:none}duet-tooltip.sc-duet-input{top:12px;right:0}@media (min-width: 48em){duet-tooltip.sc-duet-input{position:relative;right:auto}}duet-caption.sc-duet-input:not(:last-of-type){margin-bottom:0}.duet-input-placeholder.sc-duet-input{position:absolute;top:-9px;left:9px;z-index:200;display:block;width:auto;max-width:60%;padding:0 0.25rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;background:rgb(255, 255, 255)}.duet-input-icon.sc-duet-input{position:absolute;top:50%;right:16px;z-index:200;width:20px;height:20px;font-size:0;line-height:normal;color:rgb(0, 41, 77);pointer-events:none;transform:translateY(-50%)}.duet-theme-turva.sc-duet-input .duet-input-icon.sc-duet-input{color:rgb(23, 28, 58)}.duet-input-container.sc-duet-input{position:relative;width:100%;height:100%}.duet-input-container.has-clear.sc-duet-input .duet-input-clear-icon.sc-duet-input{position:relative;z-index:250}.duet-input-container.has-clear.sc-duet-input .duet-input-clear-icon.sc-duet-input button.sc-duet-input{position:absolute;top:-24px;right:-24px;min-width:48px;min-height:48px;color:rgb(0, 77, 128)}.duet-input-container.has-clear.sc-duet-input .duet-input-clear-icon.sc-duet-input button.sc-duet-input:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-input-container.has-clear.sc-duet-input .duet-input-clear-icon.sc-duet-input button.sc-duet-input:active{opacity:0.75;transition:none}.duet-input-container.has-clear.sc-duet-input .duet-input-clear-icon.duet-input-clear-icon-single.sc-duet-input button.sc-duet-input{top:-48px;right:0}.duet-input-container.has-clear.sc-duet-input .duet-input-clear-icon.duet-input-clear-icon-double.sc-duet-input button.sc-duet-input{top:-24px;right:12px}.duet-input-container.has-clear.sc-duet-input .duet-input-clear-icon.duet-input-clear-icon-button.sc-duet-input button.sc-duet-input{top:-24px;right:0}.duet-input-container.has-clear.has-icon.sc-duet-input .duet-input-clear-icon.sc-duet-input{top:-24px;right:24px}.duet-input-container.duet-theme-turva.has-clear.sc-duet-input .duet-input-clear-icon.sc-duet-input button.sc-duet-input{color:rgb(0, 41, 77)}.duet-input-container.duet-theme-turva.has-clear.sc-duet-input .duet-input-clear-icon.sc-duet-input button.sc-duet-input:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-input-label-container.sc-duet-input{display:flex;flex-direction:row;align-items:flex-start;justify-content:space-between}@media (min-width: 48em){.duet-input-label-container.sc-duet-input{justify-content:flex-start}}.duet-input.sc-duet-input{position:relative;z-index:100;display:block !important;width:100% !important;min-width:8rem;max-width:initial !important;height:auto !important;padding:12px 14px !important;margin:initial !important;margin-bottom:initial !important;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400 !important;font-variant-numeric:tabular-nums;line-height:1.5 !important;color:rgb(0, 41, 77) !important;cursor:initial !important;background:rgb(255, 255, 255) !important;background-clip:initial !important;border:1px solid rgb(144, 149, 153) !important;border-radius:4px !important;box-shadow:initial !important;transition:box-shadow 150ms ease, border 150ms ease !important}.duet-input.is-number.sc-duet-input{padding-right:112px !important}.duet-input.is-date.sc-duet-input{padding-right:64px !important}.has-error.sc-duet-input .duet-input.sc-duet-input{border-color:rgb(222, 35, 98) !important}.has-error.sc-duet-input .duet-input.sc-duet-input+.duet-input-icon.sc-duet-input{color:rgb(222, 35, 98) !important}.duet-theme-turva.has-error.sc-duet-input .duet-input.sc-duet-input{border-color:rgb(224, 42, 13) !important}.duet-theme-turva.has-error.sc-duet-input .duet-input.sc-duet-input+.duet-input-icon.sc-duet-input{color:rgb(224, 42, 13) !important}.has-icon.sc-duet-input .duet-input.sc-duet-input{padding-right:48px !important}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58) !important;border-color:rgb(116, 116, 117) !important}.duet-input.sc-duet-input::-ms-clear{display:none}.duet-input.sc-duet-input::-webkit-contacts-auto-fill-button{display:none !important}.duet-input.sc-duet-input::-webkit-input-placeholder{color:rgb(101, 119, 135);opacity:1 !important;transition:color 300ms ease}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input::-webkit-input-placeholder{color:rgb(116, 116, 117)}.duet-input.sc-duet-input:focus::-webkit-input-placeholder{color:rgb(207, 210, 212)}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus::-webkit-input-placeholder{color:rgb(207, 207, 209)}.duet-input.sc-duet-input::-moz-placeholder{color:rgb(101, 119, 135);opacity:1 !important}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input::-moz-placeholder{color:rgb(116, 116, 117)}.duet-input.sc-duet-input:focus::-moz-placeholder{color:rgb(207, 210, 212)}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus::-moz-placeholder{color:rgb(207, 207, 209)}.duet-input.sc-duet-input:-ms-input-placeholder{color:rgb(101, 119, 135)}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:-ms-input-placeholder{color:rgb(116, 116, 117)}.duet-input.sc-duet-input:focus:-ms-input-placeholder{color:rgb(207, 210, 212)}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus:-ms-input-placeholder{color:rgb(207, 207, 209)}.duet-input[disabled].sc-duet-input{color:rgb(0, 41, 77) !important;cursor:text !important;background:rgb(245, 248, 250) !important;border-color:rgb(245, 248, 250) !important;box-shadow:none !important;opacity:1 !important;-webkit-text-fill-color:rgb(0, 41, 77) !important}.duet-theme-turva.sc-duet-input .duet-input[disabled].sc-duet-input{color:rgb(23, 28, 58) !important;background:rgb(245, 245, 247) !important;border-color:rgb(245, 245, 247) !important;-webkit-text-fill-color:rgb(23, 28, 58) !important}.duet-input.sc-duet-input:hover:not(:disabled){box-shadow:0 0 0 1px rgb(144, 149, 153) !important}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:hover:not(:disabled){box-shadow:0 0 0 1px rgb(116, 116, 117) !important}.has-error.sc-duet-input .duet-input.sc-duet-input:hover:not(:disabled){box-shadow:0 0 0 1px rgb(222, 35, 98)}.duet-theme-turva.has-error.sc-duet-input .duet-input.sc-duet-input:hover:not(:disabled){box-shadow:0 0 0 1px rgb(224, 42, 13)}.duet-input.sc-duet-input:focus{border-color:rgb(0, 119, 179) !important;outline:0;box-shadow:0 0 0 1px rgb(0, 119, 179) !important;transition:none}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus{border-color:rgb(23, 28, 58) !important;box-shadow:0 0 0 1px rgb(23, 28, 58) !important}.duet-theme-turva.sc-duet-input .duet-input.sc-duet-input:focus+.duet-input-icon.sc-duet-input{color:rgb(23, 28, 58)}.has-error.sc-duet-input .duet-input.sc-duet-input:focus{box-shadow:0 0 0 1px rgb(222, 35, 98)}.duet-theme-turva.has-error.sc-duet-input .duet-input.sc-duet-input:focus{box-shadow:0 0 0 1px rgb(224, 42, 13)}.duet-input.sc-duet-input:focus+.duet-input-icon.sc-duet-input{color:rgb(0, 119, 179)}.duet-input[type=search].sc-duet-input:not(:placeholder-shown):focus+.duet-input-icon.sc-duet-input{display:none}.duet-input.sc-duet-input:not(:focus):not(:hover):invalid{box-shadow:none !important}.duet-input[type=number].sc-duet-input::-webkit-inner-spin-button,.duet-input[type=number].sc-duet-input::-webkit-outer-spin-button,.duet-input[type=time].sc-duet-input::-webkit-inner-spin-button,.duet-input[type=time].sc-duet-input::-webkit-outer-spin-button{display:none;margin:0;-webkit-appearance:none}.duet-input.sc-duet-input::-webkit-search-cancel-button{margin-right:-28px}.duet-input-help.sc-duet-input{display:block;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;font-weight:400;line-height:1.25;color:rgb(101, 119, 135);border-radius:4px}.duet-input-help.sc-duet-input span.sc-duet-input{display:block;margin-top:8px}.duet-theme-turva.sc-duet-input .duet-input-help.sc-duet-input{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(116, 116, 117)}.has-error.sc-duet-input .duet-input-help.sc-duet-input{color:rgb(222, 35, 98)}.duet-theme-turva.has-error.sc-duet-input .duet-input-help.sc-duet-input{color:rgb(224, 42, 13)}.duet-label-hidden.sc-duet-input duet-label.sc-duet-input{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0 0 0 0);border:0}.duet-input-relative.sc-duet-input{position:relative;width:100%}.duet-input-variation-button.sc-duet-input{position:relative;width:100%}.duet-input-variation-button.sc-duet-input .duet-input-relative.sc-duet-input{display:flex;flex-direction:row;flex-wrap:nowrap;align-content:center;align-items:center;justify-content:flex-start;width:auto}.duet-input-variation-button.sc-duet-input .duet-input-relative.sc-duet-input duet-button.sc-duet-input{z-index:250;margin-bottom:0}.duet-input-variation-button.sc-duet-input .duet-input-relative.sc-duet-input .duet-input.sc-duet-input{border-right-width:0 !important;border-top-right-radius:0 !important;border-bottom-right-radius:0 !important}.duet-input-variation-revealable.sc-duet-input{position:relative;width:100%}.duet-input-variation-revealable.sc-duet-input .sc-duet-input::-ms-reveal{display:none}.duet-input-variation-revealable.sc-duet-input .duet-input-relative.sc-duet-input{display:flex;flex-direction:row;flex-wrap:nowrap;align-content:center;align-items:center;justify-content:flex-start;width:auto;border:1px solid rgb(144, 149, 153);border-radius:4px;box-shadow:initial;transition:box-shadow 150ms ease, border 150ms ease}.duet-theme-turva.sc-duet-input .duet-input-variation-revealable.sc-duet-input .duet-input-relative.sc-duet-input{border-color:rgb(116, 116, 117)}.duet-input-variation-revealable.sc-duet-input .duet-input-relative.sc-duet-input duet-button.sc-duet-input{z-index:250;margin-bottom:0}.duet-input-variation-revealable.sc-duet-input .duet-input-relative.sc-duet-input .duet-input.sc-duet-input{border-width:0 !important}.duet-input-variation-revealable.sc-duet-input .duet-input-relative.sc-duet-input .duet-input.sc-duet-input:focus,.duet-input-variation-revealable.sc-duet-input .duet-input-relative.sc-duet-input .duet-input.sc-duet-input:hover{border-width:0 !important;box-shadow:none !important}.duet-input-variation-revealable.disabled.sc-duet-input .duet-input-relative.sc-duet-input{background:rgb(245, 248, 250);border-color:rgb(225, 227, 230);box-shadow:none}.duet-input-variation-revealable.has-error.sc-duet-input .duet-input-relative.sc-duet-input{border-color:rgb(222, 35, 98)}.duet-input-variation-revealable.duet-theme-turva.has-error.sc-duet-input .duet-input-relative.sc-duet-input{border-color:rgb(224, 42, 13)}.duet-input-variation-revealable.has-focus.sc-duet-input .duet-input-relative.sc-duet-input{border-color:rgb(0, 119, 179);box-shadow:0 0 0 1px rgb(0, 119, 179)}.duet-input-variation-revealable.duet-theme-turva.has-focus.sc-duet-input .duet-input-relative.sc-duet-input{border-color:rgb(23, 28, 58);box-shadow:0 0 0 1px rgb(23, 28, 58)}.duet-input-variation-revealable.sc-duet-input:hover:not(.disabled) .duet-input-relative.sc-duet-input{box-shadow:0 0 0 1px rgb(144, 149, 153)}.duet-input-variation-revealable.duet-theme-turva.sc-duet-input:hover:not(.disabled) .duet-input-relative.sc-duet-input{box-shadow:0 0 0 1px rgb(116, 116, 117)}.duet-input-variation-revealable.has-error.sc-duet-input:hover:not(.disabled) .duet-input-relative.sc-duet-input{box-shadow:0 0 0 1px rgb(222, 35, 98)}.duet-input-variation-revealable.duet-theme-turva.has-error.sc-duet-input:hover:not(.disabled) .duet-input-relative.sc-duet-input{box-shadow:0 0 0 1px rgb(224, 42, 13)}";

const icons = {
  search: formSearch.formSearch,
  email: formEmail,
};
const DuetInput = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.duetInput = index.createEvent(this, "duetInput", 7);
    this.duetChange = index.createEvent(this, "duetChange", 3);
    this.duetBlur = index.createEvent(this, "duetBlur", 7);
    this.duetClear = index.createEvent(this, "duetClear", 7);
    this.duetFocus = index.createEvent(this, "duetFocus", 7);
    /**
     * Own Properties
     */
    this.inputId = createId.createID("DuetInput");
    this.clearId = createId.createID("DuetInputClear");
    this.labelId = createId.createID("DuetLabel");
    this.topCaptionId = createId.createID("DuetCaptionTop");
    this.topCaptionPlaceholderId = createId.createID("DuetCaptionPlaceholderTop");
    this.errorId = createId.createID("DuetError");
    this.disallowPatternRegex = null;
    this.clearLabel = {
      en: "Clear",
      fi: "Tyhjennä",
      sv: "Rensa",
    };
    this.timeAnnouncement = {
      en: "Time",
      fi: "Aika",
      sv: "Tid",
    };
    this.showPasswordLabel = {
      en: "Show password",
      fi: "Näytä salasana",
      sv: "Visa lösenord",
    };
    this.hidePasswordLabel = {
      en: "Hide password",
      fi: "Piilota salasana",
      sv: "Dölj lösenord",
    };
    this.passwordShownAriaAnnouncement = {
      en: "Password is shown",
      fi: "Salasana näytetään",
      sv: "Lösenordet visas",
    };
    this.passwordHiddenAriaAnnouncement = {
      en: "Password is hidden",
      fi: "Salasana on piilotettu",
      sv: "Lösenordet är dolt",
    };
    /**
     * Component event handling.
     */
    this.onInput = (ev) => {
      if (this.disallowPatternRegex) {
        inputUtils.cleanValue(this.nativeInput, this.disallowPatternRegex);
      }
      this.value = this.nativeInput.value || "";
      this.duetInput.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-input",
      });
    };
    this.onBlur = (ev) => {
      // prevent blur event when focus moves to the reveal password button or the input itself
      if (ev.relatedTarget === this.nativeInput || ev.relatedTarget === this.togglePasswordRevealedButton) {
        return;
      }
      if (this.variation === "revealable" && this.isPasswordRevealed) {
        this.isPasswordRevealed = false;
      }
      this.isFocused = false;
      this.duetBlur.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-input",
      });
    };
    this.onFocus = (ev) => {
      this.isFocused = true;
      this.duetFocus.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-input",
      });
    };
    this.onClear = (ev) => {
      this.duetClear.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-input",
      });
    };
    /**
     * Private functions
     */
    this.getDescribedBy = () => {
      const describedBy = [];
      if (this.isCaptionVisible && this.topCaptionId) {
        describedBy.push(this.topCaptionId);
      }
      if (this.accessibleDescribedBy) {
        describedBy.push(this.accessibleDescribedBy);
      }
      if (this.error) {
        describedBy.push(this.errorId);
      }
      return describedBy.length > 0 ? describedBy.join(" ") : null;
    };
    this.handleClearClick = event => {
      const clearing = this.clearInput();
      this.onClear(event);
      return clearing;
    };
    this.keyHandler = event => {
      if (keyboardUtils.isEscapeKey(event) && this.clear) {
        this.handleClearClick(event);
      }
      if (keyboardUtils.isEnterKey(event) && this.variation === "revealable") {
        if (event.target === this.togglePasswordRevealedButton) {
          event.stopPropagation();
        }
        else {
          this.isPasswordRevealed = false;
        }
      }
      return event;
    };
    this.togglePasswordRevealed = () => {
      this.isPasswordRevealed = !this.isPasswordRevealed;
    };
    this.getInputType = () => {
      if (this.variation === "revealable") {
        return this.isPasswordRevealed ? "text" : "password";
      }
      return this.type;
    };
    this.language = languageUtils.getLanguage();
    this.isPasswordRevealed = undefined;
    this.isFocused = false;
    this.accessibleActiveDescendant = undefined;
    this.accessibleAutocomplete = undefined;
    this.accessibleControls = undefined;
    this.accessibleOwns = undefined;
    this.accessibleExpanded = undefined;
    this.accessibleDescribedBy = "";
    this.accessibleHasPopup = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleLiveError = "polite";
    this.debounce = 0;
    this.clear = false;
    this.caption = undefined;
    this.echoPlaceholder = false;
    this.theme = "";
    this.expand = false;
    this.disabled = false;
    this.identifier = undefined;
    this.margin = "auto";
    this.required = false;
    this.type = "text";
    this.variation = "default";
    this.label = "Label";
    this.error = "";
    this.labelHidden = false;
    this.numericKeyboard = false;
    this.name = undefined;
    this.pattern = undefined;
    this.maxlength = undefined;
    this.minlength = undefined;
    this.placeholder = undefined;
    this.component = "input";
    this.role = undefined;
    this.icon = undefined;
    this.autoComplete = "on";
    this.disallowPattern = null;
    this.value = undefined;
    this.tooltip = "";
    this.tooltipDirection = "auto";
  }
  disallowedPatternChange() {
    this.disallowPatternRegex = this.disallowPattern ? new RegExp(this.disallowPattern, "g") : null;
  }
  valueChanged() {
    var _a;
    if (((_a = this === null || this === void 0 ? void 0 : this.nativeInput) === null || _a === void 0 ? void 0 : _a.value) !== this.value) {
      const restoreCursor = inputUtils.resetCursor(this.nativeInput);
      this.nativeInput.value = this.value;
      // restore selection position after having set value
      // (in webkit based browsers settings value trigger cursor position and will set it to EndOfText)
      restoreCursor();
    }
    this.isCaptionVisible = !!this.caption;
    const emitEvent = () => this.duetChange.emit({
      value: this.value,
      component: "duet-input",
    });
    if (this.debounce === 0) {
      emitEvent();
    }
    else {
      clearTimeout(this.timeoutId);
      this.timeoutId = setTimeout(emitEvent, this.debounce);
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
    this.disallowedPatternChange();
    this.isCaptionVisible = !!this.caption;
  }
  componentDidLoad() {
    if (this.variation === "revealable" && this.nativeInput.form) {
      this.nativeInput.form.addEventListener("submit", () => {
        this.isPasswordRevealed = false;
      });
    }
  }
  connectedCallback() {
    languageUtils.connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    languageUtils.disconnectLanguageChangeObserver(this);
  }
  /**
   * Sets focus on the specified `duet-input`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus(options) {
    if (this.nativeInput) {
      this.nativeInput.focus(options);
    }
  }
  /**
   * Reset the cursor position on the native element
   * `input.resetCursor()`.
   */
  async resetCursor() {
    if (this.nativeInput) {
      const restoreCursor = inputUtils.resetCursor(this.nativeInput);
      this.nativeInput.value = this.value;
      restoreCursor();
    }
  }
  /**
   * Reset the cursor position on the native element
   * `input.resetCursor()`.
   */
  async clearInput() {
    if (this.nativeInput) {
      this.nativeInput.value = "";
      this.nativeInput.focus();
      this.value = "";
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const identifier = this.identifier || this.inputId;
    const inputProps = {};
    if (this.numericKeyboard) {
      inputProps.inputmode = "numeric";
    }
    // Set validation regexes
    if (this.pattern && this.type !== "tel") {
      inputProps.pattern = this.pattern;
    }
    else if (!this.pattern && this.type === "tel") {
      inputProps.pattern = "[0-9+ ]+";
    }
    let selectedTime;
    if (this.value) {
      selectedTime = new Date();
      try {
        selectedTime.setHours(Number(this.value.slice(0, 2)), Number(this.value.slice(3, 5)), 0, 0);
      }
      catch (e) {
        selectedTime = undefined;
      }
    }
    const hasInputIcon = !this.icon &&
      this.type !== "text" &&
      this.type !== "tel" &&
      this.type !== "password" &&
      this.type !== "time" &&
      this.variation !== "button";
    return (index.h(index.Host, { class: { "duet-expand": this.expand, "duet-m-0": this.margin === "none" }, onKeyUp: e => this.keyHandler(e) }, this.type === "time" && (index.h("duet-visually-hidden", { "aria-live": "polite", "aria-atomic": "true" }, selectedTime ? `${this.timeAnnouncement[this.language]} ${selectedTime.toLocaleTimeString()}` : "")), index.h("div", { class: {
        "duet-input-container": true,
        "duet-theme-turva": this.theme === "turva",
        [`duet-input-variation-${this.variation}`]: true,
        "duet-label-hidden": this.labelHidden,
        "duet-input-top-caption-shown": this.isCaptionVisible,
        "has-icon": this.variation !== "button" &&
          (!!this.icon ||
            (this.type !== "text" && this.type !== "tel" && this.type !== "password" && this.type !== "time")),
        "has-error": !!this.error,
        "has-clear": this.clear,
        "has-focus": this.isFocused,
        disabled: this.disabled,
      } }, index.h("div", { class: "duet-input-label-container" }, index.h("duet-label", { theme: this.theme === "turva" ? "turva" : "default", margin: this.isCaptionVisible ? "small" : "auto", id: this.labelId, for: identifier }, this.label), this.tooltip && (index.h("duet-tooltip", { class: "duet-input-tooltip", direction: this.tooltipDirection, accessibleInputLabel: this.label, theme: this.theme === "turva" ? "turva" : "default" }, this.tooltip))), this.caption && (index.h("duet-caption", { id: this.topCaptionId, size: "medium" }, this.caption)), index.h("div", { class: "duet-input-relative" }, this.placeholder && this.echoPlaceholder && (this.value || this.type === "time") && (index.h("duet-caption", { id: this.topCaptionPlaceholderId, class: "duet-input-placeholder", margin: "none", size: "small" }, this.placeholder)), index.h("input", Object.assign({ ref: input => (this.nativeInput = input), onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, type: this.getInputType(), class: {
        "duet-input": true,
        disabled: this.disabled,
        "is-number": this.component === "number",
        "is-date": this.component === "date",
      }, value: this.value, disabled: this.disabled, "aria-invalid": this.error ? "true" : "false", "aria-labelledby": this.accessibleLabelledBy ? `${this.labelId} ${this.accessibleLabelledBy}` : this.labelId, "aria-controls": this.accessibleControls, "aria-autocomplete": this.accessibleAutocomplete, "aria-activedescendant": this.accessibleActiveDescendant, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, "aria-expanded": this.accessibleExpanded, "aria-haspopup": this.accessibleHasPopup, "aria-owns": this.accessibleOwns, "aria-describedby": this.getDescribedBy(), placeholder: this.placeholder, spellcheck: "false", minlength: this.minlength, maxlength: this.maxlength, autocomplete: this.type === "password" ? "off" : this.autoComplete, required: this.required, role: this.role, name: this.name, id: identifier }, inputProps)), !this.value && hasInputIcon && (index.h("div", { class: "duet-input-icon" }, index.h("duet-icon", { margin: "none", size: "small", icon: icons[this.type].svg, color: "currentColor" }))), this.clear && this.value && (index.h("div", { class: {
        "duet-input-clear-icon": true,
        "duet-input-clear-icon-single": !hasInputIcon,
        "duet-input-clear-icon-double": !!this.icon,
        "duet-input-clear-icon-button": this.variation === "button",
      } }, index.h("button", { onClick: this.handleClearClick, id: this.clearId, "aria-label": this.clearLabel[this.language], "aria-keyshortcuts": "Escape" }, index.h("duet-icon", { margin: "none", size: "medium", name: "action-clear-input", color: "currentColor" })))), this.icon && this.variation !== "button" && (index.h("div", { class: "duet-input-icon" }, index.h("duet-icon", { margin: "none", size: "small", name: this.icon, color: "currentColor" }))), this.variation === "button" && index.h("slot", { name: "button" }), this.variation === "revealable" && (index.h("duet-button", { ref: button => (this.togglePasswordRevealedButton = button), onBlur: this.onBlur, onFocus: this.onFocus, onClick: this.togglePasswordRevealed, icon: this.isPasswordRevealed ? "action-hide" : "action-show", accessibleLabel: this.isPasswordRevealed
        ? this.hidePasswordLabel[this.language]
        : this.showPasswordLabel[this.language], margin: "none", variation: "input-button-embedded", fixed: true, iconOnly: true })), this.variation === "revealable" && this.isPasswordRevealed !== undefined && (index.h("duet-visually-hidden", null, index.h("span", { "aria-live": "polite" }, this.isPasswordRevealed
      ? this.passwordShownAriaAnnouncement[this.language]
      : this.passwordHiddenAriaAnnouncement[this.language]))), index.h("slot", null)), index.h("span", { class: "duet-input-help", id: this.errorId, "aria-atomic": "true", "aria-live": this.accessibleLiveError, "aria-relevant": "additions removals" }, this.error && index.h("span", { class: "duet-input-error" }, this.error)))));
  }
  get element() { return index.getElement(this); }
  static get watchers() { return {
    "disallowPattern": ["disallowedPatternChange"],
    "value": ["valueChanged"]
  }; }
};
DuetInput.style = duetInputCss;

const duetLabelCss = "*.sc-duet-label,*.sc-duet-label::after,*.sc-duet-label::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}.sc-duet-label-h{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;margin-bottom:12px !important;position:relative;z-index:100;display:inline-flex;width:auto;margin-top:8px !important;line-height:1.25;cursor:default}.duet-p-0.sc-duet-label-h{padding:0 !important}.duet-m-0.sc-duet-label-h{margin:0 !important}.duet-m-0.sc-duet-label-h{margin-bottom:0 !important}.duet-small-margin.sc-duet-label-h{margin-top:8px !important;margin-bottom:4px !important}.duet-has-tooltip.sc-duet-label-h{padding-right:48px}@media (min-width: 48em){.duet-has-tooltip.sc-duet-label-h{padding-right:0}}label.sc-duet-label{margin:0;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:600 !important;line-height:1.25;color:rgb(0, 41, 77);text-align:left;word-break:break-word}label.sc-duet-label span.sc-duet-label{font-size:1rem;font-weight:600 !important;word-break:break-word}.duet-label-small.sc-duet-label-h label.sc-duet-label{font-size:0.875rem}.duet-label-small.sc-duet-label-h label.sc-duet-label span.sc-duet-label{font-size:0.875rem}.duet-theme-turva.sc-duet-label-h label.sc-duet-label{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58)}";

const DuetLabel = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.theme = "";
    this.for = undefined;
    this.margin = "auto";
    this.size = "medium";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (index.h(index.Host, { class: {
        "duet-label": true,
        "duet-label-small": this.size === "small",
        "duet-theme-turva": this.theme === "turva",
        "duet-small-margin": this.margin === "small",
        "duet-m-0": this.margin === "none",
      } }, index.h("label", { htmlFor: this.for }, index.h("span", null, index.h("slot", null)))));
  }
};
DuetLabel.style = duetLabelCss;

exports.duet_input = DuetInput;
exports.duet_label = DuetLabel;
