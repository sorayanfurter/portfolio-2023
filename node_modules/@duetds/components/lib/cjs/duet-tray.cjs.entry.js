/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a6cfed65.js');
const tokens_module = require('./tokens.module-5fe478ed.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');
const createId = require('./create-id-c3b984b1.js');
const languageUtils = require('./language-utils-44df1d37.js');
require('./string-utils-5cadd058.js');

const duetTrayCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;display:block;width:100%}.duet-tray{position:fixed;top:4rem;right:0;left:0;z-index:399;display:flex;flex-direction:column;max-height:calc(100% - 8rem);padding:16px 20px 16px 24px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:1rem;font-weight:400;line-height:1.5;color:rgb(0, 41, 77);visibility:hidden;background:rgb(243, 249, 252);border-bottom:1px solid rgb(225, 227, 230);box-shadow:0 2px 6px 0 rgba(0, 41, 77, 0.07);opacity:0;transition:opacity 600ms ease, visibility 600ms ease, transform 600ms ease;transform:translateY(-4rem)}@media (min-width: 62em){.duet-tray{padding:16px 36px}}@media (min-width: 106.25em){.duet-tray{padding:16px 52px 16px 60px}}.duet-tray:focus{outline:0}:host(.user-is-tabbing) .duet-tray:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}:host(.user-is-tabbing) .duet-tray.duet-theme-turva:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-tray.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";color:rgb(23, 28, 58);background:rgb(245, 245, 247);border-color:rgb(228, 228, 230)}.duet-tray.duet-tray-is-active{visibility:visible;opacity:1;transform:translateY(0)}.duet-tray.duet-tray-is-hidden{visibility:hidden;opacity:0;transform:translateY(-4rem)}@media (min-width: 62em){.duet-tray.duet-tray-is-responsive{display:none !important}}.duet-tray.duet-tray-is-expandable{padding-right:66px}@media (min-width: 62em){.duet-tray.duet-tray-is-expandable{padding-right:78px}}@media (min-width: 106.25em){.duet-tray.duet-tray-is-expandable{padding-right:94px}}.duet-tray-expandable{position:relative;z-index:100;width:calc(100% + 46px);max-height:0;overflow-y:auto;visibility:hidden;opacity:0;transition:opacity 600ms ease, visibility 600ms ease, max-height 600ms ease;scrollbar-width:none}.duet-tray-expandable::-webkit-scrollbar{display:none}.duet-tray-expandable.active{max-height:500px;visibility:visible;opacity:1}.duet-tray-expandable-content{width:100%;margin-top:16px;border-top:1px solid rgb(225, 227, 230)}.duet-theme-turva .duet-tray-expandable-content{border-color:rgb(228, 228, 230)}.duet-tray-button{-webkit-user-select:none;user-select:none;padding:20px !important;position:absolute;top:-2px;right:0;z-index:200;color:rgb(0, 41, 77);text-align:center;cursor:pointer;border-radius:4px;transition:transform 300ms ease;-webkit-tap-highlight-color:transparent}@media (min-width: 62em){.duet-tray-button{margin-right:16px}}@media (min-width: 106.25em){.duet-tray-button{margin-right:36px}}.duet-theme-turva .duet-tray-button{color:rgb(23, 28, 58)}.duet-tray-button.duet-tray-is-expanded{transform:rotate(-180deg)}.duet-tray-button:focus{outline:0}:host(.user-is-tabbing) .duet-tray-button:focus{box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}:host(.user-is-tabbing) .duet-theme-turva .duet-tray-button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-tray-button:active{box-shadow:none;opacity:0.75}";

const topOffset = parseFloat(tokens_module.sizeHeader) * 2 * 16; // convert rem -> px
const DuetTray = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    /**
     * Own Properties.
     */
    this.isTicking = false;
    this.expandableId = createId.createID("DuetTray");
    /**
     * Local methods.
     */
    this.animationLoop = () => {
      this.hiddenState = window.pageYOffset < topOffset;
      this.isTicking = false;
    };
    this.toggleExpandable = ev => {
      ev.preventDefault();
      this.expanded = !this.expanded;
    };
    this.expanded = false;
    this.hiddenState = false;
    this.language = languageUtils.getLanguage();
    this.accessibleCloseLabelDefaults = {
      fi: "Sulje",
      en: "Close",
      sv: "Stäng",
    };
    this.accessibleCloseLabel = languageUtils.getLocaleString(this.accessibleCloseLabelDefaults, this.language);
    this.accessibleOpenLabelDefaults = {
      fi: "Avaa",
      en: "Open",
      sv: "Öppna",
    };
    this.accessibleOpenLabel = languageUtils.getLocaleString(this.accessibleOpenLabelDefaults, this.language);
    this.theme = "";
    this.active = false;
    this.autoHide = true;
    this.responsive = true;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
    this.hasAdditionalContent = !!this.element.querySelector("[slot='additional']");
  }
  /**
   * Component event handling.
   */
  getFrame() {
    if (!this.isTicking && this.autoHide && this.active) {
      requestAnimationFrame(this.animationLoop);
      this.isTicking = true;
    }
  }
  handleBodyClick(e) {
    if (this.expanded) {
      this.expanded = this.element.contains(e.target);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (index.h("div", { class: {
        "duet-tray": true,
        "duet-tray-is-active": this.active,
        "duet-tray-is-hidden": this.hiddenState,
        "duet-tray-is-responsive": this.responsive,
        "duet-theme-turva": this.theme === "turva",
        "duet-tray-is-expandable": this.hasAdditionalContent,
      } }, index.h("div", { class: "duet-tray-default-content", role: "status" }, index.h("slot", null)), this.hasAdditionalContent && (index.h(index.Fragment, null, index.h("button", { "aria-expanded": this.expanded ? "true" : "false", "aria-controls": this.expandableId, onClick: ev => this.toggleExpandable(ev), class: { "duet-tray-button": true, "duet-tray-is-expanded": this.expanded } }, index.h("duet-icon", { name: "action-arrow-down", size: "small", color: "currentColor", margin: "none" }), index.h("duet-visually-hidden", null, this.expanded ? this.accessibleCloseLabel : this.accessibleOpenLabel)), index.h("div", { id: this.expandableId, class: { "duet-tray-expandable": true, active: this.expanded } }, index.h("div", { class: "duet-tray-expandable-content" }, index.h("slot", { name: "additional" })))))));
  }
  get element() { return index.getElement(this); }
};
DuetTray.style = duetTrayCss;

exports.duet_tray = DuetTray;
