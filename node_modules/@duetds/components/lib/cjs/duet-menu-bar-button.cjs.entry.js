/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a6cfed65.js');
const tokens = require('./tokens-30e7656b.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');

const duetMenuBarButtonCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;height:100%}.duet-menu-bar-button{position:relative;display:flex;gap:8px;align-items:center;justify-content:center;height:100%;padding:0 12px;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:inherit;color:inherit;text-align:center;text-decoration:none;cursor:pointer}.duet-menu-bar-button.duet-theme-turva{font-family:\"turva-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"}.duet-menu-bar-button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-menu-bar-button:focus.duet-theme-turva{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}@media (min-width: 62em){.duet-menu-bar-button{padding:0 16px}}@media (min-width: 76.25em){.duet-menu-bar-button{padding:0 28px}}@media (min-width: 62em){.duet-menu-bar-button:hover{color:rgb(0, 119, 179)}.duet-menu-bar-button:hover.duet-theme-turva{color:rgb(198, 12, 48)}}";

const DuetMenuBarButton = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.mql = [window.matchMedia(tokens.media_query_large.replace(/'/g, ""))];
    this.boundMqlFunctions = [];
    this.changeIconSize = () => {
      if (this.mql[0].matches) {
        this.iconSize = "x-small";
      }
      else {
        this.iconSize = "small";
      }
    };
    this.iconSize = "x-small";
    this.accessibleLabel = undefined;
    this.accessibleControls = undefined;
    this.accessiblePopup = "false";
    this.accessibleActiveDescendant = undefined;
    this.accessibleOwns = undefined;
    this.accessibleDescribedBy = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleExpanded = undefined;
    this.accessiblePressed = undefined;
    this.theme = "";
    this.icon = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
  }
  connectedCallback() {
    this.changeIconSize();
    for (let i = 0; i < this.mql.length; i++) {
      // addEventListener is not available in Stencil hydrate
      if (this.mql[i].addEventListener) {
        const bound = this.changeIconSize.bind(this);
        this.mql[i].addEventListener("change", bound);
        this.boundMqlFunctions[i] = bound;
      }
    }
  }
  disconnectedCallback() {
    for (let i = 0; i < this.mql.length; i++) {
      // removeEventListener is not available in Stencil hydrate
      if (this.mql[i].removeEventListener) {
        this.mql[i].removeEventListener("change", this.boundMqlFunctions[i]);
      }
    }
    this.boundMqlFunctions = [];
  }
  /**
   * Sets focus on underlying button element.
   */
  async setFocus(options) {
    if (this.nativeButton) {
      this.nativeButton.focus(options);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (index.h(index.Host, { onfocus: () => this.setFocus() }, index.h("button", { ref: button => (this.nativeButton = button), class: {
        "duet-menu-bar-button": true,
        "duet-theme-turva": this.theme === "turva",
      }, "aria-controls": this.accessibleControls, "aria-label": this.accessibleLabel, "aria-expanded": this.accessibleExpanded != null ? this.accessibleExpanded.toString() : undefined, "aria-activedescendant": this.accessibleActiveDescendant, "aria-owns": this.accessibleOwns, "aria-describedby": this.accessibleDescribedBy, "aria-labelledby": this.accessibleLabelledBy, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, "aria-pressed": this.accessiblePressed != null ? this.accessiblePressed.toString() : undefined, "aria-haspopup": this.accessiblePopup != null ? this.accessiblePopup.toString() : undefined }, this.icon && (index.h("duet-icon", { theme: this.theme, size: this.iconSize, name: this.icon, margin: "none", color: "currentColor" })), index.h("slot", null))));
  }
  get element() { return index.getElement(this); }
};
DuetMenuBarButton.style = duetMenuBarButtonCss;

exports.duet_menu_bar_button = DuetMenuBarButton;
