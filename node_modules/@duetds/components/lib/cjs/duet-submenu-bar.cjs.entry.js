/*!
 * Built with Duet Design System
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-a6cfed65.js');
const tokens = require('./tokens-30e7656b.js');
const bodyScrollLock_es6 = require('./bodyScrollLock.es6-6ef1142a.js');
const themeableComponent = require('./themeable-component-fdeaef9f.js');

const duetSubmenuBarCss = "*,*::after,*::before{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none}:host{box-sizing:border-box;padding:0;margin:0;background:transparent;border:0;-moz-appearance:none;-webkit-appearance:none;appearance:none;width:100%}:host(:not([open])) ::slotted(duet-submenu-bar-dropdown){display:none}@media (min-width: 62em){:host(:not([open])) ::slotted(duet-submenu-bar-dropdown){display:inherit}}.duet-submenu-bar{position:relative;background:rgb(243, 249, 252)}.duet-submenu-bar .shadow-container{position:absolute;width:100%;height:100%;overflow:hidden}.duet-submenu-bar .shadow-container .top-shadow{position:absolute;top:-52px;width:100%;height:52px;box-shadow:0 2px 6px 0 rgba(0, 41, 77, 0.07)}@media (min-width: 62em){.duet-submenu-bar .shadow-container .top-shadow{top:-80px;height:80px;box-shadow:0 3px 6px rgba(0, 41, 77, 0.1)}}@media (min-width: 62em){.duet-submenu-bar{border-bottom:1px solid rgb(205, 229, 241)}}.duet-submenu-bar button{display:flex;align-items:center;justify-content:center;width:100%;padding:12px 0;font-family:\"localtapiola-sans\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";font-size:0.875rem;font-weight:400;line-height:1.25;color:rgb(0, 41, 77)}.duet-submenu-bar button:focus{outline:0;box-shadow:0 0 0 4px rgba(0, 119, 179, 0.3), 0 0 0 1px rgb(0, 119, 179)}.duet-submenu-bar button.active .caret{transform:rotate(180deg)}.duet-submenu-bar button .label{position:relative;display:flex;gap:8px;align-items:center;justify-content:center}@media (min-width: 62em){.duet-submenu-bar button{display:none}}.duet-submenu-bar .menu-container{position:absolute;z-index:399;width:100%}.duet-submenu-bar .menu-container.hidden{max-height:0;overflow:hidden;visibility:hidden}@media (min-width: 62em){.duet-submenu-bar .menu-container,.duet-submenu-bar .menu-container.hidden{position:static;z-index:auto;max-height:unset;overflow:visible;visibility:visible}}.duet-submenu-bar .items{width:100%;height:70vh;overflow-y:scroll;visibility:visible;background:rgb(243, 249, 252);border-bottom:1px solid rgb(207, 210, 212)}.duet-submenu-bar .items ::slotted(*){position:relative}.duet-submenu-bar .items.hidden{max-height:0;overflow:hidden;visibility:hidden;border-bottom:0 solid rgb(207, 210, 212)}@media (min-width: 62em){.duet-submenu-bar .items .list{display:flex;align-items:center;justify-content:space-between;height:100%}.duet-submenu-bar .items,.duet-submenu-bar .items.hidden{position:static;z-index:auto;display:flex;flex-direction:row;align-items:center;justify-content:center;height:auto;max-height:unset;overflow:visible;visibility:visible;border:0}}.duet-submenu-bar .mobile-background{position:absolute;width:100%;height:100%;background:rgba(0, 41, 77, 0.6)}@media (min-width: 62em){.duet-submenu-bar .mobile-background{display:none}}.duet-submenu-bar.duet-theme-turva{background:rgb(245, 245, 247);border-bottom:1px solid rgb(228, 228, 230)}.duet-submenu-bar.duet-theme-turva button:focus{box-shadow:0 0 0 4px rgba(23, 28, 58, 0.2), 0 0 0 1px rgb(23, 28, 58)}.duet-submenu-bar.duet-theme-turva .items{background:rgb(245, 245, 247)}.duet-submenu-bar.duet-theme-turva .mobile-background{background:rgba(23, 28, 58, 0.6)}.duet-submenu-bar.duet-theme-turva .shadow-container .top-shadow{box-shadow:0 2px 6px 0 rgba(117, 117, 117, 0.13)}@media (min-width: 62em){.duet-submenu-bar.duet-theme-turva .shadow-container .top-shadow{box-shadow:0 3px 6px 0 rgba(117, 117, 117, 0.15)}}";

const DuetSubmenuBar = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.mql = [window.matchMedia(tokens.media_query_large.replace(/'/g, ""))];
    this.boundMqlFunctions = [];
    this.changeAriaProperties = () => {
      if (this.mql[0].matches) {
        this.mobile = false;
        bodyScrollLock_es6.enableBodyScroll(this.element);
      }
      else {
        this.mobile = true;
        if (!this.bodyScroll) {
          bodyScrollLock_es6.disableBodyScroll(this.element, { reserveScrollBarGap: true });
        }
      }
    };
    this.onClick = () => {
      const open = this.open;
      if (!open) {
        this.bodyScroll = false;
        bodyScrollLock_es6.disableBodyScroll(this.element, { reserveScrollBarGap: true });
      }
      else {
        bodyScrollLock_es6.enableBodyScroll(this.element);
        this.bodyScroll = true;
      }
      this.open = !open;
    };
    this.mobile = true;
    this.bodyScroll = true;
    this.theme = "";
    this.open = false;
    this.accessibleLabel = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    themeableComponent.inheritGlobalTheme(this);
    const children = Array.from(this.element.children);
    for (const child of children) {
      child.setAttribute("role", "listitem");
    }
  }
  connectedCallback() {
    this.changeAriaProperties();
    for (let i = 0; i < this.mql.length; i++) {
      // addEventListener is not available in Stencil hydrate
      if (this.mql[i].addEventListener) {
        const bound = this.changeAriaProperties.bind(this);
        this.mql[i].addEventListener("change", bound);
        this.boundMqlFunctions[i] = bound;
      }
    }
  }
  disconnectedCallback() {
    for (let i = 0; i < this.mql.length; i++) {
      // removeEventListener is not available in Stencil hydrate
      if (this.mql[i].removeEventListener) {
        this.mql[i].removeEventListener("change", this.boundMqlFunctions[i]);
      }
    }
    this.boundMqlFunctions = [];
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    this.button.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (index.h(index.Host, null, index.h("nav", { class: { "duet-submenu-bar": true, "duet-theme-turva": this.theme === "turva" }, "aria-label": this.accessibleLabel }, index.h("div", { class: "shadow-container", role: "presentation" }, index.h("div", { class: "top-shadow" })), index.h("button", { ref: element => (this.button = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", id: "button", type: "button", class: {
        active: this.open,
      }, onClick: this.onClick }, index.h("div", { class: "label" }, index.h("slot", { name: "label" }), index.h("duet-icon", { theme: this.theme, class: "caret", name: "action-arrow-down-small", margin: "none", size: "xxx-small", color: "currentColor" }))), index.h("div", { class: {
        "menu-container": true,
        hidden: !this.open,
      }, role: "presentation" }, index.h("div", { role: this.mobile ? "menu" : null, id: "menu", "aria-labelledby": this.mobile ? "button" : null, "aria-expanded": this.mobile ? (this.open ? "true" : "false") : null, class: {
        items: true,
        hidden: !this.open,
      } }, index.h("div", { class: "list", role: this.mobile ? "presentation" : "list" }, index.h("slot", null))), index.h("div", { class: "mobile-background" })))));
  }
  get element() { return index.getElement(this); }
};
DuetSubmenuBar.style = duetSubmenuBarCss;

exports.duet_submenu_bar = DuetSubmenuBar;
