/*!
 * Built with Duet Design System
 */
import infoIcon from "@duetds/icons/lib/assets/messaging-info";
import { Build, h, Host, } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { DuetStringsExternalDefaults } from "../../common-strings";
import { createID } from "../../utils/create-id";
import { FocusGuard } from "../../utils/focus-utils";
import { isEscapeKey, isKeyboardClick, isQuestionKey } from "../../utils/keyboard-utils";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
/**
 * @slot unnamed default slot - The component’s primary content. All child nodes that do not have a slot attribute defined are inserted into this primary slot.
 * @slot label - Label content.
 * @slot before-text - Content before text can be for example icons or images.
 * @slot info - Info content. Anything inserted into this slot is displayed in a collapsible info box.
 * @slot collapsible_header - header that is only added to collapsible element, this header should be used when the components collapsible area contains additional interactive elements (such as form items) and should be user for a short description of the content below it, it is mandatory for good accessibility to use this - and aria-decribe-by will point to it. If you use the collapsible area with simple text - describe-by will point to this area
 * @slot additional - Additional content. Anything inserted into this slot is displayed as additional content under the label and caption
 */
export class DuetChoice {
  constructor() {
    this.hasHeader = false;
    this.choiceId = createID("DuetChoice");
    this.expandId = createID("DuetChoiceExpand");
    this.headerId = createID("DuetChoiceHeader");
    this.infoButtonId = createID("DuetChoiceInfoButton");
    this.onMouseEnter = () => {
      this.isHovering = true;
    };
    this.onMouseLeave = () => {
      this.isHovering = false;
    };
    this.onClick = (ev) => {
      this.toggleChecked(ev);
    };
    this.handleKeyDown = (ev) => {
      if (isKeyboardClick(ev)) {
        this.toggleChecked(ev);
      }
      if (isQuestionKey(ev) && this.hasInfo) {
        this.toggleInfo();
      }
    };
    this.onChange = () => {
      this.checked = this.nativeInput.checked || false;
      this.duetChange.emit({
        checked: this.checked,
        value: this.value,
        component: "duet-choice",
      });
    };
    this.onBlur = (ev) => {
      this.duetBlur.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-choice",
      });
    };
    this.onFocus = (ev) => {
      this.duetFocus.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-choice",
      });
    };
    /**
     * Local methods
     */
    this.toggleChecked = ev => {
      ev.preventDefault();
      ev.stopPropagation();
      if (this.disabled || this.groupDisabled) {
        return;
      }
      this.isInfoOpen = false;
      // if it's a radio button, and it's already checked
      // we shouldn't fire an event, so exit early
      if (this.type === "radio" && this.checked) {
        return;
      }
      this.checked = !this.checked;
      this.duetChange.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-choice",
      });
    };
    this.toggleInfo = () => {
      this.isInfoOpen = !this.isInfoOpen;
    };
    this.isHovering = false;
    this.isInfoOpen = false;
    this.isBlurred = false;
    this.language = getLanguage();
    this.theme = "";
    this.label = "label";
    this.accessibleLabelInfoButtonDefaults = DuetStringsExternalDefaults;
    this.accessibleLabelInfoButton = getLocaleString(this.accessibleLabelInfoButtonDefaults);
    this.accessibleActiveDescendant = undefined;
    this.accessibleControls = undefined;
    this.accessibleOwns = undefined;
    this.accessibleDescribedBy = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.caption = "";
    this.value = undefined;
    this.type = "checkbox";
    this.name = undefined;
    this.checked = false;
    this.collapsible = false;
    this.margin = "auto";
    this.icon = "";
    this.expand = false;
    this.padding = "auto";
    this.identifier = undefined;
    this.groupDirection = undefined;
    this.groupDisabled = undefined;
    this.groupResponsive = undefined;
    this.disabled = false;
    this.required = false;
    this.infoLabelDefaults = {
      fi: "Lisätietoja vaihtoehdosta",
      en: "More information about",
      sv: "Mera information om",
    };
    this.infoLabel = getLocaleString(this.infoLabelDefaults, getLanguage());
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabelInfoButton === this.accessibleLabelInfoButtonDefaults[oldValue]) {
      this.accessibleLabelInfoButton = getLocaleString(this.accessibleLabelInfoButtonDefaults, newValue);
    }
    if (newValue !== oldValue && this.infoLabel === this.infoLabelDefaults[oldValue]) {
      this.infoLabel = getLocaleString(this.infoLabelDefaults, newValue);
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.hasInfo = !!this.element.querySelector("[slot='info']");
    this.hasHeader = !!this.element.querySelector('[slot="header"]');
    this.hasAdditional = Build.isServer
      ? Array.from(this.element.children).filter(el => el.matches("[slot='additional']")).length > 0
      : !!this.element.querySelector(":scope > [slot='additional']");
    this.hasLabel = Build.isServer
      ? Array.from(this.element.children).filter(el => el.matches("[slot='label']")).length > 0
      : !!this.element.querySelector(":scope > [slot='label']");
    this.hasBeforeText = !!this.element.querySelector("[slot='before-text']");
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Component event handling.
   */
  handleHostBlur(ev) {
    /**
     * When moving away from a choice, collapse the info bar to assist visually impared people on focusing
     */
    if (this.hasInfo && this.isInfoOpen && this.isKeyDown) {
      // @ts-ignore
      const isTargetContainedInHost = this.element.contains(ev === null || ev === void 0 ? void 0 : ev.relatedTarget) || false;
      if (!isTargetContainedInHost) {
        this.toggleInfo();
      }
    }
  }
  handleHostKeyDown() {
    this.isKeyDown = true;
  }
  handleHostKeyUp(ev) {
    this.isKeyDown = false;
    if (isEscapeKey(ev) && this.isInfoOpen) {
      this.toggleInfo();
    }
  }
  /**
   * Sets focus on the specified `duet-choice`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus(options) {
    this.nativeInput.focus(options);
  }
  /**
   * This method toggles the info section.
   */
  async toggleInfoMethod() {
    this.isInfoOpen = !this.isInfoOpen;
  }
  getAriaDescribedby() {
    if (this.accessibleDescribedBy) {
      return this.accessibleDescribedBy;
    }
    if (this.collapsible || this.hasInfo) {
      if (this.hasHeader) {
        return this.headerId;
      }
      else {
        return this.expandId;
      }
    }
    return null;
  }
  getClassNames() {
    if (this.hasInfo && !this.collapsible) {
      return {
        "duet-choice-card-info": true,
        "duet-choice-card-info-expanded": this.isInfoOpen,
        "duet-choice-card-collapsed": !this.isInfoOpen,
        "duet-theme-turva": this.theme === "turva",
      };
    }
    if (!this.hasInfo && this.collapsible) {
      return {
        "duet-choice-card-collapsible": true,
        "duet-choice-card-collapsible-expanded": this.checked,
        "duet-choice-card-collapsed": !this.checked,
        "duet-choice-card-collapsible-disabled": this.disabled || this.groupDisabled ? true : false,
        "duet-theme-turva": this.theme === "turva",
      };
    }
    return {
      "duet-choice-default-slot": true,
    };
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const choiceGroup = this.element.closest("duet-choice-group");
    const choiceGroupLabel = choiceGroup ? choiceGroup.label : undefined;
    const identifier = this.identifier || this.choiceId;
    return (h(Host, { class: {
        horizontal: this.groupDirection === "horizontal" && !this.groupResponsive,
        "horizontal-responsive": this.groupDirection === "horizontal" && this.groupResponsive,
        "duet-m-0": this.margin === "none",
        "duet-expand": this.expand,
        "duet-theme-turva": this.theme === "turva",
      } }, h("div", { class: {
        "duet-choice-card-flextainer": true,
        "duet-theme-turva": this.theme === "turva",
      } }, h("div", { class: {
        "duet-choice-card": true,
        "has-icon": !!this.icon,
        "has-info": this.hasInfo,
        checked: this.checked,
        info: this.isInfoOpen,
        collapsible: this.collapsible,
        "duet-p-0": this.padding === "none",
      } }, h("input", { class: "duet-choice-input", type: this.type, onFocus: this.onFocus, onBlur: this.onBlur, onChange: this.onChange, disabled: this.disabled || this.groupDisabled, required: this.required, id: identifier, name: this.name, value: this.value, checked: this.checked, "aria-controls": this.accessibleControls, "aria-activedescendant": this.accessibleActiveDescendant, "aria-labelledby": this.accessibleLabelledBy, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, "aria-owns": this.accessibleOwns, "aria-describedby": this.getAriaDescribedby(), onKeyDown: this.handleKeyDown, ref: input => (this.nativeInput = input) }), h("label", { htmlFor: identifier, class: { "duet-choice-label": true, "no-hover": this.isHovering, "has-before-text": this.hasBeforeText }, onClick: this.onClick }, this.hasBeforeText && h("slot", { name: "before-text" }), this.icon && (h("div", { class: "duet-choice-card-icon" }, h("duet-icon", { margin: "none", size: "small", name: this.icon, color: "currentColor" }))), h("div", { class: "duet-choice-card-text" }, choiceGroupLabel && h("duet-visually-hidden", null, choiceGroupLabel, ", "), h("div", null, this.hasLabel ? h("slot", { name: "label" }) : this.label), this.caption && (h("div", null, h("duet-spacer", { size: "xx-small" }), h("duet-caption", { margin: "none", selected: this.checked }, this.caption))), this.hasAdditional && (h("div", null, h("duet-spacer", { size: "xx-small" }), h("slot", { name: "additional" })))), h("div", null, h("div", { class: { "duet-checkmark-container": true, "duet-checkmark-radio": this.type === "radio" } }, this.checked && h("div", { class: "duet-checkmark" }))))), this.hasInfo && !this.collapsible && (h("button", { ref: button => (this.infoButtonEl = button), id: this.infoButtonId, class: {
        "duet-choice-info-toggle": true,
        "duet-theme-turva": this.theme === "turva",
      }, onMouseEnter: this.onMouseEnter, onMouseLeave: this.onMouseLeave, onClick: this.toggleInfo, disabled: this.disabled || this.groupDisabled, "aria-expanded": this.isInfoOpen ? "true" : "false", "aria-label": `${this.infoLabel} ${this.label}`, "aria-controls": this.expandId, "aria-flowto": this.expandId, tabindex: this.type === "radio" && !this.checked ? "-1" : "0", type: "button" }, h("duet-visually-hidden", { "aria-hidden": !this.isBlurred ? "true" : "false" }, this.accessibleLabelInfoButton), h("div", { class: "duet-choice-info-icon" }, h("duet-icon", { icon: infoIcon.svg, margin: "none", size: "small", color: "currentColor" }))))), this.collapsible || this.hasInfo ? (h("div", { class: this.getClassNames(), id: this.expandId }, h("span", { class: {
        "duet-choice-section-visible": this.collapsible ? this.checked : this.isInfoOpen,
        "duet-choice-section-hidden": this.collapsible ? !this.checked : !this.isInfoOpen,
      } }, h("span", { id: this.headerId }, h("slot", { name: "header" })), this.hasInfo ? (h("span", null, h("span", { "aria-relevant": "all", "aria-atomic": "true", "aria-live": this.isInfoOpen ? "polite" : "off" }, h("slot", { name: "info" })), h("slot", null))) : (h("span", null, h("slot", null)))), this.isInfoOpen && h(FocusGuard, { moveFocusTo: this.infoButtonEl }))) : null));
  }
  static get is() { return "duet-choice"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-choice.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-choice.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the choice."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Label for the choice button."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "\"label\""
      },
      "accessibleLabelInfoButtonDefaults": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject | string",
          "resolved": "DuetLangObject | string",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Property to change accessibleLabelInfoButton defaults on the component.\nnormally you would handle these strings on an application level and override @accessibleLabelInfoButton when needed"
        },
        "attribute": "accessible-label-info-default",
        "reflect": false,
        "defaultValue": "DuetStringsExternalDefaults"
      },
      "accessibleLabelInfoButton": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Avautuu uuteen ikkunaan\",sv: \"\u00D6ppnas i nytt f\u00F6nster\",en: \"Opens in a new window\"}"
            }],
          "text": "Accessible label that is read for screen reader users in the info toggle trigger button.\nNot visible for normal users."
        },
        "attribute": "accessible-label-info-button",
        "reflect": false,
        "defaultValue": "getLocaleString(this.accessibleLabelInfoButtonDefaults)"
      },
      "accessibleActiveDescendant": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a related component\u2019s visually focused element."
        },
        "attribute": "accessible-active-descendant",
        "reflect": false
      },
      "accessibleControls": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Use this prop to add an aria-controls attribute. Use the attribute to\nindicate the id of a component controlled by this component."
        },
        "attribute": "accessible-controls",
        "reflect": false
      },
      "accessibleOwns": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a component owned by the choice."
        },
        "attribute": "accessible-owns",
        "reflect": false
      },
      "accessibleDescribedBy": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a component that describes the choice.\nif this is set to an empty string it will prevent screenreaders from flowing to a collapsible content\nand can be used as an escape hatch if that behaviour is undesired."
        },
        "attribute": "accessible-described-by",
        "reflect": false
      },
      "accessibleDetails": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Aria Details of the component"
        },
        "attribute": "accessible-details",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleLabelledBy": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "String of id's that indicate alternative labels elements"
        },
        "attribute": "accessible-labelled-by",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleDescription": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Aria description the button"
        },
        "attribute": "accessible-description",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "caption": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Additional caption to show inside the label of the choice button."
        },
        "attribute": "caption",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the html input that the Choice component controls."
        },
        "attribute": "value",
        "reflect": true
      },
      "type": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetChoiceType",
          "resolved": "\"checkbox\" | \"radio\"",
          "references": {
            "DuetChoiceType": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Type of the choice button. You can set the type of the choice to be either\n\u201Cradio\u201D or \u201Ccheckbox\u201D. Depending on this selection we convey the selection\ntype to assistive technologies as well. When type \u201Cradio\u201D is chosen it is\nrequired to place the choices inside Choice Group component."
        },
        "attribute": "type",
        "reflect": true,
        "defaultValue": "\"checkbox\""
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name attribute of the html input that the Choice component controls."
        },
        "attribute": "name",
        "reflect": false
      },
      "checked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Checked state of the choice button."
        },
        "attribute": "checked",
        "reflect": true,
        "defaultValue": "false"
      },
      "collapsible": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Makes the choice button open a new section underneath it when clicked or\ntapped. This new section can be used to show more options related to this\nchoice. Please note that this feature can\u2019t be used together with the \"info\"\nfunctionality and that it only accepts plain dom nodes (no shadow dom elements\nsuch as duet-paragraph can be used as this will break accessibility)"
        },
        "attribute": "collapsible",
        "reflect": false,
        "defaultValue": "false"
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon to display to the left of the choice button label."
        },
        "attribute": "icon",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "expand": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Expands the choice button to fill 100% of the container width."
        },
        "attribute": "expand",
        "reflect": false,
        "defaultValue": "false"
      },
      "padding": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetPadding",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetPadding": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the padding of the component."
        },
        "attribute": "padding",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "identifier": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adds a unique identifier for the choice button."
        },
        "attribute": "identifier",
        "reflect": false
      },
      "groupDirection": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetDirection",
          "resolved": "\"horizontal\" | \"vertical\"",
          "references": {
            "DuetDirection": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Determines whether the control is displayed horizontally or vertically within\na group."
            }],
          "text": ""
        },
        "attribute": "group-direction",
        "reflect": false
      },
      "groupDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Determines, whether the control is disabled from the parent group."
            }],
          "text": ""
        },
        "attribute": "group-disabled",
        "reflect": false
      },
      "groupResponsive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Determines whether the group has responsive behavior"
            }],
          "text": ""
        },
        "attribute": "group-responsive",
        "reflect": false
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Makes the choice component disabled. This prevents users from being able to\ninteract with the choice, and conveys its inactive state to assistive technologies."
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set whether the input is required or not. Please note that this is necessary for\naccessible inputs when the user is required to fill them. When using this property\nyou need to also set \u201Cnovalidate\u201D attribute to your form element to prevent\nbrowser from displaying its own validation errors."
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "infoLabelDefaults": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject | string",
          "resolved": "DuetLangObject | string",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{ fi: \"pp.kk.vvvv\", en: \"dd.mm.yyyy\", sv: \"dd.mm.\u00E5\u00E5\u00E5\u00E5\" }"
            }],
          "text": "Placeholder defaults"
        },
        "attribute": "accessible-label-info-default",
        "reflect": false,
        "defaultValue": "{\n    fi: \"Lis\u00E4tietoja vaihtoehdosta\",\n    en: \"More information about\",\n    sv: \"Mera information om\",\n  }"
      },
      "infoLabel": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{\nfi: \"Lis\u00E4tietoja vaihtoehdosta\",\nen: \"More information about\",\nsv: \"Mera information om\",\n}"
            }],
          "text": "Hint text to display before the user types into the date picker input."
        },
        "attribute": "info-label",
        "reflect": false,
        "defaultValue": "getLocaleString(this.infoLabelDefaults, getLanguage())"
      }
    };
  }
  static get states() {
    return {
      "isHovering": {},
      "isInfoOpen": {},
      "isBlurred": {},
      "language": {}
    };
  }
  static get events() {
    return [{
        "method": "duetChange",
        "name": "duetChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the checked property has changed."
        },
        "complexType": {
          "original": "DuetChoiceEvent",
          "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-choice\"; }",
          "references": {
            "DuetChoiceEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-choice/duet-choice.tsx"
            }
          }
        }
      }, {
        "method": "duetFocus",
        "name": "duetFocus",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the checkbox has focus."
        },
        "complexType": {
          "original": "DuetChoiceEvent",
          "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-choice\"; }",
          "references": {
            "DuetChoiceEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-choice/duet-choice.tsx"
            }
          }
        }
      }, {
        "method": "duetBlur",
        "name": "duetBlur",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the checkbox loses focus."
        },
        "complexType": {
          "original": "DuetChoiceEvent",
          "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-choice\"; }",
          "references": {
            "DuetChoiceEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-choice/duet-choice.tsx"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus on the specified `duet-choice`. Use this method instead of the global\n`input.focus()`.",
          "tags": []
        }
      },
      "toggleInfoMethod": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "This method toggles the info section.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "language",
        "methodName": "watchLanguageStateHandler"
      }];
  }
  static get listeners() {
    return [{
        "name": "blur",
        "method": "handleHostBlur",
        "target": undefined,
        "capture": true,
        "passive": false
      }, {
        "name": "keydown",
        "method": "handleHostKeyDown",
        "target": undefined,
        "capture": true,
        "passive": false
      }, {
        "name": "keyup",
        "method": "handleHostKeyUp",
        "target": undefined,
        "capture": true,
        "passive": false
      }];
  }
}
