/*!
 * Built with Duet Design System
 */
import { media_query_large, media_query_xx_large } from "@duetds/tokens/lib/tokens.json";
import { Build, h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
/**
 * @slot center - Slot for content in center.
 * @slot right - Slot for content in right side.
 */
export class DuetMenuBar {
  constructor() {
    /**
     * Own Properties.
     */
    this.mql = [
      window.matchMedia(media_query_large.replace(/'/g, "")),
      window.matchMedia(media_query_xx_large.replace(/'/g, "")),
    ];
    this.boundMqlFunctions = [];
    this.scrollbarCheck = () => {
      this.leftMoreVisible = this.container.scrollLeft > 0;
      this.rightMoreVisible = this.container.scrollLeft !== this.container.scrollWidth - this.container.clientWidth;
    };
    this.scrollToActive = () => {
      const actives = this.element.querySelectorAll("[active]");
      let active;
      actives.forEach(a => {
        if (a.active) {
          active = a;
        }
      });
      if (active && active.offsetLeft) {
        if (active.offsetLeft > 50) {
          this.container.scrollLeft = active.offsetLeft - this.element.offsetWidth / 2 + active.offsetWidth / 2;
        }
      }
    };
    this.changeLogoSize = () => {
      if (this.mql[1].matches) {
        this.logoSize = "large";
      }
      else {
        this.logoSize = "medium";
      }
    };
    this.handleLogoClick = (e) => {
      this.duetEvent.emit({
        name: "logoClick",
        component: "duet-menu-bar",
        data: {
          logoHref: this.logoHref,
        },
        originalEvent: e,
      });
    };
    this.logoSize = "large";
    this.leftMoreVisible = false;
    this.rightMoreVisible = false;
    this.theme = "";
    this.logo = true;
    this.logoHref = undefined;
    this.logoLinkAccessibleLabel = undefined;
    this.accessibleLabel = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    const children = Array.from(this.element.children);
    for (const child of children) {
      if (child.getAttribute("slot") === "center") {
        for (const slotChild of Array.from(child.children)) {
          slotChild.setAttribute("role", "listitem");
        }
      }
      else if (child.getAttribute("slot") === "right") {
        for (const slotChild of Array.from(child.children)) {
          slotChild.setAttribute("role", "listitem");
        }
      }
    }
  }
  connectedCallback() {
    this.changeLogoSize();
    for (let i = 0; i < this.mql.length; i++) {
      // addEventListener is not available in Stencil hydrate
      if (this.mql[i].addEventListener) {
        const bound = this.changeLogoSize.bind(this);
        this.mql[i].addEventListener("change", bound);
        this.boundMqlFunctions[i] = bound;
      }
    }
  }
  disconnectedCallback() {
    for (let i = 0; i < this.mql.length; i++) {
      // removeEventListener is not available in Stencil hydrate
      if (this.mql[i].removeEventListener) {
        this.mql[i].removeEventListener("change", this.boundMqlFunctions[i]);
      }
    }
    this.boundMqlFunctions = [];
  }
  componentDidLoad() {
    if (Build.isServer || Build.isTesting) {
      return;
    }
    setTimeout(() => {
      this.scrollbarCheck();
      this.scrollToActive();
    }, 0);
  }
  onWindowResize() {
    clearTimeout(this.resizeTimer);
    this.resizeTimer = setTimeout(() => {
      this.scrollToActive();
    }, 100);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const slideoutAvailable = document.querySelectorAll("duet-slideout").length > 0;
    const isUsedAsAdditionalHorizontalNav = slideoutAvailable && !this.logo;
    return (h(Host, null, h("nav", { class: {
        "duet-menu-bar": true,
        "duet-theme-turva": this.theme === "turva",
        "horizontal-nav": isUsedAsAdditionalHorizontalNav,
      }, "aria-label": this.accessibleLabel }, h("div", { class: "top" }), h("div", { class: { container: true }, ref: el => (this.container = el), onScroll: () => this.scrollbarCheck() }, this.logo && (h("div", null, h("duet-logo", { size: this.logoSize, margin: "none", theme: this.theme, href: this.logoHref, accessibleLabel: this.logoLinkAccessibleLabel, onClick: this.handleLogoClick }))), h("div", { class: "list center", role: "list" }, h("div", { class: "more-left", hidden: !this.leftMoreVisible, role: "presentation" }), h("slot", { name: "center" }), h("div", { class: "more-right", hidden: !this.rightMoreVisible, role: "presentation" })), h("div", { class: "list right", role: "list" }, h("slot", { name: "right" }))), h("div", { class: "bottom" }))));
  }
  static get is() { return "duet-menu-bar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-menu-bar.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-menu-bar.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "logo": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Logo."
        },
        "attribute": "logo",
        "reflect": false,
        "defaultValue": "true"
      },
      "logoHref": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Logo href."
        },
        "attribute": "logo-href",
        "reflect": false
      },
      "logoLinkAccessibleLabel": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Logo link accessible label."
        },
        "attribute": "logo-link-accessible-label",
        "reflect": false
      },
      "accessibleLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adds accessible label for the button that is only shown for screen readers.\nTypically, this label text replaces the visible text on the button for\nusers who use assistive technology."
        },
        "attribute": "accessible-label",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "logoSize": {},
      "leftMoreVisible": {},
      "rightMoreVisible": {}
    };
  }
  static get events() {
    return [{
        "method": "duetEvent",
        "name": "duetEvent",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "General event stream for the following events:\nlogoClick\nYou can prevent\nthe default browser functionality by calling **event.detail.originalEvent.preventDefault()**\ninside your listener. Additionally, the passed data is available via\n**event.detail.data**."
        },
        "complexType": {
          "original": "DuetMenuBarChangeEvent",
          "resolved": "{ originalEvent: Event; name: \"logoClick\"; data: { logoHref: string; }; component: \"duet-menu-bar\"; }",
          "references": {
            "DuetMenuBarChangeEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-menu-bar/duet-menu-bar.tsx"
            }
          }
        }
      }];
  }
  static get elementRef() { return "element"; }
  static get listeners() {
    return [{
        "name": "resize",
        "method": "onWindowResize",
        "target": "window",
        "capture": false,
        "passive": true
      }];
  }
}
