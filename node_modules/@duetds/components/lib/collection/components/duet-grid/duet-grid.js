/*!
 * Built with Duet Design System
 */
import { media_query_large, media_query_medium, media_query_small } from "@duetds/tokens/lib/tokens.json";
import { h, Host } from "@stencil/core";
import { watchForElement, watchForOptions } from "../../utils/watch-options";
function isGridItem(element) {
  return element.tagName.toLowerCase() === "duet-grid-item";
}
export class DuetGrid {
  constructor() {
    this.mql = [
      window.matchMedia(media_query_large.replace(/'/g, "")),
      window.matchMedia(media_query_medium.replace(/'/g, "")),
      window.matchMedia(media_query_small.replace(/'/g, "")),
    ];
    this.distributeFormElement = false;
    this.responsive = false;
    this.breakpoint = "small";
    this.direction = "horizontal";
    this.rowReverse = false;
    this.alignment = "top";
    this.distribution = "default";
    this.mobile = "";
  }
  /**
   * Private functions
   */
  /**
   * Returns the element height including margins
   * @param element - element
   * @returns {number}
   */
  outerHeight(element) {
    const height = element.offsetHeight, style = window.getComputedStyle(element);
    return ["top", "bottom"]
      .map(side => parseInt(style[`margin-${side}`]))
      .reduce((total, side) => total + side, height);
  }
  /**
   * Component lifecycle events.
   */
  async connectedCallback() {
    const el = this.element;
    this.distributeFormElement = this.alignment === "form_distribute";
    this.mutationO = watchForOptions(el, "duet-grid-item", () => {
      this.updateGridItems();
    });
    // the next two functions are used to watch for changes in the grid items, and are process intensive - so only run when needed
    if (this.distributeFormElement) {
      this.mutation1 = watchForElement(el, "duet-input", () => {
        this.updateGridItemsWithInputFields();
      });
      // listen for potential mediaquery changes and reset layout
      for (let i = 0; i < this.mql.length; i++) {
        // addEventListener is not available in Stencil hydrate
        if (this.mql[i].addEventListener) {
          this.mql[i].addEventListener("change", this.updateGridItemsWithInputFields.bind(this));
        }
      }
    }
    this.updateGridItems();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
    if (this.mutation1) {
      this.mutation1.disconnect();
      this.mutation1 = undefined;
    }
    // listen for potential mediaquery changes and reset layout
    for (let i = 0; i < this.mql.length; i++) {
      // addEventListener is not available in Stencil hydrate
      if (this.mql[i].removeEventListener) {
        this.mql[i].removeEventListener("change", this.updateGridItemsWithInputFields.bind(this));
      }
    }
  }
  /**
   * Local methods
   */
  async updateGridItems() {
    const items = Array.from(this.element.children).filter(isGridItem);
    items.forEach(item => {
      item.responsive = this.responsive;
      item.breakpoint = this.breakpoint;
      item.direction = this.direction;
    });
  }
  async updateGridItemsWithInputFields() {
    const items = Array.from(this.element.children).filter(isGridItem);
    // if layout changes to columns instead of row, remove all padding
    const hasColumnLayout = window ? window.getComputedStyle(this.element).flexDirection === "column" : false;
    let maxHeight = 0;
    const sizes = [];
    items.forEach(item => {
      const inputErrorDom = item.querySelector("span.duet-input-error");
      const height = inputErrorDom ? this.outerHeight(inputErrorDom) : 0;
      sizes.push(height);
    });
    maxHeight = Math.max(...sizes);
    items.forEach(item => {
      const inputErrorDom = item.querySelector("span.duet-input-error");
      const height = inputErrorDom ? this.outerHeight(inputErrorDom) : 0;
      if (height < maxHeight && !hasColumnLayout) {
        item.setAttribute("style", `padding-bottom: ${maxHeight - height}px;`);
      }
      else if (height === maxHeight || hasColumnLayout) {
        item.setAttribute("style", `padding-bottom: 0px;`);
      }
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { class: {
        "duet-grid": true,
        "duet-no-stacking": !this.responsive,
        "duet-grid-align-top": this.alignment === "top",
        "duet-grid-align-bottom": this.alignment === "bottom" || this.alignment === "form_distribute",
        "duet-grid-align-center": this.alignment === "center",
        "duet-grid-align-stretch": this.alignment === "stretch",
        "duet-grid-align-baseline": this.alignment === "baseline",
        "duet-grid-distribution-left": this.distribution === "left",
        "duet-grid-distribution-right": this.distribution === "right",
        "duet-grid-distribution-center": this.distribution === "center",
        "duet-grid-distribution-between": this.distribution === "space-between",
        "duet-grid-distribution-around": this.distribution === "space-around",
        "duet-grid-distribution-evenly": this.distribution === "space-evenly",
        "duet-grid-mobile-left": this.mobile === "left",
        "duet-grid-mobile-center": this.mobile === "center",
        "duet-grid-mobile-right": this.mobile === "right",
        "duet-grid-direction-horizontal": this.direction === "horizontal",
        "duet-grid-direction-vertical": this.direction === "vertical",
        "duet-grid-breakpoint-x-small": this.breakpoint === "x-small",
        "duet-grid-breakpoint-small": this.breakpoint === "small",
        "duet-grid-breakpoint-medium": this.breakpoint === "medium",
        "duet-grid-breakpoint-large": this.breakpoint === "large",
        "duet-grid-breakpoint-x-large": this.breakpoint === "x-large",
        "duet-grid-row-reverse": this.rowReverse,
      } }));
  }
  static get is() { return "duet-grid"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-grid.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-grid.css"]
    };
  }
  static get properties() {
    return {
      "responsive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enable or disable the automatic responsive behaviour of the grid component.\nSetting this option to \"true\" makes sure that contents are stacked vertically\non mobile (575px and under)."
        },
        "attribute": "responsive",
        "reflect": false,
        "defaultValue": "false"
      },
      "breakpoint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetGridBreakpoint",
          "resolved": "\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\"",
          "references": {
            "DuetGridBreakpoint": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Switch the breakpoint used to trigger the content stacking. These match to\nsimilar media query tokens: $media-query-small and $media-query-medium."
        },
        "attribute": "breakpoint",
        "reflect": false,
        "defaultValue": "\"small\""
      },
      "direction": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetDirection",
          "resolved": "\"horizontal\" | \"vertical\"",
          "references": {
            "DuetDirection": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Direction of the grid items."
        },
        "attribute": "direction",
        "reflect": false,
        "defaultValue": "\"horizontal\""
      },
      "rowReverse": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Reverse the order of the grid items when horizontal. Usefull when we want the primary item\nto be on bottom right on desktop, but on top on mobile and the first for screen readers."
        },
        "attribute": "row-reverse",
        "reflect": false,
        "defaultValue": "false"
      },
      "alignment": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetGridAlignment",
          "resolved": "\"baseline\" | \"bottom\" | \"center\" | \"form_distribute\" | \"stretch\" | \"top\"",
          "references": {
            "DuetGridAlignment": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-grid/duet-grid.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjusts the vertical alignment of the grid items, if set to \"form_distribute\"\nthe grid will try to calculate correct paddings for any duet-input fields inside duet-grid-items,\nso that they align even when displaying errors."
        },
        "attribute": "alignment",
        "reflect": false,
        "defaultValue": "\"top\""
      },
      "distribution": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetGridDistribution",
          "resolved": "\"center\" | \"default\" | \"left\" | \"right\" | \"space-around\" | \"space-between\" | \"space-evenly\"",
          "references": {
            "DuetGridDistribution": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-grid/duet-grid.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjusts the horizontal distribution of the grid items."
        },
        "attribute": "distribution",
        "reflect": false,
        "defaultValue": "\"default\""
      },
      "mobile": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetGridMobileAlignment",
          "resolved": "\"\" | \"auto\" | \"center\" | \"left\" | \"right\"",
          "references": {
            "DuetGridMobileAlignment": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-grid/duet-grid.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjusts the horizontal alignment of the grid items on mobile (575px and under)."
        },
        "attribute": "mobile",
        "reflect": false,
        "defaultValue": "\"\""
      }
    };
  }
  static get states() {
    return {
      "distributeFormElement": {}
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "responsive",
        "methodName": "updateGridItems"
      }, {
        "propName": "breakpoint",
        "methodName": "updateGridItems"
      }, {
        "propName": "direction",
        "methodName": "updateGridItems"
      }];
  }
}
