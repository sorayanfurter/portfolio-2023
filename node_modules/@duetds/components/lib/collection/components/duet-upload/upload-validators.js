/*!
 * Built with Duet Design System
 */
import { getLocaleString } from "../../utils/language-utils";
import { getError } from "./errorcodes.utils";
export const validateFileExtension = (name, allowedExtensions) => {
  if (!allowedExtensions) {
    return true;
  }
  const ext = name.split(".");
  const validExtension = allowedExtensions.split(",");
  const extension = ext[ext.length - 1];
  return validExtension.includes(extension);
};
export const validateFileMime = (type, allowedMimetypes) => {
  if (!allowedMimetypes || !type) {
    return true;
  }
  const validMimeTypes = allowedMimetypes.split(",");
  let valid = false;
  validMimeTypes.forEach(mimeType => {
    const allowedTypes = mimeType.split("/");
    const fileType = type.split("/");
    if (allowedTypes[0] === fileType[0] && (allowedTypes[1] === fileType[1] || allowedTypes[1] === "*")) {
      valid = true;
    }
  });
  return valid;
};
export const validateFileSize = (size, maxBytes) => {
  if (!maxBytes || !size) {
    return true;
  }
  return maxBytes >= size;
};
export const validateFile = (item, validators, errorCodes) => {
  const { allowedMimetypes, allowedExtensions, maxBytes } = validators;
  let valid = false;
  let errorMessage = getError("default", errorCodes);
  if (item) {
    const { name, type, size } = item;
    const mime = validateFileMime(type, allowedMimetypes);
    const ext = allowedExtensions === "all" ||
      allowedExtensions === "" ||
      allowedExtensions === " " ||
      allowedExtensions === undefined
      ? true
      : validateFileExtension(name.toLowerCase(), allowedExtensions);
    const bytes = validateFileSize(size, maxBytes);
    if (!mime) {
      errorMessage = getError("duet-upload-101", errorCodes);
    }
    if (!ext) {
      errorMessage = getError("duet-upload-100", errorCodes);
    }
    if (!bytes) {
      errorMessage = getError("duet-upload-201", errorCodes);
    }
    valid = mime && ext && bytes;
  }
  else {
    valid = false;
  }
  return {
    valid,
    errorMessage: valid ? undefined : getLocaleString(errorMessage.message),
    errorSystem: valid ? undefined : errorMessage.system_message,
    errorType: valid ? undefined : errorMessage.type,
  };
};
export const validateTotalSizeIsAboveMax = (filelist, maxTotalBytes) => {
  let total = 0;
  if (maxTotalBytes) {
    filelist.forEach(item => {
      if (item.valid && item.size) {
        total += item.size;
      }
    });
    if (total >= maxTotalBytes) {
      return true;
    }
  }
  return false;
};
export const validateTotalAmountIsAboveMax = (filelist, maxFiles) => {
  let total = 0;
  if (maxFiles) {
    filelist.forEach(item => {
      if (item.valid) {
        total++;
      }
    });
    if (total >= maxFiles) {
      return true;
    }
  }
  return false;
};
export const filesToUploadCountAboveMax = (currentFilesCount, filesToUploadCount, maxFiles) => {
  if (currentFilesCount + filesToUploadCount > maxFiles) {
    return true;
  }
  return false;
};
