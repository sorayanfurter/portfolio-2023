/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { createID } from "../../utils/create-id";
export class DuetRadio {
  constructor() {
    /**
     * Own Properties.
     */
    this.radioId = createID("DuetRadio");
    /**
     * Component event handling.
     */
    this.onClick = (ev) => {
      ev.stopPropagation();
    };
    this.onChange = (ev) => {
      this.checked = ev.target.value;
      if (this.checked && !this.blockEvents) {
        this.duetChange.emit({
          originalEvent: ev,
          checked: this.checked,
          value: this.value,
          component: "duet-radio",
        });
      }
    };
    this.onBlur = (ev) => {
      this.duetBlur.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-radio",
      });
    };
    this.onFocus = (ev) => {
      this.duetFocus.emit({
        originalEvent: ev,
        checked: this.checked,
        value: this.value,
        component: "duet-radio",
      });
    };
    this.accessibleActiveDescendant = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleIndex = undefined;
    this.margin = "auto";
    this.accessibleControls = undefined;
    this.accessibleOwns = undefined;
    this.accessibleDescribedBy = undefined;
    this.theme = "";
    this.disabled = false;
    this.required = false;
    this.blockEvents = false;
    this.identifier = undefined;
    this.label = "label";
    this.name = undefined;
    this.role = undefined;
    this.groupDisabled = undefined;
    this.groupDirection = undefined;
    this.groupResponsive = undefined;
    this.checked = undefined;
    this.value = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    if (this.value === undefined) {
      this.value = this.identifier;
    }
  }
  /**
   * Sets focus on the specified `duet-radio`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus(options) {
    this.nativeInput.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const identifier = this.identifier || this.radioId;
    return (h(Host, { onClick: this.onClick, class: {
        horizontal: this.groupDirection === "horizontal" && !this.groupResponsive,
        "horizontal-responsive": this.groupDirection === "horizontal" && this.groupResponsive,
        "duet-m-0": this.margin === "none",
      } }, h("div", { class: { "duet-radio-container": true, "duet-theme-turva": this.theme === "turva" } }, h("input", { type: "radio", onFocus: this.onFocus, onBlur: this.onBlur, onChange: this.onChange, value: this.value, tabindex: this.accessibleIndex, class: { "duet-radio": true, disabled: this.disabled || this.groupDisabled }, checked: this.checked, disabled: this.disabled || this.groupDisabled, required: this.required, "aria-controls": this.accessibleControls, "aria-activedescendant": this.accessibleActiveDescendant, "aria-owns": this.accessibleOwns, "aria-describedby": this.accessibleDescribedBy, "aria-labelledby": this.accessibleLabelledBy, "aria-details": this.accessibleDetails, "aria-description": this.accessibleDescription, role: this.role, name: this.name, id: identifier, ref: input => (this.nativeInput = input) }), h("label", { class: "duet-label", htmlFor: identifier }, h("span", null, this.label)))));
  }
  static get is() { return "duet-radio"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-radio.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-radio.css"]
    };
  }
  static get properties() {
    return {
      "accessibleActiveDescendant": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a related component\u2019s visually focused element."
        },
        "attribute": "accessible-active-descendant",
        "reflect": false
      },
      "accessibleDetails": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Aria Details of the component"
        },
        "attribute": "accessible-details",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleLabelledBy": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "String of id's that indicate alternative labels elements"
        },
        "attribute": "accessible-labelled-by",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleDescription": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Aria description the button"
        },
        "attribute": "accessible-description",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleIndex": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Control the tabindex of checkbox. In most cases this should never be used!\nIt exists only for Duet\u2019s internal needs."
        },
        "attribute": "accessible-index",
        "reflect": false
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "accessibleControls": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Use this prop to add an aria-controls attribute. Use the attribute to\nindicate the id of a component controlled by this component."
        },
        "attribute": "accessible-controls",
        "reflect": false
      },
      "accessibleOwns": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a component owned by the radio."
        },
        "attribute": "accessible-owns",
        "reflect": false
      },
      "accessibleDescribedBy": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a component that describes the radio."
        },
        "attribute": "accessible-described-by",
        "reflect": false
      },
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the radio."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Makes the radio component disabled. This prevents users from being able to\ninteract with the radio, and conveys its inactive state to assistive technologies."
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set whether the input is required or not. Please note that this is required for\naccessible inputs when the user is required to fill them. When using this property\nyou need to also set \u201Cnovalidate\u201D attribute to your form element to prevent\nbrowser from displaying its own validation errors."
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "blockEvents": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Stops the components from emitting events"
        },
        "attribute": "block-events",
        "reflect": false,
        "defaultValue": "false"
      },
      "identifier": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adds a unique identifier for the radio."
        },
        "attribute": "identifier",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Label for the radio."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "\"label\""
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name of the radio."
        },
        "attribute": "name",
        "reflect": false
      },
      "role": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Defines a specific role attribute for the input."
        },
        "attribute": "role",
        "reflect": false
      },
      "groupDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Determines, whether the control is disabled from the parent group."
            }],
          "text": ""
        },
        "attribute": "group-disabled",
        "reflect": false
      },
      "groupDirection": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetDirection",
          "resolved": "\"horizontal\" | \"vertical\"",
          "references": {
            "DuetDirection": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Determines, whether the control is displayed horizontally or vertically within a group."
            }],
          "text": ""
        },
        "attribute": "group-direction",
        "reflect": false
      },
      "groupResponsive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Determines, whether the control is displayed responsively within a group."
            }],
          "text": ""
        },
        "attribute": "group-responsive",
        "reflect": false
      },
      "checked": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Check state of the radio."
        },
        "attribute": "checked",
        "reflect": true
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the radio input does not mean if it's checked or not, use the checked\nproperty for that."
        },
        "attribute": "value",
        "reflect": true
      }
    };
  }
  static get events() {
    return [{
        "method": "duetChange",
        "name": "duetChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the checked property has changed."
        },
        "complexType": {
          "original": "DuetRadioEvent",
          "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-radio\"; }",
          "references": {
            "DuetRadioEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-radio/duet-radio.tsx"
            }
          }
        }
      }, {
        "method": "duetFocus",
        "name": "duetFocus",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the checkbox has focus."
        },
        "complexType": {
          "original": "DuetRadioEvent",
          "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-radio\"; }",
          "references": {
            "DuetRadioEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-radio/duet-radio.tsx"
            }
          }
        }
      }, {
        "method": "duetBlur",
        "name": "duetBlur",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the checkbox loses focus."
        },
        "complexType": {
          "original": "DuetRadioEvent",
          "resolved": "{ originalEvent?: Event; checked: boolean; value: string; component: \"duet-radio\"; }",
          "references": {
            "DuetRadioEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-radio/duet-radio.tsx"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus on the specified `duet-radio`. Use this method instead of the global\n`input.focus()`.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
}
