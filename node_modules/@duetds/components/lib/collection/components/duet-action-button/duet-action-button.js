/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { createID } from "../../utils/create-id";
import { debounce } from "../../utils/js-utils";
import { isKeyboardClick } from "../../utils/keyboard-utils";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
import { capitalizeFirstLetter, getColorByName, shadeRGBColor } from "../../utils/token-utils";
/**
 * @slot default - slot inside an invisible element, this can be used to enhance accessibility
 * @part button - this part enables style overrides for the button
 * @part icon - this part enables style overrides for the icon
 */
export class DuetActionButton {
  constructor() {
    this.listId = createID("duet-action-button");
    /**
     * Private methods.
     */
    //helper to emit relevant page events
    this.emitPageEvent = debounce(e => {
      this.duetActionEvent.emit({
        component: "duet-action-button",
        originalEvent: e,
        action: this.actionId,
        name: this.actionName,
        meta: this.actionMeta,
        id: this.listId,
      });
    });
    this.numbersStore = "";
    this.language = getLanguage();
    this.theme = "";
    this.iconName = "action-arrow-left-small";
    this.iconColor = "currentColor";
    this.iconSize = "xx-small";
    this.actionName = "default-action";
    this.actionId = undefined;
    this.actionMeta = undefined;
    this.disabled = false;
    this.color = "";
    this.background = "";
    this.accessibleTitle = true;
    this.accessibleDescribedBy = undefined;
    this.accessibleDetails = undefined;
    this.accessibleLabelledBy = undefined;
    this.accessibleDescription = undefined;
    this.accessibleLabelsDefaults = {
      en: "Click to activate action",
      fi: "Klikkaa aktivoidaksesi toiminto",
      sv: "Klicka för att aktivera åtgärd",
    };
    this.accessibleLabel = getLocaleString(this.accessibleLabelsDefaults);
    this.accessibleControls = "";
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabel === this.accessibleLabelsDefaults[oldValue]) {
      this.accessibleLabel = getLocaleString(this.accessibleLabelsDefaults, newValue);
    }
  }
  //handle a11y keyboard navigation events
  async onKeyboardDown(e) {
    if (isKeyboardClick(e)) {
      this.emitPageEvent(e);
    }
  }
  //return readable title for the action-button
  getTitle() {
    let titleString = "";
    if (typeof this.accessibleTitle === "string") {
      titleString = this.accessibleTitle;
    }
    if (this.accessibleTitle === true) {
      titleString = capitalizeFirstLetter(`${this.actionName}`);
    }
    return titleString;
  }
  //set update current when mouse click on page number
  async onMouseHandler(e) {
    e.preventDefault();
    this.duetActionEvent.emit({
      component: "duet-action-button",
      originalEvent: e,
      action: this.actionName,
      id: this.actionId,
      meta: this.actionMeta,
    });
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Sets focus on the specified `duet-action-button`. Use this method instead of the global
   * `button.focus()`.
   */
  async setFocus(options) {
    if (this.nativeButton) {
      this.nativeButton.focus(options);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const color = this.color === "currentColor" ? "currentColor" : getColorByName(this.color, this.theme);
    const backgroundColor = getColorByName(this.background, this.theme);
    const backgroundHoverColor = backgroundColor ? shadeRGBColor(backgroundColor, -0.1) : backgroundColor;
    const backgroundStyles = backgroundColor
      ? `
          button.duet-action-button {
            background: ${backgroundColor} !important;
          }
          button.duet-action-button:not(:disabled):hover {
            background: ${backgroundHoverColor} !important;
          }
        `
      : "";
    const styles = {
      color,
      "border-color": getColorByName(this.iconColor, this.theme),
      "border-width": "1px",
      "border-style": "solid",
    };
    return (h(Host, { onKeyDown: e => this.onKeyboardDown(e) }, h("style", { innerHTML: backgroundStyles }), h("button", { ref: button => (this.nativeButton = button), part: "button", style: styles, disabled: this.disabled, id: this.listId, class: {
        "duet-action-button": true,
        "duet-action-button--disabled": this.disabled,
        [`duet-action-button--${this.theme}`]: this.theme !== "",
      }, type: "button", onClick: e => this.onMouseHandler(e), "aria-label": this.accessibleLabel, "aria-labelledby": this.accessibleLabelledBy, "aria-description": this.accessibleDescription, "aria-describedby": this.accessibleDescribedBy, "aria-details": this.accessibleDetails, "aria-controls": this.accessibleControls, title: this.getTitle() }, h("duet-icon", { part: "icon", name: this.iconName, color: this.iconColor, margin: "none", size: this.iconSize }), h("duet-visually-hidden", null, h("slot", null)))));
  }
  static get is() { return "duet-action-button"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-action-button.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-action-button.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the pagination."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "iconName": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name of the icon to display"
        },
        "attribute": "icon-name",
        "reflect": false,
        "defaultValue": "\"action-arrow-left-small\""
      },
      "iconColor": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Color of the icon to display"
        },
        "attribute": "icon-color",
        "reflect": false,
        "defaultValue": "\"currentColor\""
      },
      "iconSize": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetActionButtonIconSize",
          "resolved": "\"small\" | \"x-small\" | \"xx-small\"",
          "references": {
            "DuetActionButtonIconSize": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-action-button/duet-action-button.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Size of the icon"
        },
        "attribute": "icon-size",
        "reflect": false,
        "defaultValue": "\"xx-small\""
      },
      "actionName": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name of action being called"
        },
        "attribute": "action-name",
        "reflect": false,
        "defaultValue": "\"default-action\""
      },
      "actionId": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name of id of action that was called being called"
        },
        "attribute": "action-id",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "actionMeta": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "Record<any, any> | string",
          "resolved": "string | { [x: string]: any; }",
          "references": {
            "Record": {
              "location": "global"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name of id of action that was called being called"
        },
        "attribute": "action-meta",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Disables the button"
        },
        "attribute": "disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetColor",
          "resolved": "string",
          "references": {
            "DuetColor": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Custom color to be used for the icon, as a design token entered in camelCase\nor kebab-case. Example: \"color-primary\". This property can also be set to\n\"currentColor\" which forces the icon to use the CSS text color of parent\nelement instead. Useful when you want to control the color in stylesheet\ninstead."
        },
        "attribute": "color",
        "reflect": true,
        "defaultValue": "\"\""
      },
      "background": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetColor",
          "resolved": "string",
          "references": {
            "DuetColor": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Custom color to be used for a background, as a design token entered\nin camelCase or kebab-case. Using this option the icon will always be resized\nto $size-icon-medium on mobile viewports. Example: \"color-primary\"."
        },
        "attribute": "background",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "accessibleTitle": {
        "type": "any",
        "mutable": false,
        "complexType": {
          "original": "string | boolean",
          "resolved": "boolean | string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Title of the action button (shows as DOM tooltip when hovering)\nif set to true, this will try to add a best-guess title based on action-name\nif set to a string the string is used\nif set to false nothing is set"
        },
        "attribute": "title",
        "reflect": false,
        "defaultValue": "true"
      },
      "accessibleDescribedBy": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Described By id"
        },
        "attribute": "accessible-described-by",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleDetails": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Details of the component"
        },
        "attribute": "accessible-details",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleLabelledBy": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "String of id's that indicate alternative labels elements"
        },
        "attribute": "accessible-labelled-by",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleDescription": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Aria description the button"
        },
        "attribute": "accessible-description",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "accessibleLabelsDefaults": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject",
          "resolved": "DuetLangObject",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Default accessible label"
        },
        "defaultValue": "{\n    en: \"Click to activate action\",\n    fi: \"Klikkaa aktivoidaksesi toiminto\",\n    sv: \"Klicka f\u00F6r att aktivera \u00E5tg\u00E4rd\",\n  }"
      },
      "accessibleLabel": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Accessible label"
        },
        "attribute": "accessible-label",
        "reflect": false,
        "defaultValue": "getLocaleString(\n    this.accessibleLabelsDefaults\n  )"
      },
      "accessibleControls": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Used to indicate which dom element with ID this element controls"
        },
        "attribute": "accessible-controls",
        "reflect": false,
        "defaultValue": "\"\""
      }
    };
  }
  static get states() {
    return {
      "numbersStore": {},
      "language": {}
    };
  }
  static get events() {
    return [{
        "method": "duetActionEvent",
        "name": "duetActionEvent",
        "bubbles": true,
        "cancelable": false,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when an action has been invoked"
        },
        "complexType": {
          "original": "DuetActionButtonEvent",
          "resolved": "{ originalEvent?: Event; component: \"duet-action-button\"; action: string; name?: string; id?: string; index?: string; meta?: string | Record<any, any>; }",
          "references": {
            "DuetActionButtonEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-action-button/duet-action-button.tsx"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus on the specified `duet-action-button`. Use this method instead of the global\n`button.focus()`.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "language",
        "methodName": "watchLanguageStateHandler"
      }];
  }
}
