/*!
 * Built with Duet Design System
 */
import { Build, h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { getColorByName, rgbaColorFromRgb } from "../../utils/token-utils";
import { buildIconUrl, fetchIconByUrl } from "./icon-utils";
export class DuetIcon {
  constructor() {
    this.svgContent = undefined;
    this.theme = "";
    this.icon = undefined;
    this.src = undefined;
    this.name = "action-add";
    this.margin = "auto";
    this.responsive = true;
    this.color = "";
    this.background = "";
    this.backgroundOpacity = 1;
    this.backgroundRotation = 0;
    this.size = "medium";
    this.outline = "";
    this.shape = "circle";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    if (this.src && this.icon) {
      console.warn("[DUET COMPONENTS]: <duet-icon> should have either have src or icon attributes, but not both. icon attribute will take precedence", "icon:", this.icon, "src:", this.src);
    }
    this.loadIcon();
  }
  async loadIcon() {
    // static icon known at build-time, so we can set it synchronously
    if (this.icon) {
      this.svgContent = this.icon;
      return;
    }
    // on server, don't make requests
    if (!Build.isBrowser) {
      return;
    }
    // dynamically load icon from url
    const src = this.src ? this.src : buildIconUrl(this.name);
    try {
      this.svgContent = await fetchIconByUrl(src);
    }
    catch (e) {
      console.warn(`[DUET COMPONENTS]: <duet-icon> could not load SVG from URL: ${src}.`, e);
    }
  }
  /**
   * render() function.
   * Always the last one in the class.
   */
  render() {
    const color = this.color === "currentColor"
      ? "currentColor"
      : getColorByName(this.color, this.theme) || getColorByName(this.outline, this.theme);
    const backgroundRotationStyles = this.backgroundRotation
      ? {
        transform: `rotate(${this.backgroundRotation}deg)`,
        "transform-origin": "center center",
      }
      : {};
    const styles = Object.assign({ color, background: rgbaColorFromRgb(getColorByName(this.background, this.theme), this.backgroundOpacity), "border-color": getColorByName(this.outline, this.theme) }, backgroundRotationStyles);
    const iconRotationStyles = this.backgroundRotation
      ? {
        transform: `rotate(-${this.backgroundRotation}deg)`,
        "transform-origin": "center center",
      }
      : {};
    const iconStyles = Object.assign({}, iconRotationStyles);
    const shapeStyle = this.shape === "brand-rotated" ? "duet-icon-shape-brand" : `duet-icon-shape-${this.shape}`;
    return (h(Host, { class: {
        "duet-m-0": this.margin === "none",
        "duet-icon-has-outline": !!this.outline,
        "duet-icon-has-background": !!this.background,
      } }, h("div", { "aria-hidden": "true", style: styles, class: {
        "duet-icon": true,
        [this.size]: true,
        "duet-theme-turva": this.theme === "turva",
        "duet-theme-default": this.theme === "default",
        "duet-icon-has-outline": !!this.outline,
        "duet-icon-has-background": !!this.background,
        [shapeStyle]: true,
        rotated: this.shape === "brand-rotated" && this.theme !== "turva",
        "duet-icon-not-responsive": !this.responsive,
      } }, h("span", { "aria-hidden": "true", class: { "duet-icon-svg": true, rotated: this.shape === "brand-rotated" && this.theme !== "turva" }, innerHTML: this.svgContent, style: iconStyles }))));
  }
  static get is() { return "duet-icon"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-icon.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-icon.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the icon. This setting will be overridden when you set the color\nproperty"
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "A raw SVG string."
        },
        "attribute": "icon",
        "reflect": false
      },
      "src": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "A URL from which to load an icon."
        },
        "attribute": "src",
        "reflect": false
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetIconName",
          "resolved": "string",
          "references": {
            "DuetIconName": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon name from Duet to display."
        },
        "attribute": "name",
        "reflect": false,
        "defaultValue": "\"action-add\""
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "responsive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether the icon changes its size responsively or not."
        },
        "attribute": "responsive",
        "reflect": false,
        "defaultValue": "true"
      },
      "color": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetColor",
          "resolved": "string",
          "references": {
            "DuetColor": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Custom color to be used for the icon, as a design token entered in camelCase\nor kebab-case. Example: \"color-primary\". This property can also be set to\n\"currentColor\" which forces the icon to use the CSS text color of parent\nelement instead. Useful when you want to control the color in stylesheet\ninstead."
        },
        "attribute": "color",
        "reflect": true,
        "defaultValue": "\"\""
      },
      "background": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetColor",
          "resolved": "string",
          "references": {
            "DuetColor": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Custom color to be used for a circular background, as a design token entered\nin camelCase or kebab-case. Using this option the icon will always be resized\nto $size-icon-medium on mobile viewports. Example: \"color-primary\"."
        },
        "attribute": "background",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "backgroundOpacity": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Opacity of the background. Possible value in between 0-1. For example 0.75."
            }],
          "text": ""
        },
        "attribute": "background-opacity",
        "reflect": false,
        "defaultValue": "1"
      },
      "backgroundRotation": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Rotation of the background. Possible value in between 0-360. For example 30."
            }],
          "text": ""
        },
        "attribute": "background-rotation",
        "reflect": false,
        "defaultValue": "0"
      },
      "size": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetIconSize",
          "resolved": "\"auto\" | \"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\" | \"xxx-small\"",
          "references": {
            "DuetIconSize": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-icon/duet-icon.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon size. Entered as one of the icon size design tokens."
        },
        "attribute": "size",
        "reflect": false,
        "defaultValue": "\"medium\""
      },
      "outline": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetColor",
          "resolved": "string",
          "references": {
            "DuetColor": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Custom color to be used for a circular border and icon outline, as a design\ntoken entered in camelCase or kebab-case. Using this option the icon will\nalways be resized to $size-icon-medium on mobile viewports.\nExample: \"color-primary\"."
        },
        "attribute": "outline",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "shape": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"circle\" | \"brand\" | \"brand-rotated\"",
          "resolved": "\"brand\" | \"brand-rotated\" | \"circle\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Shape of the background. Brand follows new designs and currently doesn't support xxx-small size."
        },
        "attribute": "shape",
        "reflect": false,
        "defaultValue": "\"circle\""
      }
    };
  }
  static get states() {
    return {
      "svgContent": {}
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "src",
        "methodName": "loadIcon"
      }, {
        "propName": "icon",
        "methodName": "loadIcon"
      }, {
        "propName": "name",
        "methodName": "loadIcon"
      }];
  }
}
