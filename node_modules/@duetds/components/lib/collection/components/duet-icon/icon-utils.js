/*!
 * Built with Duet Design System
 */
import { Build, Env } from "@stencil/core";
const cleanupSvg = (svgContent) => {
  if (typeof document === "undefined" || !svgContent) {
    return;
  }
  const div = document.createElement("div");
  div.innerHTML = svgContent;
  // setup this way to ensure it works on our buddy IE
  for (let i = div.childNodes.length - 1; i >= 0; i--) {
    const child = div.childNodes[i];
    if (child.nodeName.toLowerCase() !== "svg") {
      div.removeChild(div.childNodes[i]);
    }
  }
  return div.firstElementChild;
};
const isValid = (elm) => {
  if (elm.nodeName.toLowerCase() === "script") {
    return false;
  }
  for (let i = 0; i < elm.attributes.length; i++) {
    const attribute = elm.attributes[i];
    if (attribute.name.toLowerCase().indexOf("on") === 0) {
      return false;
    }
  }
  if (elm.children) {
    for (let i = 0; i < elm.children.length; i++) {
      if (!isValid(elm.children[i])) {
        return false;
      }
    }
  }
  return true;
};
export const buildIconUrl = (iconName) => {
  // under normal operations the Icons should always be loaded from the CDN
  if (Build.isDev || Build.isTesting) {
    // however for vizdiffing and local development / testing we need to be able to access the raw images
    return `${Env.cdnURILocal}/icons/lib/assets/${iconName}.svg`;
  }
  else {
    return `${Env.cdnURIProd}/icons/${Env.duetIconVersion}/lib/assets/${iconName}.svg`;
  }
};
const iconCache = {};
export function fetchIconByUrl(url) {
  if (iconCache[url]) {
    return iconCache[url];
  }
  // we create a function that covers all the fetching, cleanup, validation etc,
  // this way we can perform that work just once, and then return the same promise in future.
  async function doFetch() {
    const res = await fetch(url);
    if (!res.ok) {
      throw new Error(`SVG request failed: ${res.status} ${res.statusText}`);
    }
    const responseText = await res.text();
    const svgElement = cleanupSvg(responseText);
    if (!isValid(svgElement)) {
      throw new Error("SVG validation failed");
    }
    // OuterHTML does not unfortunately work here with IE11
    // was previously: resolve(svgElement.outerHTML)
    const div = document.createElement("div");
    div.appendChild(svgElement);
    return div.innerHTML;
  }
  // we do not `await` the fetch, as we only care about initiating the work,
  // it's the responsibility of the calling code to wait for the response.
  const req = doFetch();
  // cache for the repeat requests
  return (iconCache[url] = req);
}
