/*!
 * Built with Duet Design System
 */
import { h } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
export class DuetNotification {
  constructor() {
    this.language = getLanguage();
    this.accessibleLabelUnreadDefaults = {
      en: "Unread",
      fi: "Lukematon",
      sv: "OlÃ¤st",
    };
    this.accessibleLabelUnread = getLocaleString(this.accessibleLabelUnreadDefaults, this.language);
    this.url = "#";
    this.date = "";
    this.highlight = false;
    this.external = false;
    this.theme = "";
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabelUnread === this.accessibleLabelUnreadDefaults[oldValue]) {
      this.accessibleLabelUnread = getLocaleString(this.accessibleLabelUnreadDefaults, newValue);
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Move focus to the notification's link element.
   * Use this method instead of the native `focus()` method.
   * @param options
   */
  async setFocus(options) {
    this.linkElement.focus(options);
  }
  render() {
    return (h("div", { role: "listitem", class: {
        "duet-notification": true,
        "duet-notification-highlight": this.highlight,
        "duet-theme-turva": this.theme === "turva",
      } }, h("a", { ref: element => (this.linkElement = element), href: this.url, target: this.external ? "_blank" : "_self" }, h("div", { class: "duet-notification-container" }, h("div", { class: "duet-notification-badge-container" }, this.highlight && (h("div", { class: "duet-notification-badge" }, h("duet-visually-hidden", null, this.accessibleLabelUnread, ":")))), h("div", { class: "duet-notification-content" }, h("slot", null)), h("div", { class: "duet-notification-date" }, this.date)))));
  }
  static get is() { return "duet-notification"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-notification.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-notification.css"]
    };
  }
  static get properties() {
    return {
      "language": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetLanguage",
          "resolved": "\"en\" | \"fi\" | \"sv\"",
          "references": {
            "DuetLanguage": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "deprecated",
              "text": "this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing"
            }, {
              "name": "default",
              "text": "\"fi\""
            }],
          "text": "The currently active language.\nUsed for announcing unread notifications to screen readers."
        },
        "attribute": "language",
        "reflect": true,
        "defaultValue": "getLanguage()"
      },
      "accessibleLabelUnreadDefaults": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject",
          "resolved": "DuetLangObject",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Property to change accessibleLabelUnread defaults on the component.\nnormally you would handle these strings on an application level and override @accessibleLabelUnread when needed"
        },
        "defaultValue": "{\n    en: \"Unread\",\n    fi: \"Lukematon\",\n    sv: \"Ol\u00E4st\",\n  }"
      },
      "accessibleLabelUnread": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{ en: \"Unread\", fi: \"Lukematon\", sv: \"Ol\u00E4st\" }"
            }],
          "text": "Adds accessible label for tooltip that is shown over unread counter"
        },
        "attribute": "accessible-label-unread",
        "reflect": false,
        "defaultValue": "getLocaleString(\n    this.accessibleLabelUnreadDefaults,\n    this.language\n  )"
      },
      "url": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The url to open on notification click."
        },
        "attribute": "url",
        "reflect": false,
        "defaultValue": "\"#\""
      },
      "date": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The date of the notification."
        },
        "attribute": "date",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "highlight": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Should the notification be visually highlighted?"
        },
        "attribute": "highlight",
        "reflect": false,
        "defaultValue": "false"
      },
      "external": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Should the link open in a new window?"
        },
        "attribute": "external",
        "reflect": false,
        "defaultValue": "false"
      },
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the notification."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      }
    };
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [{
                  "name": "param",
                  "text": "options"
                }],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Move focus to the notification's link element.\nUse this method instead of the native `focus()` method.",
          "tags": [{
              "name": "param",
              "text": "options"
            }]
        }
      }
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "language",
        "methodName": "watchLanguageStateHandler"
      }];
  }
}
