/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import isInternetExplorer from "../../utils/is-internet-explorer";
/**
 * @slot main - The layout component’s primary content. Use this for the main content on the page.
 * @slot sidebar - The layout component’s sidebar content. Use this for content that is related to the content in the main slot.
 * @slot top - This is a full-width content area above the main and sidebar slots. Could be used to show for example alert messages.
 */
export class DuetLayout {
  constructor() {
    /**
     * Own Properties.
     */
    this.hasSidebar = false;
    this.hasTop = false;
    this.sticky = false;
    this.margin = "auto";
    this.stickyDistance = "with-links";
    this.center = false;
    this.tabs = false;
    this.middle = false;
    this.paddingBreakpoint = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    this.hasSidebar = !!this.element.querySelector("[slot='sidebar']");
    this.hasTop = !!this.element.querySelector("[slot='top']");
    if (!this.element.querySelector("[slot='main']")) {
      console.warn("[DUET WARNING]: Nothing passed to <duet-layout> named slots. Please use one of 'main', 'sidebar' or 'top' to display contents.");
    }
  }
  /**
   * render() function.
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { class: {
        "duet-middle": this.middle,
        "duet-ie": isInternetExplorer(),
      } }, this.hasTop && (h("div", { class: {
        "duet-layout-top": true,
        "duet-m-0": this.margin === "none",
        "duet-center": this.center,
      } }, h("div", { class: "duet-layout-top-wrapper" }, h("slot", { name: "top" })))), h("div", { class: {
        "duet-layout": true,
        "duet-layout-has-top": this.hasTop,
        "has-sidebar": this.hasSidebar,
        "duet-m-0": this.margin === "none",
        "duet-center": this.center,
        [`padding-${this.paddingBreakpoint}`]: !!this.paddingBreakpoint,
      } }, h("main", { class: "duet-main" }, h("slot", { name: "main" })), this.hasSidebar && (h("aside", { class: "duet-sidebar" }, h("div", { class: {
        "duet-sidebar-container": true,
        "has-tabs": this.tabs,
        sticky: this.sticky,
        [this.stickyDistance]: this.sticky,
      } }, h("slot", { name: "sidebar" })))))));
  }
  static get is() { return "duet-layout"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-layout.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-layout.css"]
    };
  }
  static get properties() {
    return {
      "sticky": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Makes the sidebar stick to the top of the window when scrolling down."
        },
        "attribute": "sticky",
        "reflect": false,
        "defaultValue": "false"
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "stickyDistance": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLayoutStickyDistance",
          "resolved": "\"with-links\" | \"without-links\"",
          "references": {
            "DuetLayoutStickyDistance": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-layout/duet-layout.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjust sticky sidebar\u2019s distance to duet navigation component using this property."
        },
        "attribute": "sticky-distance",
        "reflect": false,
        "defaultValue": "\"with-links\""
      },
      "center": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Center align all direct children of this component."
        },
        "attribute": "center",
        "reflect": false,
        "defaultValue": "false"
      },
      "tabs": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "If set to true, the sidebar position will be adjusted to take tabs inside main content\narea into account."
        },
        "attribute": "tabs",
        "reflect": false,
        "defaultValue": "false"
      },
      "middle": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Align container vertically in the middle when the space allows it."
        },
        "attribute": "middle",
        "reflect": false,
        "defaultValue": "false"
      },
      "paddingBreakpoint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetBreakpoints",
          "resolved": "\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\" | \"xxx-small\"",
          "references": {
            "DuetBreakpoints": {
              "location": "import",
              "path": "../../utils/token-utils"
            }
          }
        },
        "required": false,
        "optional": true,
        "docs": {
          "tags": [],
          "text": "Breakpoint used to remove padding. These match to\nsimilar media query tokens: $media-query-small and $media-query-medium."
        },
        "attribute": "padding-breakpoint",
        "reflect": false,
        "defaultValue": "undefined"
      }
    };
  }
  static get elementRef() { return "element"; }
}
