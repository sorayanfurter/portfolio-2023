/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
export class DuetUploadAriaStatus {
  constructor() {
    /**
     * Private functions
     */
    this.replacePlaceHolders = (statusString) => {
      const addFiles = (amount) => {
        return amount > 1 ? `${amount} ${this.statusMessageLabel.files}` : `${amount} ${this.statusMessageLabel.file}`;
      };
      return statusString
        .replace("{filesUploaded}", addFiles(this.valid))
        .replace("{filesInProgress}", addFiles(this.inprogress))
        .replace("{filesTotal}", addFiles(this.total))
        .replace("{filesWithErrors}", addFiles(this.invalid));
    };
    this.getStatusMessage = () => {
      const { done, inProgress, doneWithErrors, inProgressWithErrors } = this.statusMessageLabel;
      const hasErrors = this.invalid > 0;
      const isInProgress = this.inprogress > 0;
      const isInProgressWithErrors = this.inprogress > 0 && hasErrors;
      const isDone = this.valid === this.total && !isInProgress && !hasErrors;
      const isDoneWithErrors = this.valid + this.invalid === this.total && !isInProgress;
      if (isDone) {
        this.statusMessage = this.replacePlaceHolders(done);
        return;
      }
      else if (isInProgressWithErrors) {
        this.statusMessage = this.replacePlaceHolders(inProgressWithErrors);
        return;
      }
      else if (isInProgress) {
        this.statusMessage = this.replacePlaceHolders(inProgress);
        return;
      }
      else if (isDoneWithErrors) {
        this.statusMessage = this.replacePlaceHolders(doneWithErrors);
        return;
      }
      return;
    };
    this.statusMessage = null;
    this.statusMessageLabel = null;
    this.accessibleAriaLive = "polite";
    this.valid = undefined;
    this.total = undefined;
    this.invalid = undefined;
    this.inprogress = undefined;
  }
  watchHandler(newValue, oldValue) {
    if (newValue !== oldValue) {
      this.getStatusMessage();
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { role: "status", "aria-live": "assertive", "aria-atomic": "true", "aria-relevant": "all" }, h("duet-visually-hidden", null, this.statusMessage)));
  }
  static get is() { return "duet-upload-aria-status"; }
  static get encapsulation() { return "shadow"; }
  static get properties() {
    return {
      "statusMessageLabel": {
        "type": "unknown",
        "mutable": false,
        "complexType": {
          "original": "StatusMessage",
          "resolved": "{ inProgress: string; inProgressWithErrors: string; done: string; doneWithErrors: string; file: string; files: string; }",
          "references": {
            "StatusMessage": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Status labels used in the component"
        },
        "defaultValue": "null"
      },
      "accessibleAriaLive": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"off\" | \"polite\" | \"assertive\"",
          "resolved": "\"assertive\" | \"off\" | \"polite\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adds accessible label that is read aloud"
        },
        "attribute": "accessible-aria-live",
        "reflect": false,
        "defaultValue": "\"polite\""
      },
      "valid": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "valid file amount"
        },
        "attribute": "valid",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "total": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "total files"
        },
        "attribute": "total",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "invalid": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "invalid file amount"
        },
        "attribute": "invalid",
        "reflect": false,
        "defaultValue": "undefined"
      },
      "inprogress": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "valid file amount"
        },
        "attribute": "inprogress",
        "reflect": false,
        "defaultValue": "undefined"
      }
    };
  }
  static get states() {
    return {
      "statusMessage": {}
    };
  }
  static get watchers() {
    return [{
        "propName": "valid",
        "methodName": "watchHandler"
      }, {
        "propName": "invalid",
        "methodName": "watchHandler"
      }, {
        "propName": "inprogress",
        "methodName": "watchHandler"
      }, {
        "propName": "total",
        "methodName": "watchHandler"
      }];
  }
}
