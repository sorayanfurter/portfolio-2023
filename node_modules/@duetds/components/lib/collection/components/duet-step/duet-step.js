/*!
 * Built with Duet Design System
 */
import editIcon from "@duetds/icons/lib/assets/action-edit-2";
import { Build, h } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { createID } from "../../utils/create-id";
import { isKeyboardClick } from "../../utils/keyboard-utils";
/**
 * @slot unnamed default slot - The componentâ€™s primary content. All child nodes that do not have a slot attribute defined are inserted into this primary slot.
 * @slot heading-content - Step heading content. Use this slot to show additional content next to step heading.
 */
export class DuetStep {
  constructor() {
    this.buttonId = createID("DuetStepButton");
    this.contentId = createID("DuetStepContent");
    this.handleKeyDown = (e) => {
      if (this.isClickDisabled()) {
        return;
      }
      if (isKeyboardClick(e)) {
        e.preventDefault();
        this.handleStepClick(e);
      }
    };
    this.handleClick = (e) => {
      if (this.isClickDisabled()) {
        return;
      }
      this.handleStepClick(e);
    };
    this.theme = "";
    this.heading = undefined;
    this.headingLevel = undefined;
    this.stepIndex = undefined;
    this.state = undefined;
    this.roundedTop = false;
    this.roundedBottom = false;
  }
  handleStepClick(e) {
    this.duetStepClick.emit({
      originalEvent: e,
      component: "duet-step",
      stepIndex: this.stepIndex,
    });
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * Programmatically shift focus to the step's heading.
   */
  async setFocus(options = { preventScroll: true }) {
    this.buttonElement.focus(options);
  }
  isClickDisabled() {
    return this.state !== "complete";
  }
  headingColor() {
    if (this.state !== "incomplete") {
      return "";
    }
    if (this.theme !== "turva") {
      return "gray-darker";
    }
    else {
      return "gray-dark-turva";
    }
  }
  renderStepCounter() {
    if (this.state === "complete" || this.state === "disabled") {
      return (h("div", { class: "duet-step-icon" }, h("duet-icon", { margin: "none", size: "auto", color: "gray-lightest", icon: editIcon.svg })));
    }
    return `${this.stepIndex + 1} `;
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    if (Build.isBrowser) {
      return (h("div", { class: {
          "duet-step": true,
          [`is-${this.state}`]: true,
          "rounded-top": this.roundedTop,
          "rounded-bottom": this.roundedBottom,
          "duet-theme-turva": this.theme === "turva",
        } }, h("div", { class: "duet-step-heading", id: this.buttonId, role: this.state !== "current" ? "button" : "region", "aria-current": this.state === "current" ? "step" : undefined, tabindex: this.state !== "current" ? "0" : undefined, "aria-disabled": this.isClickDisabled().toString(), "aria-expanded": (this.state === "current").toString(), "aria-controls": this.contentId, "aria-selected": (this.state === "current").toString(), onClick: this.handleClick, onKeyDown: this.handleKeyDown, ref: element => (this.buttonElement = element) }, h("div", { "aria-hidden": "true" }, h("div", { class: "duet-step-counter" }, this.renderStepCounter())), h("duet-spacer", { direction: "horizontal", size: "large", breakpoint: "small" }), h("duet-spacer", { direction: "horizontal", size: "medium", breakpoint: "x-small" }), h("div", null, h("duet-heading", { theme: this.theme, level: this.headingLevel, visualLevel: "h4", color: this.headingColor(), margin: "none" }, this.heading)), h("duet-spacer", { direction: "horizontal", size: "large" }), h("div", { class: "duet-step-heading-slot" }, h("slot", { name: "heading-content" }))), h("div", { class: "duet-step-content-wrapper" }, h("div", { class: "duet-step-content", role: "region", "aria-labelledby": this.buttonId, id: this.contentId }, h("slot", null)))));
    }
  }
  static get is() { return "duet-step"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-step.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-step.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the component."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "heading": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set the heading for the step."
        },
        "attribute": "heading",
        "reflect": false
      },
      "headingLevel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetHeadingLevel",
          "resolved": "\"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\"",
          "references": {
            "DuetHeadingLevel": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set the heading level used in the HTML markup."
        },
        "attribute": "heading-level",
        "reflect": false
      },
      "stepIndex": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "The index of this step, derived from its position within stepper.\nThis property is used internally by stepper, and should not be set by the developer."
            }],
          "text": ""
        },
        "attribute": "step-index",
        "reflect": false
      },
      "state": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetStepState",
          "resolved": "\"complete\" | \"current\" | \"disabled\" | \"incomplete\"",
          "references": {
            "DuetStepState": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-step/duet-step.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "The state of the step.\nThis property is used internally by stepper, and should not be set by the developer."
            }],
          "text": ""
        },
        "attribute": "state",
        "reflect": false
      },
      "roundedTop": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Enable/disable rounded top corners (on mobile).\nThis property is used internally by stepper, and should not be set by the developer."
            }],
          "text": ""
        },
        "attribute": "rounded-top",
        "reflect": false,
        "defaultValue": "false"
      },
      "roundedBottom": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Enable/disable rounded bottom corners (on mobile).\nThis property is used internally by stepper, and should not be set by the developer."
            }],
          "text": ""
        },
        "attribute": "rounded-bottom",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get events() {
    return [{
        "method": "duetStepClick",
        "name": "duetStepClick",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emitted when the step heading is clicked."
        },
        "complexType": {
          "original": "DuetStepClickEvent",
          "resolved": "{ originalEvent: KeyboardEvent | MouseEvent; component: \"duet-step\"; stepIndex: number; }",
          "references": {
            "DuetStepClickEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-step/duet-step.tsx"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Programmatically shift focus to the step's heading.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
}
