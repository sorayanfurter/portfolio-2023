/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { FocusGuard } from "../../utils/focus-utils";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
import { getColorByName } from "../../utils/token-utils";
export class DuetSlideoutPanel {
  constructor() {
    this.exitLangObject = {
      en: "Exit the menu",
      fi: "Poistu valikosta",
      sv: "Avsluta menyn",
    };
    this.backLangObject = {
      en: "Back to main menu",
      fi: "Takaisin päävalikkoon",
      sv: "Tillbaka till huvudmenyn",
    };
    this.updateLabel = () => {
      const labelSlotElement = this.element.querySelector("[slot='label']");
      this.label = labelSlotElement;
    };
    this.onToggleClick = () => {
      const toggle = !this.open;
      this.open = toggle;
      if (toggle) {
        setTimeout(() => {
          this.closeButton.focus();
        }, 200);
      }
      else {
        setTimeout(() => {
          this.openButton.focus();
        }, 200);
      }
    };
    this.onCloseClick = e => {
      e.stopPropagation();
      const parentElement = this.element.parentElement;
      if (parentElement.tagName === "DUET-SLIDEOUT") {
        const slideout = this.element.parentElement;
        slideout.toggle();
      }
    };
    this.label = undefined;
    this.language = getLanguage();
    this.theme = "";
    this.active = false;
    this.open = false;
    this.icon = undefined;
    this.labelSize = "medium";
    this.backgroundColor = "primary-lightest";
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.updateLabel();
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    if (this.open) {
      setTimeout(() => {
        this.closeButton.focus(options);
      }, 200);
    }
    else {
      setTimeout(() => {
        this.openButton.focus(options);
      }, 200);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const defaultBackgroundColor = this.backgroundColor === "primary-lightest"
      ? this.theme === "turva"
        ? "gray-lighter"
        : this.backgroundColor
      : this.backgroundColor;
    const styles = {
      background: getColorByName(defaultBackgroundColor, this.theme),
    };
    const exitTranslation = getLocaleString(this.exitLangObject);
    const backTranslation = getLocaleString(this.backLangObject);
    return (h(Host, null, h("div", { class: {
        "duet-slideout-panel": true,
        "duet-theme-turva": this.theme === "turva",
        active: this.open,
      } }, h("button", { ref: element => (this.openButton = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", "aria-current": this.active ? "true" : "false", id: "button", type: "button", class: {
        link: true,
        active: this.active,
      }, onClick: this.onToggleClick }, this.icon && h("duet-icon", { name: this.icon, size: "medium", margin: "none", color: "secondary" }), h("div", { class: "label" }, h("span", { class: { "label-text": true, [this.labelSize]: true } }, h("slot", { name: "label" })), h("duet-icon", { class: "caret", name: "action-arrow-right", margin: "none", size: "x-small", color: "secondary" }))), h("div", { class: {
        dialog: true,
        hidden: !this.open,
      }, style: styles }, h(FocusGuard, { moveFocusTo: this.closeButton }), h("div", { class: "top" }, h("button", { ref: element => (this.closeButton = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", "aria-label": `${backTranslation}`, type: "button", class: {
        back: true,
      }, onClick: this.onToggleClick }, h("duet-icon", { class: "caret", name: "action-arrow-left", margin: "none", size: "small", color: "secondary" })), h("span", null, this.label.innerHTML), h("button", { class: "close", type: "button", onClick: this.onCloseClick, "aria-label": `${exitTranslation}` }, h("duet-icon", { name: "navigation-close", size: "small", margin: "none", color: "secondary" }))), h("div", { tabindex: "-1", role: "menu", id: "menu", "aria-labelledby": "button", class: {
        items: true,
      } }, h("slot", null)), h(FocusGuard, { moveFocusTo: this.closeButton })))));
  }
  static get is() { return "duet-slideout-panel"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-slideout-panel.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-slideout-panel.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "active": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Active"
        },
        "attribute": "active",
        "reflect": true,
        "defaultValue": "false"
      },
      "open": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Open"
        },
        "attribute": "open",
        "reflect": true,
        "defaultValue": "false"
      },
      "icon": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon"
        },
        "attribute": "icon",
        "reflect": true,
        "defaultValue": "undefined"
      },
      "labelSize": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "\"small\" | \"medium\" | \"large\"",
          "resolved": "\"large\" | \"medium\" | \"small\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Size. Small, medium or large."
        },
        "attribute": "label-size",
        "reflect": true,
        "defaultValue": "\"medium\""
      },
      "backgroundColor": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetColor",
          "resolved": "string",
          "references": {
            "DuetColor": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Background color. Use one of the color tokens."
        },
        "attribute": "background-color",
        "reflect": true,
        "defaultValue": "\"primary-lightest\""
      }
    };
  }
  static get states() {
    return {
      "label": {},
      "language": {}
    };
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus. Use this method instead of the global focus().",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
}
