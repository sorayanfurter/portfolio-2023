/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { findCheckedOption, watchForOptions } from "../../utils/watch-options";
export class DuetRadioGroup {
  constructor() {
    /**
     * Component event handling.
     */
    this.onSelect = (ev) => {
      const selectedRadio = ev.target;
      if (selectedRadio) {
        this.value = selectedRadio.value;
      }
      // Prevent events from bubbling up the DOM tree in case
      // this group is a sub-group of another choice group.
      ev.cancelBubble = true;
    };
    this.direction = "vertical";
    this.margin = "auto";
    this.theme = "";
    this.error = "";
    this.tooltip = "";
    this.tooltipDirection = "auto";
    this.name = undefined;
    this.label = "Label";
    this.labelHidden = false;
    this.caption = "";
    this.responsive = false;
    this.value = undefined;
    this.disabled = undefined;
  }
  /**
   * Component lifecycle events.
   */
  async connectedCallback() {
    const el = this.element;
    if (this.value === undefined) {
      const radio = findCheckedOption(el, "duet-radio");
      if (radio !== undefined) {
        await radio.componentOnReady();
        if (this.value === undefined) {
          this.value = radio.value;
        }
      }
    }
    this.mutationO = watchForOptions(el, "duet-radio", newOption => {
      if (newOption !== undefined) {
        newOption.componentOnReady().then(() => {
          this.value = newOption.value;
        });
      }
      else {
        this.updateRadios();
      }
    });
    this.updateRadios();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * Local methods.
   */
  async updateRadios() {
    /**
     * Make sure we get all radios first so values are up to date prior
     * to caching the radio group value
     */
    const radios = Array.from(this.element.querySelectorAll("duet-radio"));
    const { value } = this;
    let hasChecked = false;
    // Walk the DOM in reverse order, since the last selected one wins
    for (const radio of radios) {
      radio.name = this.name;
      radio.groupDisabled = this.disabled;
      radio.groupDirection = this.direction;
      radio.groupResponsive = this.responsive;
      if (!hasChecked && radio.value === value) {
        // Correct value for this radio, but this radio isn't checked yet
        // and we haven't found a checked yet
        hasChecked = true;
        radio.checked = true;
      }
      else {
        // This radio doesn't have the correct value or the radio group has been already checked
        radio.checked = false;
      }
    }
    // Reset value if
    if (!hasChecked) {
      this.value = undefined;
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { onDuetChange: this.onSelect, class: { horizontal: this.direction === "horizontal" } }, h("duet-fieldset", { label: this.label, labelHidden: this.labelHidden, caption: this.caption, error: this.error, margin: this.margin, theme: this.theme }, this.tooltip && (h("duet-tooltip", { slot: "tooltip", direction: this.tooltipDirection, accessibleInputLabel: this.label }, this.tooltip)), h("div", { class: { "duet-radio-group": true, "duet-no-stacking": !this.responsive } }, h("slot", null)))));
  }
  static get is() { return "duet-radio-group"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-radio-group.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-radio-group.css"]
    };
  }
  static get properties() {
    return {
      "direction": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetDirection",
          "resolved": "\"horizontal\" | \"vertical\"",
          "references": {
            "DuetDirection": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Direction of the radio group."
        },
        "attribute": "direction",
        "reflect": false,
        "defaultValue": "\"vertical\""
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the radio group."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "error": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Display radio group in error state along with an error message."
        },
        "attribute": "error",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "tooltip": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Tooltip to display next to the label of the radio group."
        },
        "attribute": "tooltip",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "tooltipDirection": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetTooltipDirection",
          "resolved": "\"auto\" | \"left\" | \"right\"",
          "references": {
            "DuetTooltipDirection": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "With direction setting you can force the tooltip to always open towards left\nor right instead of automatically determining the direction."
        },
        "attribute": "tooltip-direction",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name for the radio buttons within this group. **This must be unique amongst all other inputs.**"
        },
        "attribute": "name",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Legend displayed for the radio buttons in this group."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "\"Label\""
      },
      "labelHidden": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Visually hide the label, but still show it to screen readers."
        },
        "attribute": "label-hidden",
        "reflect": false,
        "defaultValue": "false"
      },
      "caption": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Additional caption to show inside the label of the radio group."
        },
        "attribute": "caption",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "responsive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enable or disable the automatic responsive behaviour of the radio group\ncomponent when horizontal setting is used. Setting this option to \"true\"\nmakes sure that contents are stacked vertically on mobile."
        },
        "attribute": "responsive",
        "reflect": false,
        "defaultValue": "false"
      },
      "value": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The value of the selected radio button."
        },
        "attribute": "value",
        "reflect": true
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Determines, whether the control is disabled or not."
        },
        "attribute": "disabled",
        "reflect": false
      }
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "name",
        "methodName": "updateRadios"
      }, {
        "propName": "value",
        "methodName": "updateRadios"
      }, {
        "propName": "disabled",
        "methodName": "updateRadios"
      }, {
        "propName": "direction",
        "methodName": "updateRadios"
      }, {
        "propName": "responsive",
        "methodName": "updateRadios"
      }];
  }
}
