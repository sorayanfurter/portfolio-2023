/*!
 * Built with Duet Design System
 */
import { sizeHeader, sizeNavigation } from "@duetds/tokens";
import { Build, h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { debounce } from "../../utils/js-utils";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, } from "../../utils/language-utils";
import { breakpointTokensUpTo, breakpointToToken } from "../../utils/token-utils";
const stickyTopValues = {
  none: 0,
  "with-links": parseFloat(sizeNavigation) * 16,
  "without-links": parseFloat(sizeHeader) * 16,
};
/**
 * @slot dot-menu- If this slot is populated - the content will be displayed together with a ... type menu to the far right in the tsble header
 * @slot header - Header slot for the table
 * @slot footer - Footer slot for the table
 */
export class DuetTable {
  constructor() {
    this.headingSelector = "thead tr > :not(*.duet-editable-table-actions-menu)";
    this.handleMediaQueryChange = (mq) => {
      this.matchesBreakpoint = breakpointTokensUpTo.includes(this.breakpoint) ? !mq.matches : mq.matches;
    };
    this.matchesBreakpoint = true;
    this.language = getLanguage();
    this.theme = undefined;
    this.margin = "auto";
    this.variation = "striped";
    this.sticky = false;
    this.stickyDistance = "with-links";
    this.breakpoint = "small";
    this.hideHeadVisually = false;
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue) {
      setTimeout(() => this.copyHeadingsToCells(), 50);
    }
  }
  connectedCallback() {
    if (Build.isServer) {
      return;
    }
    const token = this.breakpoint === "none" || this.breakpoint === "none-scrollable" ? "all" : breakpointToToken[this.breakpoint];
    this.mq = matchMedia(token);
    this.mq.addEventListener("change", debounce(this.handleMediaQueryChange, 50));
    this.handleMediaQueryChange(this.mq);
    this.observer = new MutationObserver(() => debounce(this.copyHeadingsToCells(), 50));
    this.observer.observe(this.element, {
      childList: true,
      subtree: true,
    });
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.copyHeadingsToCells();
    if (this.sticky && this.breakpoint === "none-scrollable") {
      console.warn(`[DUET WARNING]: sticky and breakpoint="none-scrollable" are incompatible. Scrollable takes precedence`);
    }
    if (this.sticky) {
      const stickyTop = stickyTopValues[this.stickyDistance];
      const headingElements = this.element.querySelectorAll(this.headingSelector);
      headingElements.forEach(th => (th.style.top = `${stickyTop}px`));
    }
  }
  componentDidLoad() {
    if (Build.isServer) {
      return;
    }
    // this clears all pending mutations,
    // that way we avoid dealing with any initial changes
    // and only get genuine mutations as rows are added/removed
    this.observer ? this.observer.takeRecords() : null;
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    if (Build.isServer) {
      return;
    }
    this.observer.disconnect();
    this.observer = null;
    this.mq.removeListener(this.handleMediaQueryChange);
    this.mq = null;
    this.matchesBreakpoint = true;
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Local methods.
   */
  copyHeadingsToCells() {
    const headingElements = this.element.querySelectorAll(this.headingSelector);
    const rowElements = this.element.querySelectorAll("tbody tr");
    const headings = Array.from(headingElements).map(th => th.textContent.trim());
    rowElements.forEach(tr => {
      tr.querySelectorAll("td").forEach((td, i) => {
        if (headings[i]) {
          td.dataset.heading = headings[i];
        }
      });
    });
  }
  render() {
    return (h(Host, { class: {
        [`duet-table-${this.variation}`]: true,
        "duet-table-flattened": !this.matchesBreakpoint,
        // sticky only valid when in regular table layout
        "duet-table-sticky": this.matchesBreakpoint && this.sticky,
        "duet-table-scrollable": this.breakpoint === "none-scrollable",
        "duet-m-0": this.margin === "none",
        "duet-theme-turva": this.theme === "turva",
        "duet-table-hide-head-visually": this.hideHeadVisually,
      } }, h("slot", null)));
  }
  static get is() { return "duet-table"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-table.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-table.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the table."
        },
        "attribute": "theme",
        "reflect": false
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "variation": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetTableVariant",
          "resolved": "\"fixed\" | \"plain\" | \"striped\"",
          "references": {
            "DuetTableVariant": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Style variation of the table."
        },
        "attribute": "variation",
        "reflect": false,
        "defaultValue": "\"striped\""
      },
      "sticky": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls whether the table has a sticky header.\nSticky headers are not compatible with breakpoint=\"none-scrollable\"."
        },
        "attribute": "sticky",
        "reflect": false,
        "defaultValue": "false"
      },
      "stickyDistance": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetTableStickyDistance",
          "resolved": "\"none\" | \"with-links\" | \"without-links\"",
          "references": {
            "DuetTableStickyDistance": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjust the distance from top of the viewport (in pixels) when the\ntable header becomes sticky."
        },
        "attribute": "sticky-distance",
        "reflect": false,
        "defaultValue": "\"with-links\""
      },
      "breakpoint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetTableBreakpoint",
          "resolved": "\"large\" | \"medium\" | \"none\" | \"none-scrollable\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\" | \"xxx-small\"",
          "references": {
            "DuetTableBreakpoint": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "By default the table is responsive - it will be flattened at narrow viewport widths.\nThis prop controls the breakpoint at which the table should be rendered as a _regular_ table.\nSet to \"none\" to disable the responsive functionality.\nSet to \"none-scrollable\" to disable responsive functionality _and_ allow horizontal scrolling -\nthis is useful for comparison tables where it's important to maintain column and row layout."
        },
        "attribute": "breakpoint",
        "reflect": false,
        "defaultValue": "\"small\""
      },
      "hideHeadVisually": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hide a thead section visually. The content is still available to screen readers."
        },
        "attribute": "hide-head-visually",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "matchesBreakpoint": {},
      "language": {}
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "language",
        "methodName": "watchLanguageStateHandler"
      }];
  }
}
