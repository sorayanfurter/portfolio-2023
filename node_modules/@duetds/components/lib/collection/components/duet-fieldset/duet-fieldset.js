/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { createID } from "../../utils/create-id";
/**
 * @slot unnamed default slot - The componentâ€™s primary content. All child nodes that do not have a slot attribute defined are inserted into this primary slot.
 * @slot tooltip - Use to place a tooltip alongside the fieldset label.
 */
export class DuetFieldset {
  constructor() {
    this.errorId = createID("DuetError");
    this.labelId = createID("DuetLabel");
    this.checkHasTooltip = () => {
      this.hasTooltip = !!this.element.querySelector("[slot='tooltip']");
    };
    this.hasTooltip = false;
    this.theme = "";
    this.margin = "auto";
    this.caption = undefined;
    this.label = undefined;
    this.error = undefined;
    this.accessibleLiveError = "polite";
    this.labelHidden = false;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.checkHasTooltip();
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { class: { "duet-m-0": this.margin === "none" } }, h("fieldset", { "aria-labelledby": this.labelId, "aria-describedby": this.error ? this.errorId : null,
      // NVDA and VoiceOver do not yet support aria-errormessage
      // once they do, we can remove errors from the aria-describedby
      // aria-errormessage={this.error ? this.errorId : null}
      class: {
        "duet-fieldset": true,
        "duet-theme-turva": this.theme === "turva",
      } }, h("legend", { id: this.labelId }, h("span", null, this.label), this.caption && h("span", null, this.caption)), h("div", { class: {
        "duet-legend-wrapper": true,
        "duet-legend-has-caption": !!this.caption,
        "duet-legend-has-tooltip": this.hasTooltip,
        "duet-legend-hidden": this.labelHidden,
      } }, h("div", { class: "duet-fieldset-label" }, h("span", { "aria-hidden": "true" }, this.label), h("slot", { onSlotchange: this.checkHasTooltip, name: "tooltip" })), this.caption && (h("div", { class: "duet-fieldset-caption", "aria-hidden": "true" }, h("duet-caption", { margin: "none" }, this.caption)))), h("slot", null), h("span", { class: "duet-fieldset-help", id: this.errorId, "aria-atomic": "true", "aria-live": this.accessibleLiveError, "aria-relevant": "additions removals" }, this.error && h("span", null, this.error)))));
  }
  static get is() { return "duet-fieldset"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-fieldset.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-fieldset.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the fieldset."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "caption": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Additional caption to show next to the label."
        },
        "attribute": "caption",
        "reflect": false
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": true,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Label/legend displayed for the fieldset."
        },
        "attribute": "label",
        "reflect": false
      },
      "error": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "An error message to be shown next to the label."
        },
        "attribute": "error",
        "reflect": false
      },
      "accessibleLiveError": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "\"off\" | \"polite\" | \"assertive\"",
          "resolved": "\"assertive\" | \"off\" | \"polite\"",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The aria-live attribute for the error message. When the input is validated on blur, use \"off\", as using \"polite\" or \"assertive\"\nmakes the screen reader read the error message twice. When the input is validated on submit, use \"polite\", as \"off\" would leave\nthe messages unread by screen readers. Use \"assertive\" only in those rare cases when \"polite\" would leave the error message\nunread by screen readers."
        },
        "attribute": "accessible-live-error",
        "reflect": false,
        "defaultValue": "\"polite\""
      },
      "labelHidden": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Visually hide the label, but still show it to screen readers."
        },
        "attribute": "label-hidden",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "hasTooltip": {}
    };
  }
  static get elementRef() { return "element"; }
}
