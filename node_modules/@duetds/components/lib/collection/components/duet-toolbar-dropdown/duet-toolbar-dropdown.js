/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { isEscapeKey } from "../../utils/keyboard-utils";
export class DuetToolbarDropdown {
  constructor() {
    this.onClick = () => {
      this.open = !this.open;
    };
    this.theme = "";
    this.accessibleLabel = undefined;
    this.active = false;
    this.open = false;
    this.icon = undefined;
  }
  handleFocus(e) {
    const isClickOutside = e.composedPath().every(node => node !== this.element);
    if (isClickOutside) {
      this.open = false;
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  handleEscape(e) {
    if (isEscapeKey(e)) {
      this.open = false;
      this.setFocus();
    }
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    this.button.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    let itemsAlign = "right";
    if (this.element && this.element.parentElement) {
      itemsAlign = this.element.parentElement.getAttribute("slot") === "left" ? "right" : "left";
    }
    return (h(Host, null, h("div", { class: {
        "duet-toolbar-dropdown": true,
        "duet-theme-turva": this.theme === "turva",
        [itemsAlign]: true,
      } }, h("button", { ref: element => (this.button = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", "aria-current": this.active ? "true" : "false", "aria-label": this.accessibleLabel, id: "button", type: "button", class: {
        active: this.active,
        open: this.open,
      }, onClick: this.onClick, onKeyUp: e => this.handleEscape(e) }, this.icon && (h("duet-icon", { theme: this.theme, name: this.icon, size: "x-small", margin: "none", color: "currentColor" })), h("div", { class: "label" }, h("slot", { name: "label" }), h("duet-icon", { class: "caret", theme: this.theme, name: "action-arrow-down-small", margin: "none", size: "xxx-small", color: "currentColor" }))), h("div", { tabindex: "-1", role: "menu", id: "menu", "aria-labelledby": "button", class: {
        items: true,
        hidden: !this.open,
      } }, h("slot", null)))));
  }
  static get is() { return "duet-toolbar-dropdown"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-toolbar-dropdown.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-toolbar-dropdown.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "accessibleLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adds accessible label for the button that is only shown for screen readers.\nTypically, this label text replaces the visible text on the button for\nusers who use assistive technology."
        },
        "attribute": "accessible-label",
        "reflect": false
      },
      "active": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Active"
        },
        "attribute": "active",
        "reflect": true,
        "defaultValue": "false"
      },
      "open": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Open"
        },
        "attribute": "open",
        "reflect": true,
        "defaultValue": "false"
      },
      "icon": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon"
        },
        "attribute": "icon",
        "reflect": true,
        "defaultValue": "undefined"
      }
    };
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus. Use this method instead of the global focus().",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
  static get listeners() {
    return [{
        "name": "click",
        "method": "handleFocus",
        "target": "window",
        "capture": false,
        "passive": false
      }];
  }
}
