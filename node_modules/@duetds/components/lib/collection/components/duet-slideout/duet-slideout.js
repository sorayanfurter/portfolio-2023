/*!
 * Built with Duet Design System
 */
import { Build, h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { FocusGuard } from "../../utils/focus-utils";
import { isEscapeKey } from "../../utils/keyboard-utils";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
import { getColorByName } from "../../utils/token-utils";
export class DuetSlideout {
  constructor() {
    this.exitLangObject = {
      en: "Exit the menu",
      fi: "Poistu valikosta",
      sv: "Avsluta menyn",
    };
    this.isSafariBrowser = /^((?!chrome|android).)*safari/i.test(navigator === null || navigator === void 0 ? void 0 : navigator.userAgent);
    this.toggleMenu = (e) => {
      const toggle = !this.open;
      this.open = toggle;
      this.openButton.setAttribute("aria-expanded", this.open.toString());
      this.duetSlideoutEvent.emit({
        originalEvent: e,
        data: { element: this.element, open: this.open },
        component: "duet-slideout",
      });
      if (toggle) {
        const openPanel = this.element.querySelector("duet-slideout-panel[open]");
        if (openPanel) {
          openPanel.setFocus();
        }
        else {
          setTimeout(() => {
            this.closeButton.focus();
          }, 200);
        }
      }
      else {
        setTimeout(() => {
          this.openButton.setFocus();
        }, 200);
      }
    };
    this.onClick = (e) => {
      this.toggleMenu(e);
    };
    this.language = getLanguage();
    this.theme = "";
    this.open = false;
    this.backgroundColor = "gray-lightest";
  }
  /**
   * Toggles the slideout.
   */
  async toggle() {
    const event = new CustomEvent("toggle");
    this.toggleMenu(event);
    setTimeout(() => {
      this.closeButton.focus();
    }, 200);
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    if (Build.isServer) {
      const toggles = Array.from(this.element.children).filter(el => el.matches("[slot='toggle']"));
      if (toggles.length > 0) {
        this.openButton = toggles[0];
      }
    }
    else {
      this.openButton = this.element.querySelector(":scope > [slot='toggle']");
    }
    if (this.openButton) {
      this.openButton.accessiblePopup = "true";
      this.openButton.accessibleExpanded = false;
      this.openButton.addEventListener("click", e => {
        e.stopPropagation();
        e.preventDefault();
        this.onClick(e);
      });
      this.openButton = this.openButton;
    }
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Component event handling.
   */
  handleKeyUp(ev) {
    // When Esc is pressed
    if (isEscapeKey(ev)) {
      if (this.open) {
        this.toggleMenu(ev);
      }
    }
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    this.openButton.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const styles = {
      background: getColorByName(this.backgroundColor, this.theme),
    };
    const exitTranslation = getLocaleString(this.exitLangObject);
    return (h(Host, null, h("div", { class: { "duet-slideout": true, "duet-theme-turva": this.theme === "turva" } }, h("slot", { name: "toggle" }), h("div", { class: {
        "desktop-bg": true,
        hidden: !this.open,
      }, onClick: () => {
        this.open = false;
      } }), h("div", { tabindex: "-1", role: "dialog", id: "dialog", "aria-labelledby": "button", "aria-modal": this.isSafariBrowser ? false : true, "aria-flowto": "menubar", class: {
        dialog: true,
        hidden: !this.open,
      }, style: styles }, h(FocusGuard, { moveFocusTo: this.closeButton }), h("div", { class: "top" }, h("button", { ref: element => (this.closeButton = element), "aria-haspopup": "dialog", "aria-controls": "dialog", "aria-expanded": this.open ? "true" : "false", "aria-label": `${exitTranslation}`, type: "button", class: {
        "slideout-close": true,
        active: this.open,
      }, onClick: this.onClick }, h("duet-icon", { name: "navigation-close", size: "small", margin: "none", color: "secondary" }))), h("div", { id: "menubar", role: "menubar", class: {
        items: true,
      } }, h("slot", null)), h(FocusGuard, { moveFocusTo: this.closeButton })))));
  }
  static get is() { return "duet-slideout"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-slideout.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-slideout.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "open": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Open"
        },
        "attribute": "open",
        "reflect": true,
        "defaultValue": "false"
      },
      "backgroundColor": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetColor",
          "resolved": "string",
          "references": {
            "DuetColor": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Background color. Use one of the color tokens."
        },
        "attribute": "background-color",
        "reflect": true,
        "defaultValue": "\"gray-lightest\""
      }
    };
  }
  static get states() {
    return {
      "language": {}
    };
  }
  static get events() {
    return [{
        "method": "duetSlideoutEvent",
        "name": "duetSlideoutEvent",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event raised when the menu has been opened. You can prevent the\ndefault browser functionality by calling **event.detail.originalEvent.preventDefault()**\ninside your listener. Additionally, the passed data is available via **event.detail.data**."
        },
        "complexType": {
          "original": "DuetSlideoutEventDetails",
          "resolved": "{ originalEvent: Event; data: { element: HTMLElement; open: boolean; }; component: \"duet-slideout\"; }",
          "references": {
            "DuetSlideoutEventDetails": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-slideout/duet-slideout.tsx"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "toggle": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Toggles the slideout.",
          "tags": []
        }
      },
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus. Use this method instead of the global focus().",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
  static get listeners() {
    return [{
        "name": "keyup",
        "method": "handleKeyUp",
        "target": "window",
        "capture": false,
        "passive": false
      }];
  }
}
