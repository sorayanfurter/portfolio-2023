/*!
 * Built with Duet Design System
 */
import { Build, h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
/**
 * @slot collapse-button-label - This is to label collapse button.
 */
export class DuetScrollable {
  constructor() {
    /**
     * Private variables and constants index
     */
    this.currentIndex = 0;
    this.tabListElement = undefined;
    this.tabListClass = "duet-scrollable-list";
    this.hasCollapseButtonLabelSlot = false;
    this.resizeObserver = new ResizeObserver(entries => {
      var _a, _b, _c, _d;
      // otherwise, something is wrong, expecting 1 element only
      if ((entries === null || entries === void 0 ? void 0 : entries.length) === 1) {
        const currentWidth = (_b = (_a = entries[0]) === null || _a === void 0 ? void 0 : _a.target) === null || _b === void 0 ? void 0 : _b.getBoundingClientRect().width;
        const scrollWidth = (_d = (_c = entries[0]) === null || _c === void 0 ? void 0 : _c.target) === null || _d === void 0 ? void 0 : _d.scrollWidth;
        // in order to avoid state "jumping" on the boundary condition we add a few pixels to the comparison
        this.isTabContentSmallerThanWrapper = scrollWidth > currentWidth + 5;
      }
    });
    this.collapsedOnClick = () => {
      this.collapsed = !this.collapsed;
    };
    this.tablistAtStart = true;
    this.isTabContentSmallerThanWrapper = false;
    this.tablistAtEnd = false;
    this.childrenData = {};
    this.theme = "";
    this.identifier = "";
    this.collapsed = false;
    this.buttons = true;
    this.center = false;
    this.selected = 0;
  }
  watchPropHandler(newValue) {
    this.scrollToTab(newValue, "center");
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.hasCollapseButtonLabelSlot = Build.isServer
      ? Array.from(this.host.children).filter(el => el.matches("[slot='collapse-button-label']")).length > 0
      : !!this.host.querySelector(":scope > [slot='collapse-button-label']");
    const slotted = Build.isServer
      ? Array.from(this.host.children).filter(el => el.matches("[slot='collapse-button-label']"))
      : this.host.querySelectorAll(":scope > :not([slot='collapse-button-label'])");
    this.childrenData = { hasChildren: slotted && slotted.length > 0, numberOfChildren: slotted && slotted.length };
  }
  componentDidLoad() {
    this.resizeObserver.observe(this.tabListElement);
  }
  disconnectedCallback() {
    this.resizeObserver.disconnect();
  }
  /**
   * Private methods.
   */
  getLastVisibleElement() {
    const clientWidth = this.tabListElement.clientWidth;
    const xValues = Array.from(this.host.querySelectorAll("button")).findIndex(element => element.getBoundingClientRect().x > clientWidth);
    return xValues;
  }
  getFirstVisibleElement() {
    const buttonCollection = this.host.querySelectorAll("button");
    // reverse the array because we want the first invisible element form the middle, not the first in the list
    const arrayOfXValues = Array.from(buttonCollection).map(el => el.getBoundingClientRect().x - el.getBoundingClientRect().width);
    const xValues = arrayOfXValues.findIndex(element => {
      return element > 0;
    });
    return xValues;
  }
  updateScrollButtons(container = this.tabListElement) {
    if (!this.buttons) {
      return;
    }
    if (container.scrollLeft <= 0) {
      this.tablistAtStart = true;
    }
    else if (container.scrollLeft > 0) {
      this.tablistAtStart = false;
    }
    if (container.clientWidth + container.scrollLeft + 10 >= container.scrollWidth) {
      this.tablistAtEnd = true;
    }
    else if (container.clientWidth + container.scrollLeft + 10 < container.scrollWidth) {
      this.tablistAtEnd = false;
    }
  }
  scrollToTab(index = this.currentIndex, inline) {
    if (!this.childrenData.hasChildren) {
      return;
    }
    if (index + 1 >= this.childrenData.numberOfChildren) {
      index = this.childrenData.numberOfChildren - 1;
    }
    if (index < 0) {
      index = 0;
    }
    const buttons = this.host.querySelectorAll("button");
    // store previous position
    let prevPosition = buttons[0].getBoundingClientRect().x;
    // iterations to run
    let ticksWhereScrollDidNotHappen = 5;
    const getAnimationFrame = () => {
      // if we get the same value enter the logic loop
      if (buttons[0].getBoundingClientRect().x === prevPosition) {
        ticksWhereScrollDidNotHappen--;
        // When iteration is not complete run the calculation again
        if (ticksWhereScrollDidNotHappen !== 0) {
          window.requestAnimationFrame(getAnimationFrame);
          return;
        }
        this.updateScrollButtons();
      }
      else {
        window.requestAnimationFrame(getAnimationFrame);
        prevPosition = buttons[0].getBoundingClientRect().x;
      }
    };
    buttons[index].scrollIntoView({ behavior: "smooth", inline });
    window.requestAnimationFrame(getAnimationFrame);
  }
  scrollLeft() {
    this.tablistAtEnd = false;
    const first = this.getFirstVisibleElement() - 1;
    this.scrollToTab(first, "center");
  }
  scrollRight() {
    this.tablistAtStart = false;
    const last = this.getLastVisibleElement() + 1;
    this.scrollToTab(last, "center");
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { class: {
        "duet-theme-turva": this.theme === "turva",
        "duet-theme-default": this.theme === "default",
      } }, this.hasCollapseButtonLabelSlot && (h("div", { class: {
        collapse: true,
        hide: !this.isTabContentSmallerThanWrapper && !this.collapsed,
      } }, h("duet-button", { variation: "plain", margin: "none", "center-text": true, onClick: () => this.collapsedOnClick() }, h("slot", { name: "collapse-button-label" })))), h("div", { class: {
        "duet-scrollable-items": true,
        buttons: this.buttons,
        center: this.center,
      } }, h("button", { part: `${this.identifier}-button-left`, "aria-hidden": "true", class: {
        "duet-scrollable-button": true,
        "duet-scrollable-button--left": true,
        "duet-scrollable-button--occluded": !this.isTabContentSmallerThanWrapper,
      }, onClick: () => this.scrollLeft(), disabled: this.tablistAtStart, tabindex: "-1", hidden: !this.buttons }, h("duet-icon", { name: "action-arrow-left-small", size: "small", margin: "none" })), h("div", { class: {
        [this.tabListClass]: true,
        collapsed: this.collapsed,
      }, onScroll: () => this.updateScrollButtons(), ref: element => (this.tabListElement = element) }, h("slot", null)), h("button", { part: `${this.identifier}-button-right`, "aria-hidden": "true", class: {
        "duet-scrollable-button": true,
        "duet-scrollable-button--right": true,
        "duet-scrollable-button--occluded": !this.isTabContentSmallerThanWrapper,
      }, onClick: () => this.scrollRight(), disabled: this.tablistAtEnd, tabindex: "-1", hidden: !this.buttons }, h("duet-icon", { name: "action-arrow-right-small", size: "small", margin: "none" })))));
  }
  static get is() { return "duet-scrollable"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-scrollable.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-scrollable.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of duet-tab-scrollable. When used this will override the color setting and\nuse \"primary\" or \"primary-turva\" as the color depending on which theme\nis chosen."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "identifier": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Optional identifier to add to buttons in the tab group"
        },
        "attribute": "identifier",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "collapsed": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Boolean to collapse scrollable items into normal flow."
        },
        "attribute": "collapsed",
        "reflect": true,
        "defaultValue": "false"
      },
      "buttons": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Whether or not include previous and forward buttons. Defaults to true."
        },
        "attribute": "buttons",
        "reflect": false,
        "defaultValue": "true"
      },
      "center": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Center the scrollable list. Defaults to false."
        },
        "attribute": "center",
        "reflect": false,
        "defaultValue": "false"
      },
      "selected": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Selected element"
        },
        "attribute": "selected",
        "reflect": false,
        "defaultValue": "0"
      }
    };
  }
  static get states() {
    return {
      "tablistAtStart": {},
      "isTabContentSmallerThanWrapper": {},
      "tablistAtEnd": {},
      "childrenData": {}
    };
  }
  static get elementRef() { return "host"; }
  static get watchers() {
    return [{
        "propName": "selected",
        "methodName": "watchPropHandler"
      }];
  }
}
