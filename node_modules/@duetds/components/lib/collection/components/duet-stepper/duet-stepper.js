/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import groupBy from "../../utils/group-by";
export class DuetStepper {
  constructor() {
    this.theme = "";
    this.accessibleLive = "Lista jossa {total} kohtaa. Olet kohdassa {current}.";
    this.margin = "auto";
    this.backDisabled = false;
    this.selected = 0;
  }
  currentStepChanged(nextStep) {
    if (isNaN(nextStep)) {
      throw new Error(`step must be a number. got: ${nextStep}`);
    }
    if (nextStep < 0) {
      throw new Error(`step must be not be less than zero. got: ${nextStep}`);
    }
    if (nextStep > this.getSteps().length) {
      throw new Error(`step must not exceed total number of steps`);
    }
    this.updateStepState();
    // Shifting focus would occasionally fail if done immediately.
    // This may be due to re-render happening at the same time.
    // So we defer shifting focus, to ensure it always works.
    setTimeout(() => this.setStepFocus(), 50);
  }
  currentStepInvokedDisable() {
    this.updateStepState();
  }
  onDuetStepClick(e) {
    this.duetStepChange.emit({
      fromStep: this.selected,
      toStep: e.detail.stepIndex,
      component: "duet-stepper",
    });
  }
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  async connectedCallback() {
    this.updateStepState();
  }
  getSteps() {
    return Array.from(this.element.querySelectorAll("duet-step"));
  }
  setStepFocus() {
    const steps = this.getSteps();
    const step = steps[this.selected];
    step.setFocus();
  }
  updateStepState() {
    const steps = this.getSteps();
    steps.forEach((step, index) => {
      let state;
      if (index < this.selected) {
        state = this.backDisabled ? "disabled" : "complete";
      }
      else if (index > this.selected) {
        state = "incomplete";
      }
      else {
        state = "current";
      }
      step.theme = this.theme;
      step.state = state;
      step.stepIndex = index;
    });
    const stepsByState = groupBy("state", steps);
    Object.values(stepsByState).forEach(steps => {
      steps.forEach((step, i) => {
        step.roundedTop = i === 0;
        step.roundedBottom = i === steps.length - 1;
      });
    });
  }
  formatAnnouncement() {
    const steps = this.getSteps();
    const current = (this.selected + 1).toString(10);
    const total = steps.length.toString(10);
    return this.accessibleLive.replace("{current}", current).replace("{total}", total);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, { class: { "duet-m-0": this.margin === "none" } }, h("div", { class: { "duet-stepper": true, "duet-theme-turva": this.theme === "turva" } }, h("duet-visually-hidden", { "aria-live": "polite", "aria-atomic": "true", "aria-relevant": "all" }, this.formatAnnouncement()), h("slot", null))));
  }
  static get is() { return "duet-stepper"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-stepper.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-stepper.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the component."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "accessibleLive": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Format of message used to announce current step when navigating between steps.\nThe string {current} is replaced with current the step number.\nThe string {total} is replaced with the total number of steps."
        },
        "attribute": "accessible-live",
        "reflect": false,
        "defaultValue": "\"Lista jossa {total} kohtaa. Olet kohdassa {current}.\""
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "backDisabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls whether navigation back to previous steps is allowed or not."
        },
        "attribute": "back-disabled",
        "reflect": false,
        "defaultValue": "false"
      },
      "selected": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "The index of the current step."
        },
        "attribute": "selected",
        "reflect": true,
        "defaultValue": "0"
      }
    };
  }
  static get events() {
    return [{
        "method": "duetStepChange",
        "name": "duetStepChange",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Event emitted when the current step is changed. Can be cancelled to prevent the change."
        },
        "complexType": {
          "original": "DuetStepChangeEvent",
          "resolved": "{ component: \"duet-stepper\"; fromStep: number; toStep: number; }",
          "references": {
            "DuetStepChangeEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-stepper/duet-stepper.tsx"
            }
          }
        }
      }];
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "selected",
        "methodName": "currentStepChanged"
      }, {
        "propName": "backDisabled",
        "methodName": "currentStepInvokedDisable"
      }];
  }
  static get listeners() {
    return [{
        "name": "duetStepClick",
        "method": "onDuetStepClick",
        "target": undefined,
        "capture": false,
        "passive": false
      }];
  }
}
