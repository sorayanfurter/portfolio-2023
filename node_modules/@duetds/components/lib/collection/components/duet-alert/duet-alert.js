/*!
 * Built with Duet Design System
 */
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { createID } from "../../utils/create-id";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
export class DuetAlert {
  constructor() {
    this.descriptiveId = createID("DuetAlert");
    this.handleDismiss = (ev) => {
      this.handleHide();
      this.duetDismiss.emit({
        component: "duet-alert",
        originalEvent: ev,
      });
    };
    this.handleShow = () => {
      this.isDismissed = false;
    };
    this.handleHide = () => {
      this.isDismissed = true;
    };
    this.theme = "";
    this.isDismissed = false;
    this.timeoutID = undefined;
    this.language = getLanguage();
    this.accessibleLabelDefaults = {
      fi: "Sulje viesti",
      sv: "StÃ¤ng meddelandet",
      en: "Close the message",
    };
    this.accessibleLabel = getLocaleString(this.accessibleLabelDefaults);
    this.announcements = true;
    this.icon = "";
    this.autoDismiss = undefined;
    this.margin = "auto";
    this.padding = "auto";
    this.variation = "default";
    this.dismissible = false;
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabel === this.accessibleLabelDefaults[oldValue]) {
      this.accessibleLabel = getLocaleString(this.accessibleLabelDefaults, newValue);
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  componentDidLoad() {
    if (this.autoDismiss) {
      this.timeoutID = setTimeout(() => this.handleDismiss(), this.autoDismiss);
    }
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    if (this.timeoutID) {
      clearTimeout(this.timeoutID);
    }
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Show.
   */
  async show() {
    this.handleShow();
  }
  /**
   * Hide.
   */
  async hide() {
    this.handleHide();
  }
  /**
   * There is bug in NVDA screen reader
   * that is causing multiple alert readings
   * when alert contains other components (link, button etc.).
   */
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const closeColor = this.theme === "turva" ? "secondary-turva" : "secondary";
    const role = this.variation === "danger" || this.variation === "warning" ? "alert" : "status";
    return (h(Host, { class: {
        "duet-theme-turva": this.theme === "turva",
        "duet-alert-is-dismissed": this.isDismissed,
      }, role: this.announcements ? role : undefined }, h("div", { class: {
        "duet-alert": true,
        "duet-alert-has-icon": !!this.icon,
        "duet-alert-is-dismissible": this.dismissible,
        "duet-p-0": this.padding === "none",
        "duet-m-0": this.margin === "none",
        [this.variation]: true,
        "duet-theme-turva": this.theme === "turva",
      } }, h("div", { class: "duet-alert-container" }, this.icon && (h("div", { class: "duet-alert-icon" }, h("duet-icon", { size: "auto", name: this.icon, color: "currentColor" }))), h("span", { id: this.descriptiveId }, h("slot", null))), this.dismissible && (h("div", { class: "duet-alert-dismiss" }, h("duet-button", { variation: "plain", accessibleLabel: this.accessibleLabel, accessibleDescribedBy: this.descriptiveId, color: closeColor, iconSize: "medium", icon: "navigation-close", iconOnly: true, margin: "none", theme: this.theme, onClick: this.handleDismiss, fixed: true }))))));
  }
  static get is() { return "duet-alert"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-alert.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-alert.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the card."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "accessibleLabelDefaults": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject | string",
          "resolved": "DuetLangObject | string",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Sulje viesti\", sv: \"St\u00E4ng meddelandet\", en: \"Close the message\"}"
            }],
          "text": "Property to change languageDefaults on the component.\nnormally you would handle these strings on an application level and override @accessibleLabel when needed"
        },
        "attribute": "accessible-label-default",
        "reflect": false,
        "defaultValue": "{\n    fi: \"Sulje viesti\",\n    sv: \"St\u00E4ng meddelandet\",\n    en: \"Close the message\",\n  }"
      },
      "accessibleLabel": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Sulje viesti\", sv: \"St\u00E4ng meddelandet\", en: \"Close the message\"}"
            }],
          "text": "Adds accessible label for the dismissible alert close button."
        },
        "attribute": "accessible-label",
        "reflect": false,
        "defaultValue": "getLocaleString(this.accessibleLabelDefaults)"
      },
      "announcements": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enable or disabled announcements by assistive technologies."
        },
        "attribute": "announcements",
        "reflect": false,
        "defaultValue": "true"
      },
      "icon": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetIconName",
          "resolved": "string",
          "references": {
            "DuetIconName": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Icon to display to the left of the content."
        },
        "attribute": "icon",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "autoDismiss": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Time in milliseconds which is waited before auto dismiss."
        },
        "attribute": "auto-dismiss",
        "reflect": false
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "padding": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetPadding",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetPadding": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the padding of the component."
        },
        "attribute": "padding",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "variation": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetStatus",
          "resolved": "\"danger\" | \"default\" | \"success\" | \"warning\"",
          "references": {
            "DuetStatus": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Style variation of the alert."
        },
        "attribute": "variation",
        "reflect": false,
        "defaultValue": "\"default\""
      },
      "dismissible": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Should a button be rendered to dismiss the alert?"
        },
        "attribute": "dismissible",
        "reflect": false,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "isDismissed": {},
      "timeoutID": {},
      "language": {}
    };
  }
  static get events() {
    return [{
        "method": "duetDismiss",
        "name": "duetDismiss",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the dismiss button is clicked"
        },
        "complexType": {
          "original": "DuetAlertEvent",
          "resolved": "{ component: \"duet-alert\"; originalEvent: MouseEvent; }",
          "references": {
            "DuetAlertEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-alert/duet-alert.tsx"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "show": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Show.",
          "tags": []
        }
      },
      "hide": {
        "complexType": {
          "signature": "() => Promise<void>",
          "parameters": [],
          "references": {
            "Promise": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Hide.",
          "tags": []
        }
      }
    };
  }
  static get watchers() {
    return [{
        "propName": "language",
        "methodName": "watchLanguageStateHandler"
      }];
  }
}
