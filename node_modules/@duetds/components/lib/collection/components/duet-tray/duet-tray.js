/*!
 * Built with Duet Design System
 */
import { sizeHeader } from "@duetds/tokens";
import { Fragment, h } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { createID } from "../../utils/create-id";
import { getLanguage, getLocaleString } from "../../utils/language-utils";
const topOffset = parseFloat(sizeHeader) * 2 * 16; // convert rem -> px
/**
 * @slot unnamed default slot - The component’s primary content. All child nodes that do not have a slot attribute defined are inserted into this primary slot.
 * @slot additional - Additional content. Anything inserted into this slot is displayed in an expandable section.
 */
export class DuetTray {
  constructor() {
    /**
     * Own Properties.
     */
    this.isTicking = false;
    this.expandableId = createID("DuetTray");
    /**
     * Local methods.
     */
    this.animationLoop = () => {
      this.hiddenState = window.pageYOffset < topOffset;
      this.isTicking = false;
    };
    this.toggleExpandable = ev => {
      ev.preventDefault();
      this.expanded = !this.expanded;
    };
    this.expanded = false;
    this.hiddenState = false;
    this.language = getLanguage();
    this.accessibleCloseLabelDefaults = {
      fi: "Sulje",
      en: "Close",
      sv: "Stäng",
    };
    this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefaults, this.language);
    this.accessibleOpenLabelDefaults = {
      fi: "Avaa",
      en: "Open",
      sv: "Öppna",
    };
    this.accessibleOpenLabel = getLocaleString(this.accessibleOpenLabelDefaults, this.language);
    this.theme = "";
    this.active = false;
    this.autoHide = true;
    this.responsive = true;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    this.hasAdditionalContent = !!this.element.querySelector("[slot='additional']");
  }
  /**
   * Component event handling.
   */
  getFrame() {
    if (!this.isTicking && this.autoHide && this.active) {
      requestAnimationFrame(this.animationLoop);
      this.isTicking = true;
    }
  }
  handleBodyClick(e) {
    if (this.expanded) {
      this.expanded = this.element.contains(e.target);
    }
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("div", { class: {
        "duet-tray": true,
        "duet-tray-is-active": this.active,
        "duet-tray-is-hidden": this.hiddenState,
        "duet-tray-is-responsive": this.responsive,
        "duet-theme-turva": this.theme === "turva",
        "duet-tray-is-expandable": this.hasAdditionalContent,
      } }, h("div", { class: "duet-tray-default-content", role: "status" }, h("slot", null)), this.hasAdditionalContent && (h(Fragment, null, h("button", { "aria-expanded": this.expanded ? "true" : "false", "aria-controls": this.expandableId, onClick: ev => this.toggleExpandable(ev), class: { "duet-tray-button": true, "duet-tray-is-expanded": this.expanded } }, h("duet-icon", { name: "action-arrow-down", size: "small", color: "currentColor", margin: "none" }), h("duet-visually-hidden", null, this.expanded ? this.accessibleCloseLabel : this.accessibleOpenLabel)), h("div", { id: this.expandableId, class: { "duet-tray-expandable": true, active: this.expanded } }, h("div", { class: "duet-tray-expandable-content" }, h("slot", { name: "additional" })))))));
  }
  static get is() { return "duet-tray"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-tray.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-tray.css"]
    };
  }
  static get properties() {
    return {
      "language": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetLanguage",
          "resolved": "\"en\" | \"fi\" | \"sv\"",
          "references": {
            "DuetLanguage": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "deprecated",
              "text": "this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing"
            }, {
              "name": "default",
              "text": "\"fi\""
            }],
          "text": "The currently active language. This setting changes the accessible labels to match the\nchosen language."
        },
        "attribute": "language",
        "reflect": false,
        "defaultValue": "getLanguage()"
      },
      "accessibleCloseLabelDefaults": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject | string",
          "resolved": "DuetLangObject | string",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Sulje\", en: \"Close\", sv: \"St\u00E4nga\"}"
            }],
          "text": "Defaults for accessibleCloseLabel"
        },
        "attribute": "accessible-close-label-default",
        "reflect": false,
        "defaultValue": "{\n    fi: \"Sulje\",\n    en: \"Close\",\n    sv: \"St\u00E4ng\",\n  }"
      },
      "accessibleCloseLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Sulje\", en: \"Close\", sv: \"St\u00E4nga\"}"
            }],
          "text": "Accessible label that is shown for screen reader users in the expandable\nclose toggle. Not visible for normal users."
        },
        "attribute": "accessible-close-label",
        "reflect": false,
        "defaultValue": "getLocaleString(this.accessibleCloseLabelDefaults, this.language)"
      },
      "accessibleOpenLabelDefaults": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject | string",
          "resolved": "DuetLangObject | string",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Avaa\", en: \"Open\", sv: \"\u00D6ppen\"}"
            }],
          "text": "Defaults for accessibleOpenLabel"
        },
        "attribute": "accessible-open-label-default",
        "reflect": false,
        "defaultValue": "{\n    fi: \"Avaa\",\n    en: \"Open\",\n    sv: \"\u00D6ppna\",\n  }"
      },
      "accessibleOpenLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Avaa\", en: \"Open\", sv: \"\u00D6ppen\"}"
            }],
          "text": "Accessible label that is shown for screen reader users in the expandable\nopen toggle. Not visible for normal users."
        },
        "attribute": "accessible-open-label",
        "reflect": false,
        "defaultValue": "getLocaleString(this.accessibleOpenLabelDefaults, this.language)"
      },
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the info panel."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "active": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Toggle whether the info panel is visible or not. You can use this\nproperty e.g. when pricing information is revealed to the user."
        },
        "attribute": "active",
        "reflect": true,
        "defaultValue": "false"
      },
      "autoHide": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Hide the info panel when user scrolls back to the top of the viewport."
        },
        "attribute": "auto-hide",
        "reflect": false,
        "defaultValue": "true"
      },
      "responsive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enable or disable the automatic responsive behaviour which\nmakes the info panel hide on larger viewports. Settings this to\n\"false\" means that the header panel is visible on all device sizes."
        },
        "attribute": "responsive",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get states() {
    return {
      "expanded": {},
      "hiddenState": {}
    };
  }
  static get elementRef() { return "element"; }
  static get listeners() {
    return [{
        "name": "scroll",
        "method": "getFrame",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "click",
        "method": "handleBodyClick",
        "target": "body",
        "capture": false,
        "passive": false
      }];
  }
}
