/*!
 * Built with Duet Design System
 */
/**
 * Creates an array representing an inclusive numeric range.
 * `from` must be less than `to`
 * @param from
 * @param to
 */
export function range(from, to) {
  var result = [];
  for (var i = from; i <= to; i++) {
    result.push(i);
  }
  return result;
}
/**
 * Splits an array into smaller arrays of given chunk size
 * @param array
 * @param chunkSize
 */
export function chunk(array, chunkSize) {
  const result = [];
  for (let i = 0; i < array.length; i += chunkSize) {
    result.push(array.slice(i, i + chunkSize));
  }
  return result;
}
function parseShortcut(str) {
  var _a;
  const press = str.trim().split("+");
  const key = press.pop();
  return [((_a = press[0]) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === "shift", key];
}
/**
 * Creates a keyboard event handler for handling keyboard shortcuts.
 * It currently only handles shift key as a modifier.
 * @param shortcuts a hash where keys are keyboard shortcuts, and values are handlers for those shortcuts
 * @example
 * element.addEventListener("keydown", createShortcuts({
 *  "PageDown": () => this.addMonths(1)
 *  "Shift+PageDown": () => this.addYears(1)
 * }))
 */
export function createShortcuts(shortcuts) {
  const keyBindings = Object.keys(shortcuts).map(key => [parseShortcut(key), shortcuts[key]]);
  return function handleShortcuts(event) {
    if (!(event instanceof KeyboardEvent)) {
      return;
    }
    // we need to check both event.code and event.key
    // for browser support back to IE11
    const shortcut = keyBindings.find(([[shift, key]]) => {
      return (key.toUpperCase() === event.key.toUpperCase() || key === event.code) && shift === event.shiftKey;
    });
    if (shortcut) {
      shortcut[1](event);
      event.preventDefault();
    }
  };
}
