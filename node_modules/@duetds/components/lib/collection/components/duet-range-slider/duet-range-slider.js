/*!
 * Built with Duet Design System
 */
import { colorGray, colorGrayTurva, colorPrimary, colorPrimaryTurva } from "@duetds/tokens";
import { h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { createID } from "../../utils/create-id";
import isInternetExplorer from "../../utils/is-internet-explorer";
const colors = {
  turva: {
    active: colorPrimaryTurva,
    inactive: colorGrayTurva,
  },
  default: {
    active: colorPrimary,
    inactive: colorGray,
  },
};
export class DuetRangeSlider {
  constructor() {
    /**
     * Own Properties
     */
    this.rangeId = createID("DuetRange");
    /**
     * Component event handling.
     */
    this.onInput = (ev) => {
      const input = ev.target;
      if (input) {
        this.value = parseFloat(input.value) || 0;
      }
      this.duetInput.emit({
        originalEvent: ev,
        value: this.value,
        component: "duet-range-slider",
      });
    };
    this.onChange = (ev) => {
      const input = ev.target;
      if (input) {
        this.value = parseFloat(input.value) || 0;
      }
      clearTimeout(this.timeoutId);
      this.timeoutId = setTimeout(() => {
        this.duetChange.emit({
          originalEvent: ev,
          value: this.value,
          component: "duet-range-slider",
        });
      }, this.debounce);
    };
    this.theme = "";
    this.margin = "auto";
    this.expand = false;
    this.identifier = undefined;
    this.name = undefined;
    this.required = false;
    this.disabled = false;
    this.accessibleActiveDescendant = undefined;
    this.accessibleControls = undefined;
    this.accessibleOwns = undefined;
    this.accessibleDescribedBy = undefined;
    this.min = 0;
    this.label = "label";
    this.labelHidden = false;
    this.unit = "";
    this.max = 100;
    this.step = 1;
    this.locale = "fi-FI";
    this.value = 0;
    this.debounce = 0;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  /**
   * Sets focus on the specified `duet-range-slider`. Use this method instead of the global
   * `input.focus()`.
   */
  async setFocus(options) {
    this.nativeInput.focus(options);
  }
  /**
   * Local methods.
   */
  calculatePercentage() {
    return ((this.value - this.min) / (this.max - this.min)) * 100;
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    const identifier = this.identifier || this.rangeId;
    const theme = this.theme === "turva" ? "turva" : "default";
    const { inactive, active } = colors[theme];
    const percentage = this.calculatePercentage();
    const rangeStyles = {
      background: `-webkit-linear-gradient(left,${active} 0%,${active} ${percentage}%,${inactive} ${percentage}%)`,
    };
    return (h(Host, { class: { "duet-m-0": this.margin === "none", "duet-expand": this.expand } }, h("div", { class: {
        "duet-range-container": true,
        "duet-label-hidden": this.labelHidden,
        "duet-theme-turva": this.theme === "turva",
        "duet-ie": isInternetExplorer(),
        "duet-range-disabled": this.disabled,
      } }, h("duet-label", { theme: theme, margin: "small", for: identifier }, this.label), h("output", { "aria-hidden": "true", htmlFor: identifier, class: "duet-output" }, this.value.toLocaleString(this.locale), this.unit), h("input", { onInput: this.onInput, onChange: this.onChange, ref: input => (this.nativeInput = input), type: "range", min: this.min, max: this.max, step: this.step, value: this.value, style: rangeStyles, "aria-valuemin": this.min, "aria-valuemax": this.max, "aria-valuenow": this.value, "aria-valuetext": `${this.value} ${this.unit}`, "aria-controls": this.accessibleControls, "aria-activedescendant": this.accessibleActiveDescendant, "aria-owns": this.accessibleOwns, "aria-describedby": this.accessibleDescribedBy, id: identifier, name: this.name, disabled: this.disabled, required: this.required, class: "duet-range" }))));
  }
  static get is() { return "duet-range-slider"; }
  static get encapsulation() { return "scoped"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-range-slider.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-range-slider.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the input."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "expand": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Expands the input to fill 100% of the container width."
        },
        "attribute": "expand",
        "reflect": false,
        "defaultValue": "false"
      },
      "identifier": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adds a unique identifier for the input."
        },
        "attribute": "identifier",
        "reflect": false
      },
      "name": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Name of the input."
        },
        "attribute": "name",
        "reflect": false
      },
      "required": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set whether the input is required or not. Please note that this is necessary for\naccessible inputs when the user is required to fill them. When using this property\nyou need to also set \u201Cnovalidate\u201D attribute to your form element to prevent\nbrowser from displaying its own validation errors."
        },
        "attribute": "required",
        "reflect": false,
        "defaultValue": "false"
      },
      "disabled": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Makes the input component disabled. This prevents users from being able to\ninteract with the input, and conveys its inactive state to assistive technologies."
        },
        "attribute": "disabled",
        "reflect": true,
        "defaultValue": "false"
      },
      "accessibleActiveDescendant": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a related component\u2019s visually focused element."
        },
        "attribute": "accessible-active-descendant",
        "reflect": false
      },
      "accessibleControls": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Use this prop to add an aria-controls attribute. Use the attribute to\nindicate the id of a component controlled by this component."
        },
        "attribute": "accessible-controls",
        "reflect": false
      },
      "accessibleOwns": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a component owned by the input."
        },
        "attribute": "accessible-owns",
        "reflect": false
      },
      "accessibleDescribedBy": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Indicates the id of a component that describes the input."
        },
        "attribute": "accessible-described-by",
        "reflect": false
      },
      "min": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Minimum value."
        },
        "attribute": "min",
        "reflect": false,
        "defaultValue": "0"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Label for the range slider."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "\"label\""
      },
      "labelHidden": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Visually hide the label, but still show it to screen readers."
        },
        "attribute": "label-hidden",
        "reflect": false,
        "defaultValue": "false"
      },
      "unit": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Unit for the range slider."
        },
        "attribute": "unit",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "max": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Maximum value."
        },
        "attribute": "max",
        "reflect": false,
        "defaultValue": "100"
      },
      "step": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Step amount."
        },
        "attribute": "step",
        "reflect": false,
        "defaultValue": "1"
      },
      "locale": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLocale",
          "resolved": "\"en-GB\" | \"en-US\" | \"fi-FI\" | \"sv-SE\"",
          "references": {
            "DuetLocale": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Locale used to format the entered value."
        },
        "attribute": "locale",
        "reflect": false,
        "defaultValue": "\"fi-FI\""
      },
      "value": {
        "type": "number",
        "mutable": true,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Value of the input."
        },
        "attribute": "value",
        "reflect": false,
        "defaultValue": "0"
      },
      "debounce": {
        "type": "number",
        "mutable": false,
        "complexType": {
          "original": "number",
          "resolved": "number",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set the amount of time, in milliseconds, to wait to trigger the duetChange\nevent after each keystroke."
        },
        "attribute": "debounce",
        "reflect": false,
        "defaultValue": "0"
      }
    };
  }
  static get events() {
    return [{
        "method": "duetChange",
        "name": "duetChange",
        "bubbles": false,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when the value has changed."
        },
        "complexType": {
          "original": "DuetRangeChangeEvent",
          "resolved": "{ originalEvent?: Event; component: \"duet-range-slider\"; value: number; }",
          "references": {
            "DuetRangeChangeEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-range-slider/duet-range-slider.tsx"
            }
          }
        }
      }, {
        "method": "duetInput",
        "name": "duetInput",
        "bubbles": true,
        "cancelable": true,
        "composed": true,
        "docs": {
          "tags": [],
          "text": "Emitted when a keyboard input ocurred."
        },
        "complexType": {
          "original": "DuetRangeChangeEvent",
          "resolved": "{ originalEvent?: Event; component: \"duet-range-slider\"; value: number; }",
          "references": {
            "DuetRangeChangeEvent": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-range-slider/duet-range-slider.tsx"
            }
          }
        }
      }];
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus on the specified `duet-range-slider`. Use this method instead of the global\n`input.focus()`.",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
}
