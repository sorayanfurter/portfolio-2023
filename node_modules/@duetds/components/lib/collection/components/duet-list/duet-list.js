/*!
 * Built with Duet Design System
 */
import { h } from "@stencil/core";
import { inheritGlobalTheme } from "../../common/themeable-component";
import { watchForOptions } from "../../utils/watch-options";
export class DuetList {
  constructor() {
    this.theme = "";
    this.margin = "auto";
    this.padding = "auto";
    this.mobile = "left";
    this.breakpoint = "small";
    this.variation = "default";
    this.labelWidth = "30";
    this.responsive = true;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  async connectedCallback() {
    const el = this.element;
    this.mutationO = watchForOptions(el, "duet-list-item", () => {
      this.updateListItems();
    });
    this.updateListItems();
  }
  disconnectedCallback() {
    if (this.mutationO) {
      this.mutationO.disconnect();
      this.mutationO = undefined;
    }
  }
  /**
   * Local methods
   */
  toggleClass(elem, className, force) {
    if (force) {
      elem.classList.add(className);
    }
    else {
      elem.classList.remove(className);
    }
  }
  async updateListItems() {
    const items = Array.from(this.element.querySelectorAll("duet-list-item"));
    items.forEach(item => {
      item.responsive = this.responsive;
      item.breakpoint = this.responsive ? this.breakpoint || "small" : undefined;
      // Use classes to apply styles for SSR compatibility
      item.classList.add(`duet-list-width-${this.labelWidth}`);
      item.classList.add(`duet-list-variation-${this.variation}`);
      // If padding is set to 0
      this.toggleClass(item, "duet-p-0", this.padding === "none");
      // If text is centered for mobile
      this.toggleClass(item, "duet-list-mobile-center", this.mobile === "center");
      // Create zebra striping if striped variation is used
      this.toggleClass(item, "duet-list-striped", this.variation === "striped");
      // Create borders if bordered variation is used
      this.toggleClass(item, "duet-list-bordered", this.variation === "bordered");
      // Create inner borders if inner-bordered variation is used
      this.toggleClass(item, "duet-list-inner-bordered", this.variation === "inner-bordered");
      // Finally apply turva theme if necessary
      this.toggleClass(item, "duet-theme-turva", this.theme === "turva");
    });
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h("dl", { class: { "duet-list-component": true, "duet-m-0": this.margin === "none" } }, h("slot", null)));
  }
  static get is() { return "duet-list"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-list.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-list.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the list."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "margin": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetMargin",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetMargin": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the margin of the component."
        },
        "attribute": "margin",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "padding": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetPadding",
          "resolved": "\"auto\" | \"none\"",
          "references": {
            "DuetPadding": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Controls the padding of the component."
        },
        "attribute": "padding",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "mobile": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetListMobileAlignment",
          "resolved": "\"center\" | \"left\"",
          "references": {
            "DuetListMobileAlignment": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-list/duet-list.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjusts the alignment of the list items on mobile breakpoint."
        },
        "attribute": "mobile",
        "reflect": false,
        "defaultValue": "\"left\""
      },
      "breakpoint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetListBreakpoint",
          "resolved": "\"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\"",
          "references": {
            "DuetListBreakpoint": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Switch the breakpoint used to trigger the content stacking. These match to\nsimilar media query tokens: $media-query-small and $media-query-large."
        },
        "attribute": "breakpoint",
        "reflect": false,
        "defaultValue": "\"small\""
      },
      "variation": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetListVariation",
          "resolved": "\"bordered\" | \"default\" | \"inner-bordered\" | \"striped\"",
          "references": {
            "DuetListVariation": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-list/duet-list.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Style variation of the list."
        },
        "attribute": "variation",
        "reflect": false,
        "defaultValue": "\"default\""
      },
      "labelWidth": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetListLabelWidth",
          "resolved": "\"100\" | \"30\" | \"50\" | \"70\"",
          "references": {
            "DuetListLabelWidth": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-list/duet-list.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Set the column width of the first column in percentages."
        },
        "attribute": "label-width",
        "reflect": false,
        "defaultValue": "\"30\""
      },
      "responsive": {
        "type": "boolean",
        "mutable": false,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Enable or disable the automatic responsive behaviour of the list\ncomponent. Setting this option to \"true\"\nmakes sure that contents are stacked vertically on mobile.\nWhen \"false\" is set, contents are always shown in a single row."
        },
        "attribute": "responsive",
        "reflect": false,
        "defaultValue": "true"
      }
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "theme",
        "methodName": "updateListItems"
      }, {
        "propName": "padding",
        "methodName": "updateListItems"
      }, {
        "propName": "mobile",
        "methodName": "updateListItems"
      }, {
        "propName": "responsive",
        "methodName": "updateListItems"
      }, {
        "propName": "breakpoint",
        "methodName": "updateListItems"
      }, {
        "propName": "variation",
        "methodName": "updateListItems"
      }, {
        "propName": "labelWidth",
        "methodName": "updateListItems"
      }];
  }
}
