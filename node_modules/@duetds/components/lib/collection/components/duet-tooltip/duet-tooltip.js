/*!
 * Built with Duet Design System
 */
import { media_query_large, media_query_medium } from "@duetds/tokens/lib/tokens.json";
import { arrow, computePosition, flip, shift } from "@floating-ui/dom";
import { Build, h, Host } from "@stencil/core";
import { inheritGlobalTheme } from "../../common";
import { createID } from "../../utils/create-id";
import { connectLanguageChangeObserver, disconnectLanguageChangeObserver, getLanguage, getLocaleString, } from "../../utils/language-utils";
export class DuetTooltip {
  constructor() {
    /**
     * Own Properties.
     */
    this.mql = [
      window.matchMedia(media_query_medium.replace(/'/g, "")),
      window.matchMedia(media_query_large.replace(/'/g, "")),
    ];
    this.tooltipId = createID("DuetTooltip");
    /**
     * Local methods
     */
    this.openTooltip = () => {
      this.focusTarget = "tooltip";
      this.active = true;
    };
    this.closeTooltip = (moveFocusToButton = false) => {
      if (moveFocusToButton) {
        this.focusTarget = "trigger";
      }
      this.active = false;
    };
    this.toggleOpen = () => {
      this.active ? this.closeTooltip() : this.openTooltip();
    };
    this.handleFocusOut = (e) => {
      if (!this.active) {
        return;
      }
      const relatedTarget = e.relatedTarget;
      if (
      // if we don't know where focus went
      relatedTarget == null ||
        // if focus is within the tooltip itself
        this.element.shadowRoot.contains(relatedTarget) ||
        // if focus is within the tooltip light DOM
        this.element.contains(relatedTarget)) {
        // then we can skip closing
        return;
      }
      this.closeTooltip();
    };
    this.handleKeyDown = (e) => {
      const isEscapeKey = e.keyCode === 27;
      const isTabbingOut = e.target === this.scrollableEl && e.shiftKey && e.keyCode === 9;
      if (isEscapeKey || isTabbingOut) {
        this.closeTooltip(true);
      }
    };
    this.handleCloseClick = () => {
      this.closeTooltip(true);
    };
    this.updatePlacement = async () => {
      var _a, _b;
      let preferRight = true;
      if (this.breakpoint === "large" && !this.mql[1].matches) {
        preferRight = false;
      }
      else if (this.breakpoint === "medium" && !this.mql[0].matches) {
        preferRight = false;
      }
      let placement = preferRight ? "top-start" : "top-end";
      if (this.direction === "left") {
        placement = "top-end";
      }
      else if (this.direction === "right") {
        placement = "top-start";
      }
      const position = await computePosition(this.buttonEl, this.tooltipEl, {
        placement,
        middleware: [flip(), shift({ padding: 5 }), arrow({ element: this.arrowEl })],
      });
      this.tooltipY = position.y;
      this.tooltipX = position.x;
      this.placement = position.placement;
      this.arrowY = (_a = position.middlewareData.arrow) === null || _a === void 0 ? void 0 : _a.y;
      this.arrowX = (_b = position.middlewareData.arrow) === null || _b === void 0 ? void 0 : _b.x;
    };
    this.placement = "bottom";
    this.tooltipY = undefined;
    this.tooltipX = undefined;
    this.arrowX = undefined;
    this.arrowY = undefined;
    this.theme = "";
    this.language = getLanguage();
    this.accessibleLabelDefault = {
      fi: "Näytä lisätietoja",
      en: "Show more information",
      sv: "Visa mer tilläggsuppgifter",
    };
    this.accessibleLabel = getLocaleString(this.accessibleLabelDefault, this.language);
    this.accessibleInputLabel = undefined;
    this.accessibleCloseLabelDefault = {
      fi: "Sulje lisätiedot",
      en: "Close details",
      sv: "Stäng tilläggsuppgifter",
    };
    this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefault, this.language);
    this.label = "";
    this.breakpoint = "medium";
    this.direction = "auto";
    this.positionVertical = "0";
    this.positionHorizontal = "0";
    this.active = false;
  }
  watchLanguageStateHandler(newValue, oldValue) {
    if (newValue !== oldValue && this.accessibleLabel === this.accessibleLabelDefault[oldValue]) {
      this.accessibleLabel = getLocaleString(this.accessibleLabelDefault, newValue);
    }
    if (newValue !== oldValue && this.accessibleCloseLabel === this.accessibleCloseLabelDefault[oldValue]) {
      this.accessibleCloseLabel = getLocaleString(this.accessibleCloseLabelDefault, newValue);
    }
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
  }
  componentDidLoad() {
    if (!Build.isServer) {
      this.updatePlacement();
    }
  }
  componentDidUpdate() {
    switch (this.focusTarget) {
      case "tooltip":
        this.scrollableEl.focus({ preventScroll: true });
        break;
      case "trigger":
        this.buttonEl.focus({ preventScroll: true });
        break;
    }
    this.focusTarget = null;
  }
  connectedCallback() {
    connectLanguageChangeObserver(this);
  }
  disconnectedCallback() {
    disconnectLanguageChangeObserver(this);
  }
  /**
   * Component event handling.
   */
  onScroll() {
    clearTimeout(this.scrollTimer);
    this.scrollTimer = setTimeout(() => {
      if (this.active) {
        this.updatePlacement();
      }
    }, 100);
  }
  handleWindowResize() {
    clearTimeout(this.resizeTimer);
    this.resizeTimer = setTimeout(() => {
      this.updatePlacement();
    }, 100);
  }
  handleDocumentClick(e) {
    if (!this.active) {
      return;
    }
    const path = e.composedPath();
    const isClickOutside = path.every(el => el !== this.element);
    if (isClickOutside) {
      this.closeTooltip();
    }
  }
  async handleActiveChange(newActiveValue) {
    if (newActiveValue) {
      this.updatePlacement();
    }
    else {
      setTimeout(() => this.updatePlacement(), 300);
    }
  }
  /**
   * render() function.
   * Always the last one in the class.
   */
  render() {
    const tooltipStyles = {
      transform: `translateY(${this.positionVertical}) translateX(${this.positionHorizontal})`,
      // This is needed to that the active tooltip stacks on
      // top of other tooltips and the header.
      zIndex: this.active ? "201" : "",
    };
    const positionStyles = {
      top: `${this.tooltipY}px`,
      left: `${this.tooltipX}px`,
      display: "block",
    };
    const arrowStyles = {
      top: this.arrowY ? `${this.arrowY}px` : undefined,
      left: this.arrowX ? `${this.arrowX}px` : undefined,
    };
    return (h(Host, { style: tooltipStyles }, h("button", { ref: element => (this.buttonEl = element), "aria-controls": this.tooltipId, "aria-expanded": this.active ? "true" : "false", onClick: this.toggleOpen, type: "button", class: {
        "duet-tooltip-button": true,
        "duet-tooltip-button-has-label": !!this.label,
        "duet-theme-turva": this.theme === "turva",
      } }, h("svg", { "aria-hidden": "true", role: "img", fill: "currentColor", viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg" }, h("path", { d: "m13.5 17.25c-1.241 0-2.25-1.009-2.25-2.25v-3.75h-.75c-.414 0-.75-.336-.75-.75s.336-.75.75-.75h.75c.827 0 1.5.673 1.5 1.5v3.75c0 .414.336.75.75.75h.75c.414 0 .75.336.75.75s-.336.75-.75.75z" }), h("circle", { cx: "11.625", cy: "7.125", r: "1.125" }), h("path", { d: "m12 24c-6.617 0-12-5.383-12-12s5.383-12 12-12 12 5.383 12 12-5.383 12-12 12zm0-22.5c-5.79 0-10.5 4.71-10.5 10.5s4.71 10.5 10.5 10.5 10.5-4.71 10.5-10.5-4.71-10.5-10.5-10.5z" })), this.label ? (h("span", { class: "duet-tooltip-label" }, this.label)) : (h("duet-visually-hidden", null, this.accessibleInputLabel
      ? `${this.accessibleInputLabel}, ${this.accessibleLabel}`
      : this.accessibleLabel))), h("div", { ref: element => (this.tooltipEl = element), style: positionStyles, class: {
        "duet-tooltip": true,
        "duet-theme-turva": this.theme === "turva",
        "duet-tooltip-has-label": !!this.label,
        "duet-tooltip-active": this.active === true,
      }, onClick: e => e.stopPropagation(), onKeyDown: this.handleKeyDown, onFocusout: this.handleFocusOut }, h("div", { ref: element => (this.scrollableEl = element), class: "duet-tooltip-scrollable", tabindex: "0", id: this.tooltipId }, h("slot", null)), h("div", { ref: element => (this.arrowEl = element), class: { arrow: true, [this.placement]: true }, style: arrowStyles }, h("div", { class: { "arrow-container": true, [this.placement]: true } })), h("button", { type: "button", class: "duet-tooltip-close", onClick: this.handleCloseClick }, h("duet-icon", { name: "navigation-close-small", margin: "none", color: "currentColor", size: "xxx-small" }), h("duet-visually-hidden", null, this.accessibleCloseLabel)))));
  }
  static get is() { return "duet-tooltip"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-tooltip.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-tooltip.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme of the tooltip."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "language": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetLanguage",
          "resolved": "\"en\" | \"fi\" | \"sv\"",
          "references": {
            "DuetLanguage": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "deprecated",
              "text": "this is now handled via the html lang tag, and is no longer used - kept to avoid breaking changes and ease unit testing"
            }, {
              "name": "default",
              "text": "\"fi\""
            }],
          "text": "The currently active language. This setting changes the accessible labels to match the\nchosen language."
        },
        "attribute": "language",
        "reflect": false,
        "defaultValue": "getLanguage()"
      },
      "accessibleLabelDefault": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject | string",
          "resolved": "DuetLangObject | string",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"N\u00E4yt\u00E4 lis\u00E4tietoja\", en: \"See more information\", sv: \"Se mer information\"}"
            }],
          "text": "Default language strings for the accessibleLabel"
        },
        "attribute": "accessible-label-default",
        "reflect": false,
        "defaultValue": "{\n    fi: \"N\u00E4yt\u00E4 lis\u00E4tietoja\",\n    en: \"Show more information\",\n    sv: \"Visa mer till\u00E4ggsuppgifter\",\n  }"
      },
      "accessibleLabel": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"N\u00E4yt\u00E4 lis\u00E4tietoja\", en: \"See more information\", sv: \"Se mer information\"}"
            }],
          "text": "Adds accessible label for the info icon that is only shown for screen\nreaders. This property is always required to create an accessible interface!"
        },
        "attribute": "accessible-label",
        "reflect": false,
        "defaultValue": "getLocaleString(this.accessibleLabelDefault, this.language)"
      },
      "accessibleInputLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "internal",
              "text": "Adds a prefix to the accessible label.\nUsed internally by input components to add more context to the tooltip."
            }],
          "text": ""
        },
        "attribute": "accessible-input-label",
        "reflect": false
      },
      "accessibleCloseLabelDefault": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetLangObject | string",
          "resolved": "DuetLangObject | string",
          "references": {
            "DuetLangObject": {
              "location": "import",
              "path": "../../utils/language-utils"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Sulje lis\u00E4tiedot\", en: \"Close details\", sv: \"St\u00E4ng detaljer\"}"
            }],
          "text": "Default language strings for the accessibleCloseLabel"
        },
        "attribute": "accessible-close-label-default",
        "reflect": false,
        "defaultValue": "{\n    fi: \"Sulje lis\u00E4tiedot\",\n    en: \"Close details\",\n    sv: \"St\u00E4ng till\u00E4ggsuppgifter\",\n  }"
      },
      "accessibleCloseLabel": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [{
              "name": "default",
              "text": "{fi: \"Sulje lis\u00E4tiedot\", en: \"Close details\", sv: \"St\u00E4ng detaljer\"}"
            }],
          "text": "Adds accessible label for the close icon that is only shown for screen\nreaders. This property is always required to create an accessibly interface!"
        },
        "attribute": "accessible-close-label",
        "reflect": false,
        "defaultValue": "getLocaleString(\n    this.accessibleCloseLabelDefault,\n    this.language\n  )"
      },
      "label": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Label of the tooltip. If used, replaces the accessibleLabel option."
        },
        "attribute": "label",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "breakpoint": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetTooltipBreakpoint",
          "resolved": "\"large\" | \"medium\"",
          "references": {
            "DuetTooltipBreakpoint": {
              "location": "local",
              "path": "/Users/laaksju3/duetds/packages/components/src/components/duet-tooltip/duet-tooltip.tsx"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjust the responsive breakpoint where tooltip starts opening towards left."
        },
        "attribute": "breakpoint",
        "reflect": false,
        "defaultValue": "\"medium\""
      },
      "direction": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "DuetTooltipDirection",
          "resolved": "\"auto\" | \"left\" | \"right\"",
          "references": {
            "DuetTooltipDirection": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "With direction setting you can force the tooltip to always open towards left\nor right instead of automatically determining the direction."
        },
        "attribute": "direction",
        "reflect": false,
        "defaultValue": "\"auto\""
      },
      "positionVertical": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjust the vertical positioning of the tooltip toggle in pixels. Can be a\nnegative value as well. E.g. \"-13px\"."
        },
        "attribute": "position-vertical",
        "reflect": true,
        "defaultValue": "\"0\""
      },
      "positionHorizontal": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adjust the horizontal positioning of the tooltip toggle in pixels. Can be a\nnegative value as well. E.g. \"-13px\"."
        },
        "attribute": "position-horizontal",
        "reflect": true,
        "defaultValue": "\"0\""
      },
      "active": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Toggle whether the tooltip is initially visible or not. This property should\nnot be used in production in most cases."
        },
        "attribute": "active",
        "reflect": true,
        "defaultValue": "false"
      }
    };
  }
  static get states() {
    return {
      "placement": {},
      "tooltipY": {},
      "tooltipX": {},
      "arrowX": {},
      "arrowY": {}
    };
  }
  static get elementRef() { return "element"; }
  static get watchers() {
    return [{
        "propName": "language",
        "methodName": "watchLanguageStateHandler"
      }, {
        "propName": "active",
        "methodName": "handleActiveChange"
      }];
  }
  static get listeners() {
    return [{
        "name": "scroll",
        "method": "onScroll",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "resize",
        "method": "handleWindowResize",
        "target": "window",
        "capture": false,
        "passive": true
      }, {
        "name": "click",
        "method": "handleDocumentClick",
        "target": "document",
        "capture": false,
        "passive": false
      }];
  }
}
