/*!
 * Built with Duet Design System
 */
import { media_query_large } from "@duetds/tokens/lib/tokens.json";
import { h, Host } from "@stencil/core";
import { disableBodyScroll, enableBodyScroll } from "body-scroll-lock/lib/bodyScrollLock.es6.js";
import { inheritGlobalTheme } from "../../common/themeable-component";
export class DuetSubmenuBar {
  constructor() {
    this.mql = [window.matchMedia(media_query_large.replace(/'/g, ""))];
    this.boundMqlFunctions = [];
    this.changeAriaProperties = () => {
      if (this.mql[0].matches) {
        this.mobile = false;
        enableBodyScroll(this.element);
      }
      else {
        this.mobile = true;
        if (!this.bodyScroll) {
          disableBodyScroll(this.element, { reserveScrollBarGap: true });
        }
      }
    };
    this.onClick = () => {
      const open = this.open;
      if (!open) {
        this.bodyScroll = false;
        disableBodyScroll(this.element, { reserveScrollBarGap: true });
      }
      else {
        enableBodyScroll(this.element);
        this.bodyScroll = true;
      }
      this.open = !open;
    };
    this.mobile = true;
    this.bodyScroll = true;
    this.theme = "";
    this.open = false;
    this.accessibleLabel = undefined;
  }
  /**
   * Component lifecycle events.
   */
  componentWillLoad() {
    inheritGlobalTheme(this);
    const children = Array.from(this.element.children);
    for (const child of children) {
      child.setAttribute("role", "listitem");
    }
  }
  connectedCallback() {
    this.changeAriaProperties();
    for (let i = 0; i < this.mql.length; i++) {
      // addEventListener is not available in Stencil hydrate
      if (this.mql[i].addEventListener) {
        const bound = this.changeAriaProperties.bind(this);
        this.mql[i].addEventListener("change", bound);
        this.boundMqlFunctions[i] = bound;
      }
    }
  }
  disconnectedCallback() {
    for (let i = 0; i < this.mql.length; i++) {
      // removeEventListener is not available in Stencil hydrate
      if (this.mql[i].removeEventListener) {
        this.mql[i].removeEventListener("change", this.boundMqlFunctions[i]);
      }
    }
    this.boundMqlFunctions = [];
  }
  /**
   * Sets focus. Use this method instead of the global focus().
   */
  async setFocus(options) {
    this.button.focus(options);
  }
  /**
   * render() function
   * Always the last one in the class.
   */
  render() {
    return (h(Host, null, h("nav", { class: { "duet-submenu-bar": true, "duet-theme-turva": this.theme === "turva" }, "aria-label": this.accessibleLabel }, h("div", { class: "shadow-container", role: "presentation" }, h("div", { class: "top-shadow" })), h("button", { ref: element => (this.button = element), "aria-haspopup": "menu", "aria-controls": "menu", "aria-expanded": this.open ? "true" : "false", id: "button", type: "button", class: {
        active: this.open,
      }, onClick: this.onClick }, h("div", { class: "label" }, h("slot", { name: "label" }), h("duet-icon", { theme: this.theme, class: "caret", name: "action-arrow-down-small", margin: "none", size: "xxx-small", color: "currentColor" }))), h("div", { class: {
        "menu-container": true,
        hidden: !this.open,
      }, role: "presentation" }, h("div", { role: this.mobile ? "menu" : null, id: "menu", "aria-labelledby": this.mobile ? "button" : null, "aria-expanded": this.mobile ? (this.open ? "true" : "false") : null, class: {
        items: true,
        hidden: !this.open,
      } }, h("div", { class: "list", role: this.mobile ? "presentation" : "list" }, h("slot", null))), h("div", { class: "mobile-background" })))));
  }
  static get is() { return "duet-submenu-bar"; }
  static get encapsulation() { return "shadow"; }
  static get originalStyleUrls() {
    return {
      "$": ["duet-submenu-bar.scss"]
    };
  }
  static get styleUrls() {
    return {
      "$": ["duet-submenu-bar.css"]
    };
  }
  static get properties() {
    return {
      "theme": {
        "type": "string",
        "mutable": true,
        "complexType": {
          "original": "DuetTheme",
          "resolved": "\"\" | \"default\" | \"turva\"",
          "references": {
            "DuetTheme": {
              "location": "import",
              "path": "../../common-types"
            }
          }
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Theme."
        },
        "attribute": "theme",
        "reflect": false,
        "defaultValue": "\"\""
      },
      "open": {
        "type": "boolean",
        "mutable": true,
        "complexType": {
          "original": "boolean",
          "resolved": "boolean",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Open"
        },
        "attribute": "open",
        "reflect": true,
        "defaultValue": "false"
      },
      "accessibleLabel": {
        "type": "string",
        "mutable": false,
        "complexType": {
          "original": "string",
          "resolved": "string",
          "references": {}
        },
        "required": false,
        "optional": false,
        "docs": {
          "tags": [],
          "text": "Adds accessible label for the button that is only shown for screen readers.\nTypically, this label text replaces the visible text on the button for\nusers who use assistive technology."
        },
        "attribute": "accessible-label",
        "reflect": false
      }
    };
  }
  static get states() {
    return {
      "mobile": {},
      "bodyScroll": {}
    };
  }
  static get methods() {
    return {
      "setFocus": {
        "complexType": {
          "signature": "(options?: FocusOptions) => Promise<void>",
          "parameters": [{
              "tags": [],
              "text": ""
            }],
          "references": {
            "Promise": {
              "location": "global"
            },
            "FocusOptions": {
              "location": "global"
            }
          },
          "return": "Promise<void>"
        },
        "docs": {
          "text": "Sets focus. Use this method instead of the global focus().",
          "tags": []
        }
      }
    };
  }
  static get elementRef() { return "element"; }
}
