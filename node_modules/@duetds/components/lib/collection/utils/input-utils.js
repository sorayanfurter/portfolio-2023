/*!
 * Built with Duet Design System
 */
/**
 * This function restores cursor position after changing input
 *
 * @example
 * const resetCursor = storeAndResetCursor(this.input.selectionStart,this.input.selectionEnd)
 * this.input.changeValueAndForceUpdateOfCursoPosition()
 * resetCursor()
 */
export function resetCursor(domElement) {
  if (domElement && domElement.selectionStart) {
    const start = domElement.selectionStart;
    const end = domElement.selectionEnd;
    return function () {
      if (start === end) {
        domElement.selectionStart = start;
        domElement.selectionEnd = end;
      }
      else {
        domElement.setSelectionRange(start, end);
      }
    };
  }
  return () => true;
}
/**
 * Given an input and a regex, remove any characters from the input's value
 * which match the regex, *whilst* maintaining cursor position.
 *
 * In effect, this prevent users from entering specific characters.
 *
 * @example
 * input.value = "foo123"
 * cleanValue(input, /[^0-9]/g)
 * input.value === "123"
 */
export function cleanValue(input, regex) {
  const value = input.value;
  const cursor = input.selectionStart;
  const beforeCursor = value.slice(0, cursor);
  const afterCursor = value.slice(cursor, value.length);
  const filteredBeforeCursor = beforeCursor.replace(regex, "");
  const filterAfterCursor = afterCursor.replace(regex, "");
  const newValue = filteredBeforeCursor + filterAfterCursor;
  const newCursor = filteredBeforeCursor.length;
  input.value = newValue;
  input.selectionStart = input.selectionEnd = newCursor;
  return newValue;
}
